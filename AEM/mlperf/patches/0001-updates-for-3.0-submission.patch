From aeb2c082de0ea752132dfe6cdbaf127588e9e5ba Mon Sep 17 00:00:00 2001
From: louie-tsai <louie.tsai@intel.com>
Date: Fri, 14 Jul 2023 13:38:31 -0700
Subject: [PATCH] updates for 3.0 submission

---
 .../calibration/bert-99/pytorch-cpu/README.md |   12 +-
 .../calibration/rnnt/pytorch-cpu/README.md    |   10 +
 .../code/3d-unet-99.9/pytorch-cpu/README.md   |   27 +-
 .../pytorch-cpu/docker/Dockerfile             |    7 +-
 .../docker/build_3dunet_container.sh          |    2 +-
 .../code/3d-unet-99.9/pytorch-cpu/run.sh      |   21 +
 .../pytorch-cpu/user_default.conf             |    4 +
 .../code/3d-unet-99/pytorch-cpu/README.md     |   10 +
 .../code/BIOS_examples/Balanced_DIMM.png      |  Bin 0 -> 85562 bytes
 .../Intel/code/BIOS_examples/CPU_setting.png  |  Bin 0 -> 34117 bytes
 .../code/BIOS_examples/Intel_p_state.png      |  Bin 0 -> 11133 bytes
 .../code/BIOS_examples/Unbalanced_DIMM.png    |  Bin 0 -> 89164 bytes
 .../code/BIOS_examples/mem_bandwidth.png      |  Bin 0 -> 6586 bytes
 .../code/BIOS_examples/power_setting.png      |  Bin 0 -> 11219 bytes
 closed/Intel/code/README.md                   |  115 +-
 .../Intel/code/bert-99/pytorch-cpu/README.md  |   28 +-
 .../bert-99/pytorch-cpu/docker/Dockerfile     |    7 +-
 .../docker/build_bert-99_container.sh         |    2 +-
 closed/Intel/code/bert-99/pytorch-cpu/run.sh  |   17 +-
 .../code/bert-99/pytorch-cpu/run_server.sh    |   46 +-
 .../bert-99/pytorch-cpu/user_default.conf     |    4 +
 .../code/dlrm-99.9/pytorch-cpu/README.md      |   20 +-
 .../dlrm-99.9/pytorch-cpu/docker/Dockerfile   |   11 +-
 .../docker/build_dlrm-99.9_container.sh       |    2 +-
 .../code/dlrm-99.9/pytorch-cpu/runcppsut      |   16 +-
 .../dlrm-99.9/pytorch-cpu/user_default.conf   |    4 +
 .../Intel/code/resnet50/pytorch-cpu/README.md |   31 +-
 .../resnet50/pytorch-cpu/docker/Dockerfile    |    6 +-
 .../docker/build_resnet50_container.sh        |    2 +-
 .../code/resnet50/pytorch-cpu/prepare_env.sh  |    5 +-
 .../code/resnet50/pytorch-cpu/run_offline.sh  |   20 +-
 .../pytorch-cpu/run_offline_accuracy.sh       |   21 +-
 .../code/resnet50/pytorch-cpu/run_server.sh   |   20 +-
 .../pytorch-cpu/run_server_accuracy.sh        |   24 +-
 .../pytorch-cpu/src/ckernels/README.md        |   74 ++
 .../src/ckernels/scripts/graph_configs.py     |   65 ++
 .../src/ckernels/scripts/make_mlp.py          |  211 ++++
 .../src/ckernels/scripts/make_rn50.py         |  364 ++++++
 .../src/ckernels/scripts/out.ldscript         |  231 ++++
 .../scripts/sc_graph_func_name_list.txt       |  406 +++++++
 .../pytorch-cpu/src/ckernels/scripts/utils.py |  356 ++++++
 .../src/ckernels/src/kernel_mlp/bwd128k.cpp   | 1010 +++++++++++++++++
 .../src/ckernels/src/kernel_mlp/bwd4k.cpp     | 1010 +++++++++++++++++
 .../ckernels/src/kernel_mlp/bwd_data128k.cpp  |    3 +
 .../ckernels/src/kernel_mlp/bwd_data4k.cpp    |    3 +
 .../src/ckernels/src/kernel_mlp/fwd128k.cpp   |  181 +++
 .../src/ckernels/src/kernel_mlp/fwd4k.cpp     |  181 +++
 .../ckernels/src/kernel_mlp/fwd_data128k.cpp  |    3 +
 .../ckernels/src/kernel_mlp/fwd_data4k.cpp    |    3 +
 .../src/kernel_mlp/kernel_includes.hpp        |   43 +
 .../src/ckernels/src/kernel_mlp/mlp.hpp       |   81 ++
 .../src/ckernels/src/kernel_mlp/pack.hpp      |  385 +++++++
 .../src/ckernels/src/kernel_mlp/reorder.cpp   |  193 ++++
 .../src/ckernels/src/kernel_mlp/reorder.hpp   |   38 +
 .../ckernels/src/kernel_mlp/reorder_data.cpp  |    3 +
 .../src/ckernels/src/kernel_mlp/shape.hpp     |  266 +++++
 .../src/ckernels/tests/mlpkerneltest.cpp      |  118 ++
 .../src/ckernels/tests/qinfo_data_check.cpp   |   59 +
 .../tests/test_rn50_backbone_bs256.cpp        |  324 ++++++
 .../ckernels/tests/test_rn50_backbone_bs4.cpp |  176 +++
 .../ckernels/tests/test_rn50_backbone_bs8.cpp |  323 ++++++
 .../ckernels/tests/test_rn50_backbone_bs9.cpp |  208 ++++
 .../pytorch-cpu/src/ckernels/tests/utils.hpp  |   71 ++
 .../resnet50/pytorch-cpu/user_default.conf    |    4 +
 .../code/retinanet/pytorch-cpu/README.md      |   43 +-
 .../retinanet/pytorch-cpu/docker/Dockerfile   |   13 +-
 .../docker/build_retinanet_container.sh       |    2 +-
 .../code/retinanet/pytorch-cpu/prepare_env.sh |    5 +-
 .../retinanet/pytorch-cpu/run_calibration.sh  |    2 +-
 .../code/retinanet/pytorch-cpu/run_offline.sh |   27 +-
 .../pytorch-cpu/run_offline_accuracy.sh       |   27 +-
 .../code/retinanet/pytorch-cpu/run_server.sh  |   25 +-
 .../pytorch-cpu/run_server_accuracy.sh        |   27 +-
 .../retinanet/pytorch-cpu/user_default.conf   |    4 +
 closed/Intel/code/rnnt/pytorch-cpu/README.md  |   27 +
 .../code/rnnt/pytorch-cpu/docker/Dockerfile   |    7 +-
 .../docker/build_rnnt-99_container.sh         |    2 +-
 .../Intel/code/rnnt/pytorch-cpu/launch_sut.sh |    9 +-
 closed/Intel/code/rnnt/pytorch-cpu/run.sh     |   26 +-
 .../code/rnnt/pytorch-cpu/user_default.conf   |    4 +
 closed/Intel/code/user_config.py              |   35 +
 .../3d-unet-99.9/Offline/README.md            |   10 +
 .../3d-unet-99/Offline/README.md              |   10 +
 .../bert-99/Offline/README.md                 |   15 +-
 .../bert-99/Server/README.md                  |   15 +-
 .../bert-99/bert-99/Offline/README.md         |   13 +-
 .../bert-99/bert-99/Server/README.md          |   13 +-
 .../resnet50/Offline/README.md                |   17 +-
 .../resnet50/Server/README.md                 |   17 +-
 .../rnnt/Offline/README.md                    |   10 +
 .../rnnt/Server/README.md                     |   10 +
 91 files changed, 7126 insertions(+), 176 deletions(-)
 create mode 100755 closed/Intel/code/3d-unet-99.9/pytorch-cpu/run.sh
 create mode 100644 closed/Intel/code/3d-unet-99.9/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/BIOS_examples/Balanced_DIMM.png
 create mode 100644 closed/Intel/code/BIOS_examples/CPU_setting.png
 create mode 100644 closed/Intel/code/BIOS_examples/Intel_p_state.png
 create mode 100644 closed/Intel/code/BIOS_examples/Unbalanced_DIMM.png
 create mode 100644 closed/Intel/code/BIOS_examples/mem_bandwidth.png
 create mode 100644 closed/Intel/code/BIOS_examples/power_setting.png
 create mode 100644 closed/Intel/code/bert-99/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/dlrm-99.9/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/README.md
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/graph_configs.py
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_mlp.py
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_rn50.py
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/out.ldscript
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/sc_graph_func_name_list.txt
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/utils.py
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd128k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd4k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data128k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data4k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd128k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd4k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data128k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data4k.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/kernel_includes.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/mlp.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/pack.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder_data.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/shape.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/mlpkerneltest.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/qinfo_data_check.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs256.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs4.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs8.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs9.cpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/utils.hpp
 create mode 100644 closed/Intel/code/resnet50/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/retinanet/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/rnnt/pytorch-cpu/user_default.conf
 create mode 100644 closed/Intel/code/user_config.py

diff --git a/closed/Intel/calibration/bert-99/pytorch-cpu/README.md b/closed/Intel/calibration/bert-99/pytorch-cpu/README.md
index 8fdbee23d..084d57b01 100644
--- a/closed/Intel/calibration/bert-99/pytorch-cpu/README.md
+++ b/closed/Intel/calibration/bert-99/pytorch-cpu/README.md
@@ -47,9 +47,15 @@ cd <this_repo>/closed/Intel/code/bert-99/pytorch-cpu/
 ```
   cd docker
   bash build_bert-99_container.sh
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
diff --git a/closed/Intel/calibration/rnnt/pytorch-cpu/README.md b/closed/Intel/calibration/rnnt/pytorch-cpu/README.md
index 010c72781..b7ede2bc3 100644
--- a/closed/Intel/calibration/rnnt/pytorch-cpu/README.md
+++ b/closed/Intel/calibration/rnnt/pytorch-cpu/README.md
@@ -45,3 +45,13 @@ You can also use the following command to start with your custom conda-env/work-
   cd /opt/workdir/code/rnnt/pytorch-cpu
   SKIP_BUILD=1 STAGE=0 bash run.sh
 ```
+
+### Option 3: Pull docker image
+```
+  <TBD: command to pull docker>
+  docker run --name intel_rnnt --privileged -itd -v /data/mlperf_data:/data/mlperf_data --net=host --ipc=host mlperf_inference_rnnt:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/rnnt/pytorch-cpu
+  SKIP_BUILD=1 STAGE=0 bash run.sh
+```
diff --git a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/README.md b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/README.md
index 36c4c4508..0a36b95ad 100644
--- a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/README.md
+++ b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/README.md
@@ -54,8 +54,31 @@
   bash process_data_model.sh
   
 ``` 
+#### 3.c Option 3: pull docker  
+```
+  <TBD: command to pull docker>
+  docker run --name intel_3dunet --privileged -itd -v ~/mlperf_data:/root/mlperf_data --net=host --ipc=host mlperf_inference_3dunet:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/3d-unet-99.9/pytorch-cpu
+  bash process_data_model.sh
+  
+```
 ### 4. Run command for accuracy and performance
 ```
-  bash run_SPR56C_2S.sh acc
-  bash run_SPR56C_2S.sh perf
+  bash run.sh acc
+  bash run.sh perf
 ```
+
+### 5. Get the Results
+
+* Check log file. Performance results are in ``./output/mlperf_log_summary.txt``.
+  Verify that you see ``results is: valid``.
+
+* For offline mode performance, check the field ``Samples per second:``
+* Accuracy results are in ``./output/accuracy.txt``.  Check the field ``mean =``.
+
+Save these output log files elsewhere when each test is completed as
+they will be overwritten by the next test.
+
+
diff --git a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/Dockerfile
index 4666d9653..7f0ddad8a 100644
--- a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/Dockerfile
@@ -36,8 +36,9 @@ RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Mini
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda install -y python=${PYTHON_VERSION} && \
-    /opt/conda/bin/conda install -y intel-openmp mkl mkl-include mkl-service mkl_fft mkl_random --no-update-deps && \
-    /opt/conda/bin/conda install -y -c conda-forge cmake jemalloc gperftools wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
+    /opt/conda/bin/conda install -y intel-openmp==2023.1.0 mkl==2023.1.0 mkl-include==2023.1.0 mkl-service==2.4.0 mkl_fft==1.3.6 mkl_random==1.2.2 --no-update-deps && \
+    /opt/conda/bin/conda install -y -c conda-forge cmake==3.26.4 jemalloc==5.2.1 gperftools==2.9.1 wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
+    /opt/conda/bin/conda install -y numpy==1.23.5 && \
     /opt/conda/bin/conda clean -ya
 
 FROM dev-base AS build
@@ -59,6 +60,8 @@ FROM dev-base as mp
 COPY --from=build /opt/conda /opt/conda
 WORKDIR /opt/workdir
 COPY ./code/3d-unet-99.9 code/3d-unet-99.9
+COPY ./code/run_clean.sh code/run_clean.sh
+COPY ./code/user_config.py code/user_config.py
 COPY ./calibration/3d-unet-99.9 calibration/3d-unet-99.9
 RUN source /opt/rh/gcc-toolset-11/enable && \
     git clone --recurse-submodules https://github.com/mlcommons/inference.git && \
diff --git a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/build_3dunet_container.sh b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/build_3dunet_container.sh
index 73d64303c..51c66c36d 100644
--- a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/build_3dunet_container.sh
+++ b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/docker/build_3dunet_container.sh
@@ -13,6 +13,6 @@ export IMAGE_NAME=mlperf_inference_3dunet:${VERSION}
 
 echo "Building 3d-unet-99.9 workflow container"
 
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../../..
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../../..
 
 # docker push ${IMAGE_NAME}
diff --git a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/run.sh b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/run.sh
new file mode 100755
index 000000000..83d49277f
--- /dev/null
+++ b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/run.sh
@@ -0,0 +1,21 @@
+CPUS_PER_INSTANCE=4
+THREADS_PER_INSTANCE=8
+
+export DNNL_MAX_CPU_ISA=AVX512_CORE_AMX
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+echo $number_threads
+number_instance=$((number_threads/THREADS_PER_INSTANCE))
+echo $number_instance
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+
+python ../../user_config.py
+USER_CONF=user.conf
+
+bash run_mlperf.sh --type=$1 \
+	           --precision=int8 \
+		   --user-conf=${USER_CONF} \
+		   --num-instance=$number_instance \
+		   --cpus-per-instance=$CPUS_PER_INSTANCE \
+                   --scenario=Offline
diff --git a/closed/Intel/code/3d-unet-99.9/pytorch-cpu/user_default.conf b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..5c3629d74
--- /dev/null
+++ b/closed/Intel/code/3d-unet-99.9/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+*.Offline.target_qps = 0.9
+
diff --git a/closed/Intel/code/3d-unet-99/pytorch-cpu/README.md b/closed/Intel/code/3d-unet-99/pytorch-cpu/README.md
index 36c4c4508..4573f435e 100644
--- a/closed/Intel/code/3d-unet-99/pytorch-cpu/README.md
+++ b/closed/Intel/code/3d-unet-99/pytorch-cpu/README.md
@@ -54,6 +54,16 @@
   bash process_data_model.sh
   
 ``` 
+#### 3.b Option 3: pull docker  
+```
+  <TBD: command to pull docker>
+  docker run --name intel_3dunet --privileged -itd -v ~/mlperf_data:/root/mlperf_data --net=host --ipc=host mlperf_inference_3dunet:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/3d-unet-99.9/pytorch-cpu
+  bash process_data_model.sh
+  
+```
 ### 4. Run command for accuracy and performance
 ```
   bash run_SPR56C_2S.sh acc
diff --git a/closed/Intel/code/BIOS_examples/Balanced_DIMM.png b/closed/Intel/code/BIOS_examples/Balanced_DIMM.png
new file mode 100644
index 0000000000000000000000000000000000000000..b326b95fe57354e9183d463f5c7f05a8c8eddfc2
GIT binary patch
literal 85562
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
Kqgc%<=<fhB%?=>|

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/BIOS_examples/CPU_setting.png b/closed/Intel/code/BIOS_examples/CPU_setting.png
new file mode 100644
index 0000000000000000000000000000000000000000..f2f54d609a97ac73e391e137bf3645ca051bed81
GIT binary patch
literal 34117
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
LrHFd`;`RRl7;VaC

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/BIOS_examples/Intel_p_state.png b/closed/Intel/code/BIOS_examples/Intel_p_state.png
new file mode 100644
index 0000000000000000000000000000000000000000..80cafddafaa3c3e2beb6bf22d8d8fc5d11b184d5
GIT binary patch
literal 11133
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

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/BIOS_examples/Unbalanced_DIMM.png b/closed/Intel/code/BIOS_examples/Unbalanced_DIMM.png
new file mode 100644
index 0000000000000000000000000000000000000000..5c3c4a7b3aa47ad937733454d4d1b95c75d1fc00
GIT binary patch
literal 89164
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
aI~Y38)}ODhW&EE$UNRDj;x(d1f&T-)NS)~b

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/BIOS_examples/mem_bandwidth.png b/closed/Intel/code/BIOS_examples/mem_bandwidth.png
new file mode 100644
index 0000000000000000000000000000000000000000..bf1b776b5842c4342c8baf24c6da719f77fe7632
GIT binary patch
literal 6586
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
LSyKtEXd3ii>uq6k

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/BIOS_examples/power_setting.png b/closed/Intel/code/BIOS_examples/power_setting.png
new file mode 100644
index 0000000000000000000000000000000000000000..b043c89ff60278ac71b2a8a68fbd9dc6363dec7a
GIT binary patch
literal 11219
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
Mgu>Tqaij153sz@}r2qf`

literal 0
HcmV?d00001

diff --git a/closed/Intel/code/README.md b/closed/Intel/code/README.md
index 2d52f7bf8..6ba8e3632 100644
--- a/closed/Intel/code/README.md
+++ b/closed/Intel/code/README.md
@@ -14,17 +14,7 @@ optimized Docker images.
 ## Intel Docker Images for MLPerf
 
 The Intel optimized Docker images for MLPerf v3.0 can be built using the
-Dockerfiles. If available, the Docker images can also be pulled from Dockerhub using a ```docker pull image_name``` command and specifying the corresponding model's
-image name, as shown in the following table:
-
-|  Model  | Intel optimized Docker image Dockerfile location            |
-| --------------- | ------------------------------------ |
-| 3dunet          | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-3dunet                     |
-| bert            | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-bert                                  |
-| dlrm            | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-dlrm      |
-| resnet50        | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50                    |
-| retinanet       | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-retinanet |
-| rnnt       | docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-rnnt |
+Dockerfiles. 
 
 Example for building docker image with Dockerfile:
 ```
@@ -43,12 +33,66 @@ bash build_resnet50_contanier.sh
 | Memory          | 1024GB (16x64GB 4800MT/s [4800MT/s]) |
 | Disk            | 1TB NVMe                             |
 
-Best Known Configurations:
+## Recommmended BIOS Knobs:
+
+| BIOS Knobs     | Recommended Value                 |
+| --------------- | ------------------------------------ |
+| Hyperthreading  | Enabled                              |
+| Turbo Boost|  Enabled                                |
+| Core Prefetchers         |      Hardware,Adjacent Cache,DCU Streamer,DCU IP                              |
+| LLC Prefetch    |    Disable                            |
+| CPU Power and Perf Policy | Performance |
+| NUMA-based Cluster | Disabled |
+| Energy Perf Bias | Performance |
+| Energy Efficient Turbo | Disabled |
+
+Please also refer to [Eagle Stream Platform Performance & Power Optimization Guide](https://cdrdv2.intel.com/v1/dl/getContent/733546?explicitVersion=true) for more details.
+
+## Check System Health Using Intel® System Health Inspector:
+Intel® System Health Inspector (aka svr-info) is a Linux OS utility for assessing the state and health of Intel Xeon computers. It is suggested to use svr-info first to check any system configuration issue before running any benchmark. Follow [the Quick Start Guide](https://github.com/intel/svr-info#quick-start) for downloading and installation. The following are several key factors effecting the model performance.
+
+<details>
+<summary> CPU </summary>
+Couple CPU features impact MLPerf performance via related BIOS knobs, so please double check the CPU features with your BIOS knobs.
+Some important CPU features are Hyperthreading, number of NUMA nodes, Prefetchers and Intel Turbo Boost.
+<br><img src="BIOS_examples/CPU_setting.png" width="300" height="600"><br>
+</details>
+
+<details>
+<summary> Memory </summary>
+One important system configuration is balanced DIMM population, which is suggested to set as balanced to get optimized performance. <br> 
+Populate as many channels per socket as possible prior to adding additional DIMMs to the channel.   
+It might impact the memory bandwidth if two dimm share one channel. <br>   
+Please also refer to Chapter 4 in <a href="https://cdrdv2.intel.com/v1/dl/getContent/733546?explicitVersion=true">Eagle Stream Platform Performance & Power Optimization Guide</a> for more details.  <br> 
+     
+From the results of svr-info, an example of unbalanced DIMM population is shown as follows,
+<br><img src="BIOS_examples/Unbalanced_DIMM.png" width="300" height="600"><br>
+
+An exmaple of Balanced DIMM population is shown as follows,     
+<br><img src="BIOS_examples/Balanced_DIMM.png" width="300" height="600"><br>
+
+You should also see good numbers for memory NUMA bandwidth if you also benchmark memory via svr-info. <br>
+Here are some reference numbers from a 2S SPR system.
+<br><img src="BIOS_examples/mem_bandwidth.png" width="200" height="150"><br>     
+     
+</details>
+
+<details>
+<summary> Power  </summary>
+We recommend the intel_pstate Frequency Driver. <br>
+For best performance, set the Frequency Governor and Power and Perf Policy to performance. <br>
+Here are related recommended power settings from svr-info. 
+<br><img src="BIOS_examples/power_setting.png" width="400" height="300"><br>
+</details>
+
+
+## Best Known Configurations:
 
 ```
 sudo bash run_clean.sh
 ```
 
+## Running models:
 In the following sections, we'll show you how to set up and run each of the six models:
 
 * [3DUNET](#get-started-with-3dunet)
@@ -109,6 +153,7 @@ export https_proxy="your host proxy"
 
 Preprocess the data and download the model using the provided script:
 ```
+pip install numpy==1.23.5
 cd code/3d-unet-99.9/pytorch-cpu/
 bash process_data_model.sh 
 ```
@@ -117,8 +162,8 @@ bash process_data_model.sh
 
 ```
 # 3dunet only has offline mode
-bash run_SPR56C_2S.sh perf # offline performance
-bash run_SPR56_2S.sh acc  # offline accuracy
+bash run.sh perf # offline performance
+bash run.sh acc  # offline accuracy
 ```
 
 ### Get the Results
@@ -128,6 +173,7 @@ bash run_SPR56_2S.sh acc  # offline accuracy
 
 * For offline mode performance, check the field ``Samples per second:``
 * Accuracy results are in ``./output/accuracy.txt``.  Check the field ``mean =``.
+* The performance result is controled by the value of "target_qps" in user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
 
 Save these output log files elsewhere when each test is completed as
 they will be overwritten by the next test.
@@ -209,7 +255,7 @@ Check the performance log file ``./test_log/mlperf_log_summary.txt``:
 * Verify you see ``results is: valid``.
 * For offline mode performance, check the field ``Samples per second:``
 * For server mode performance, check the field ``Scheduled samples per second:``
-
+* The performance results are controled by the value of "target_qps" in user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
 
 Check the accuracy log file ``./test_log/accuracy.txt``.
 
@@ -223,8 +269,12 @@ Save these output log files elsewhere when each test is completed as they will b
 ## Get started with DLRM
 If you haven't already done so, build the Intel optimized Docker image for DLRM using:
 ```
+# Please get compiler first.
+cd frameworks.ai.benchmarking.mlperf.develop.inference-datacenter/closed/Intel/code/dlrm-99.9
+wget https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191.sh
+
+# Build docker image
 cd frameworks.ai.benchmarking.mlperf.develop.inference-datacenter/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker
-# Please firstly refer to the prerequisite file in the current directory to download the compiler before building the Docker image. 
 bash build_dlrm-99.9_container.sh
 ```
 
@@ -312,6 +362,7 @@ Check the appropriate offline or server performance log file, either
 * Verify you see ``results is: valid``.
 * For offline mode performance, check the field ``Samples per second:``
 * For server mode performance, check the field ``Scheduled samples per second:``
+* The performance result is controled by the value of "target_qps" in user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
 
 Check the appropriate offline or server accuracy log file, either
 ``./output/AccuracyOnly/Offline/accuracy.txt`` or
@@ -353,6 +404,7 @@ export https_proxy="your host proxy"
 
 Prepare calibration 500 images into folders
 ```
+cd /opt/workdir/code/resnet50/pytorch-cpu
 bash prepare_calibration_dataset.sh
 ```
 
@@ -415,7 +467,9 @@ Check the ``./mlperf_log_summary.txt`` log file:
 * Verify you see ``results is: valid``.
 * For offline mode performance, check the field ``Samples per second:``
 * For server mode performance, check the field ``Scheduled samples per second:``
-
+* The performance result is controled by the value of "target_qps" in ./src/user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
+     
+     
 Check the ``./offline_accuracy.txt`` or ``./server_accuracy.txt`` log file:
 
 * Check the field ``accuracy``
@@ -456,6 +510,7 @@ bash openimages_calibration_mlperf.sh --dataset-path ${WORKLOAD_DATA}/openimages
 ```
 Calibration dataset downloaded to `${WORKLOAD_DATA}/openimages-calibration`
 
+Note: If you meet any obstacles on downloading the dataset, please try again in the docker container to be launched after [Build & Run Docker container from Dockerfile](Build & Run Docker container from Dockerfile).
 
 ### Download Model
 ```
@@ -470,7 +525,7 @@ cd frameworks.ai.benchmarking.mlperf.develop.inference-datacenter/closed/Intel/c
 
 bash build_retinanet_contanier.sh
 
-docker run --name intel_retinanet --privileged -itd --net=host --ipc=host -v ${WORKLOAD_DATA}:/opt/workdir/code/retinanet/pytorch-cpu/data <resnet docker image ID> 
+docker run --name intel_retinanet --privileged -itd --net=host --ipc=host -v ${WORKLOAD_DATA}:/opt/workdir/code/retinanet/pytorch-cpu/data <retinanet docker image ID> 
 
 docker exec -it intel_retinanet bash 
 
@@ -479,6 +534,12 @@ cd code/retinanet/pytorch-cpu/
 
 ### Calibrate and generate torchscript model
 
+If you need a proxy to access the internet, replace your host proxy with the proxy server for your environment. If no proxy is needed, you can skip this step:
+```
+export http_proxy="your host proxy"
+export https_proxy="your host proxy"
+```
+
 Run Calibration
 ```
 CUR_DIR=$(pwd)
@@ -486,15 +547,17 @@ export WORKLOAD_DATA=${CUR_DIR}/data
 export CALIBRATION_DATA_DIR=${WORKLOAD_DATA}/openimages-calibration/train/data
 export MODEL_CHECKPOINT=${WORKLOAD_DATA}/retinanet-model.pth
 export CALIBRATION_ANNOTATIONS=${WORKLOAD_DATA}/openimages-calibration/annotations/openimages-mlperf-calibration.json
+
+cd /opt/workdir/code/retinanet/pytorch-cpu/retinanet-env/vision
+git checkout 8e078971b8aebdeb1746fea58851e3754f103053
+python setup.py install && python setup.py develop
+
+cd /opt/workdir/code/retinanet/pytorch-cpu
 bash run_calibration.sh
 ```
 
 ### Set Up Environment
-If you need a proxy to access the internet, replace your host proxy with the proxy server for your environment. If no proxy is needed, you can skip this step:
-```
-export http_proxy="your host proxy"
-export https_proxy="your host proxy"
-```
+
 Export the environment settings
 ```
 source setup_env.sh
@@ -528,7 +591,8 @@ Check the ``./mlperf_log_summary.txt`` log file:
 * Verify you see ``results is: valid``.
 * For offline mode performance, check the field ``Samples per second:``
 * For server mode performance, check the field ``Scheduled samples per second:``
-
+* The performance result is controled by the value of "target_qps" in user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
+     
 Check the ``./accuracy.txt`` log file:
 
 * Check the field ``mAP``
@@ -605,7 +669,8 @@ Check the appropriate offline or server performance log files, either
 * Verify you see ``results is: valid``.
 * For offline mode performance, check the field ``Samples per second:``
 * For server mode performance, check the field ``Scheduled samples per second:``
-
+* The performance result is controled by the value of "target_qps" in ./configs/user_<number of sockets>_socket.conf file. The scripts will automatically select user_<number of sockets>_socket.conf file according to the number of sockets on customer's platform. Customers can also manully change the value of "target_qps" in corresponding user_<number of sockets>_socket.conf files.
+     
 Check the appropriate offline or server accuracy log file, either
 ``./logs/Server/accuracy/.../mlperf_log_summary.txt`` or
 ``./logs/Offline/accuracy/.../mlperf_log_summary.txt``:
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/README.md b/closed/Intel/code/bert-99/pytorch-cpu/README.md
index 6167b60a8..779236132 100644
--- a/closed/Intel/code/bert-99/pytorch-cpu/README.md
+++ b/closed/Intel/code/bert-99/pytorch-cpu/README.md
@@ -85,10 +85,15 @@ For ICX above, subsitute: -mavx512cd -mavx512dq -mavx512bw -mavx512vl to -march=
 ```
   cd docker
   bash build_bert-99_container.sh
-
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
@@ -100,6 +105,21 @@ bash convert.sh
 ## Run command
 follow the steps above
 
+### Get the Results
+
+Check the performance log file ``./test_log/mlperf_log_summary.txt``:
+
+* Verify you see ``results is: valid``.
+* For offline mode performance, check the field ``Samples per second:``
+* For server mode performance, check the field ``Scheduled samples per second:``
+
+
+Check the accuracy log file ``./test_log/accuracy.txt``.
+
+* Check the field ``f1``
+
+
+Save these output log files elsewhere when each test is completed as they will be overwritten by the next test.
 
 
 
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/bert-99/pytorch-cpu/docker/Dockerfile
index 4480ac1e1..11f825cb5 100644
--- a/closed/Intel/code/bert-99/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/bert-99/pytorch-cpu/docker/Dockerfile
@@ -38,9 +38,9 @@ RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Mini
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
-    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} ninja cmake && \
-    /opt/conda/bin/conda install -c conda-forge llvm-openmp jemalloc wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
-    /opt/conda/bin/conda install -c intel mkl mkl-include intel-openmp && \
+    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} ninja==1.10.2 cmake==3.22.1 && \
+    /opt/conda/bin/conda install -c conda-forge llvm-openmp==12.0.1 jemalloc==5.2.1 wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
+    /opt/conda/bin/conda install -c intel mkl==2023.1.0 mkl-include==2023.1.0 intel-openmp==2023.1.0 && \
     /opt/conda/bin/conda clean -ya
 
 ARG LLVM_VERSION=llvmorg-15.0.7
@@ -80,6 +80,7 @@ ARG ONEDNN_VERSION=v2.6
 WORKDIR /opt/workdir
 COPY ./code/bert-99 code/bert-99
 COPY ./code/run_clean.sh code/run_clean.sh
+COPY ./code/user_config.py code/user_config.py
 ENV CONDA_PREFIX "/opt/conda"
 RUN cd code/bert-99/pytorch-cpu/ && \
     if [ -d "inference" ];then rm -rf inference ;fi && \
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/docker/build_bert-99_container.sh b/closed/Intel/code/bert-99/pytorch-cpu/docker/build_bert-99_container.sh
index e8b9a4e79..86498a0b7 100644
--- a/closed/Intel/code/bert-99/pytorch-cpu/docker/build_bert-99_container.sh
+++ b/closed/Intel/code/bert-99/pytorch-cpu/docker/build_bert-99_container.sh
@@ -12,7 +12,7 @@ export IMAGE_NAME=mlperf_inference_bert:${VERSION}
 
 
 echo "Building BERT-99 workflow container"
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../../../
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../../../
 
 
 #docker run --rm -it ${IMAGE_NAME} python -c "import torch; print('torch:', torch.__version__)"
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/run.sh b/closed/Intel/code/bert-99/pytorch-cpu/run.sh
index 2bbff7521..45466bb5b 100644
--- a/closed/Intel/code/bert-99/pytorch-cpu/run.sh
+++ b/closed/Intel/code/bert-99/pytorch-cpu/run.sh
@@ -1,16 +1,31 @@
 set -x
+
+THREADS_PER_INSTANCE=8
+
 export LD_PRELOAD=${CONDA_PREFIX}/lib/libjemalloc.so
 export MALLOC_CONF="oversize_threshold:1,background_thread:true,percpu_arena:percpu,metadata_thp:always,dirty_decay_ms:9000000000,muzzy_decay_ms:9000000000";
 
 accuracy=$1
 
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+echo $number_threads
+number_instance=$((number_threads/THREADS_PER_INSTANCE))
+echo $number_instance
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+
 sut_dir=$(pwd)
 executable=${sut_dir}/build/bert_inference
 mode="Offline"
 OUTDIR="$sut_dir/test_log"
 find ${sut_dir} -maxdepth 1 -name "test_log" | xargs rm -rf
 mkdir ${OUTDIR}
-CONFIG="-n 28 -j 4 --test_scenario=${mode} --model_file=${sut_dir}/bert.pt --sample_file=${sut_dir}/squad.pt --mlperf_config=${sut_dir}/inference/mlperf.conf --user_config=${sut_dir}/user.conf -o ${OUTDIR} -w 1300 ${accuracy}"
+
+python ../../user_config.py
+USER_CONF=user.conf
+
+CONFIG="-n $number_instance -j 4 --test_scenario=${mode} --model_file=${sut_dir}/bert.pt --sample_file=${sut_dir}/squad.pt --mlperf_config=${sut_dir}/inference/mlperf.conf --user_config=${USER_CONF} -o ${OUTDIR} -w 1300 ${accuracy}"
+
 
 ${executable} ${CONFIG}
 
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/run_server.sh b/closed/Intel/code/bert-99/pytorch-cpu/run_server.sh
index 414a25ece..3e2b11ae0 100644
--- a/closed/Intel/code/bert-99/pytorch-cpu/run_server.sh
+++ b/closed/Intel/code/bert-99/pytorch-cpu/run_server.sh
@@ -1,32 +1,48 @@
 set -x
+
+THREADS_PER_INSTANCE=16
+
 export LD_PRELOAD=${CONDA_PREFIX}/lib/libjemalloc.so
 export MALLOC_CONF="oversize_threshold:1,background_thread:true,percpu_arena:percpu,metadata_thp:always,dirty_decay_ms:9000000000,muzzy_decay_ms:9000000000";
 
 accuracy=$1
 
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+echo $number_threads
+number_instance=$((number_threads/THREADS_PER_INSTANCE))
+echo $number_instance
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+
 sut_dir=$(pwd)
 executable=${sut_dir}/build/bert_inference
 mode="Server"
 OUTDIR="$sut_dir/test_log"
 find ${sut_dir} -maxdepth 1 -name "test_log" | xargs rm -rf
 mkdir ${OUTDIR}
-CONFIG="-n 14 -j 8 --test_scenario=${mode} --model_file=${sut_dir}/bert.pt --sample_file=${sut_dir}/squad.pt --mlperf_config=${sut_dir}/inference/mlperf.conf --user_config=${sut_dir}/user.conf -o ${OUTDIR} --warmup -w 1300 -u 1560 ${accuracy}"
+
+python ../../user_config.py
+USER_CONF=user.conf
+
+CONFIG="-n $number_instance -j 8 --test_scenario=${mode} --model_file=${sut_dir}/bert.pt --sample_file=${sut_dir}/squad.pt --mlperf_config=${sut_dir}/inference/mlperf.conf --user_config=${USER_CONF} -o ${OUTDIR} -w 1300 ${accuracy}"
+
 
 ${executable} ${CONFIG}
 
-if [ ${accuracy} = "--accuracy" ]; then
-	if [ ! -d "${DATA_PATH}" ]; then
-		echo "please export the data path first!"
-		exit 1
-	fi
-
-	vocab_file=`find ${DATA_PATH} -name vocab.txt` #path/to/vocab.txt
-	val_data=`find ${DATA_PATH} -name dev-v1.1.json` #path/to/dev-v1.1.json
-	python ./inference/language/bert/accuracy-squad.py \
-		--vocab_file $vocab_file \
-		--val_data $val_data \
-		--log_file ./test_log/mlperf_log_accuracy.json \
-		--out_file predictions.json \
-		2>&1 | tee ./test_log/accuracy.txt
+if [ ${accuracy} = "--accuracy"  ]; then
+  if [ ! -d "${DATA_PATH}" ]; then
+          echo "please export the data path first!"
+          exit 1
+  fi
+
+  vocab_file=`find ${DATA_PATH} -name vocab.txt` #path/to/vocab.txt
+  val_data=`find ${DATA_PATH} -name dev-v1.1.json` #path/to/dev-v1.1.json
+  python ./inference/language/bert/accuracy-squad.py \
+	  --vocab_file $vocab_file \
+	  --val_data $val_data \
+	  --log_file ./test_log/mlperf_log_accuracy.json \
+	  --out_file predictions.json \
+	  2>&1 | tee ./test_log/accuracy.txt
 fi
+
 set +x
diff --git a/closed/Intel/code/bert-99/pytorch-cpu/user_default.conf b/closed/Intel/code/bert-99/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..4a9344551
--- /dev/null
+++ b/closed/Intel/code/bert-99/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+bert.Offline.target_qps = 700.0
+bert.Server.target_qps = 552.5
diff --git a/closed/Intel/code/dlrm-99.9/pytorch-cpu/README.md b/closed/Intel/code/dlrm-99.9/pytorch-cpu/README.md
index 58a95424b..41abdeda7 100644
--- a/closed/Intel/code/dlrm-99.9/pytorch-cpu/README.md
+++ b/closed/Intel/code/dlrm-99.9/pytorch-cpu/README.md
@@ -126,7 +126,7 @@ ln -s <path/to/this/repo>/closed/Intel/code/dlrm-99.9/pytorch-cpu pytorch-cpu
 wget https://registrationcenter-download.intel.com/akdlm/irc_nas/18679/l_HPCKit_p_2022.2.0.191.sh
 mv l_HPCKit_p_2022.2.0.191.sh <path/to/this/repo>/closed/Intel/code/dlrm-99.9
 # run build docker script
-cd <path/to/this/repo>/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker
+cd pytorch-cpu/docker
 bash build_dlrm-99.9_container.sh
 
 # activate container
@@ -152,4 +152,22 @@ bash runcppsut performance server		# server mode
 bash runcppsut accuracy	# offline mode
 bash runcppsut accuracy server
 ```
+### Get the Results
 
+Check the appropriate offline or server performance log file, either
+``./output/PerformanceOnly/Offline/mlperf_log_summary.txt`` or
+``./output/PerformanceOnly/Server/mlperf_log_summary.txt``:
+
+* Verify you see ``results is: valid``.
+* For offline mode performance, check the field ``Samples per second:``
+* For server mode performance, check the field ``Scheduled samples per second:``
+
+Check the appropriate offline or server accuracy log file, either
+``./output/AccuracyOnly/Offline/accuracy.txt`` or
+``./output/AccuracyOnly/Server/accuracy.txt``:
+
+* Check the field ``AUC``
+
+Save these output log files elsewhere when each test is completed as they will be overwritten by the next test.
+
+---
diff --git a/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/Dockerfile
index 7f1fc33d8..e22691984 100644
--- a/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/Dockerfile
@@ -31,14 +31,14 @@ ENV PATH /opt/conda/bin:$PATH
 
 FROM dev-base as conda
 ARG PYTHON_VERSION=3.9
-RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
+RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-py39_23.1.0-1-Linux-x86_64.sh  && \
 	chmod +x ~/miniconda.sh && \
 	~/miniconda.sh -b -p /opt/conda && \
 	rm ~/miniconda.sh && \
 	/opt/conda/bin/conda install -y python=${PYTHON_VERSION} && \
-	/opt/conda/bin/conda install -c conda-forge -y cmake libunwind gperftools wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
-	/opt/conda/bin/conda install -y intel-openmp mkl mkl-include numpy --no-update-deps && \
-	/opt/conda/bin/conda install -y glog && \
+	/opt/conda/bin/conda install -c conda-forge -y cmake==3.21.3 libunwind==1.6.2 gperftools==2.9.1 wheel==0.38.1 setuptools==65.5.1 future==0.18.3 --no-update-deps && \
+	/opt/conda/bin/conda install -y intel-openmp==2022.1.0 mkl==2020.2 mkl-include==2022.1.0 numpy==1.23.5 --no-update-deps && \
+	/opt/conda/bin/conda install -y glog==0.5.0 --no-update-deps && \
 	/opt/conda/bin/conda install -y pytorch=1.13.1 -c pytorch && \
 	/opt/conda/bin/conda clean -ya
 
@@ -47,12 +47,13 @@ COPY --from=conda /opt/conda /opt/conda
 COPY ./l_HPCKit_p_2022.2.0.191.sh l_HPCKit_p_2022.2.0.191.sh
 COPY ./oneDNN oneDNN
 COPY ./pytorch-cpu pytorch-cpu
+COPY ./code/user_config.py code/user_config.py
 ENV CONDA_PREFIX /opt/conda
 ENV WORKDIR /opt/workdir/code/dlrm
 RUN --mount=type=cache,target=/opt/ccache \
 	/bin/bash l_HPCKit_p_2022.2.0.191.sh -a -s --eula accept && \
 	mkdir -p /data/mlperf_data/dlrm && \
-	pip install absl-py tqdm numpy && \
+	pip install absl-py==1.4.0 tqdm==4.64.1 numpy==1.23.5 && \
 	pip install -e git+https://github.com/mlperf/logging@1.1.0-rc3#egg=mlperf-logging && \
 	source /opt/rh/gcc-toolset-11/enable && \
 	source /opt/intel/oneapi/compiler/2022.1.0/env/vars.sh && \
diff --git a/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/build_dlrm-99.9_container.sh b/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/build_dlrm-99.9_container.sh
index a31f41b9e..cebc7202b 100644
--- a/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/build_dlrm-99.9_container.sh
+++ b/closed/Intel/code/dlrm-99.9/pytorch-cpu/docker/build_dlrm-99.9_container.sh
@@ -14,7 +14,7 @@ git clone -b v2.7 https://github.com/oneapi-src/oneDNN.git ../../oneDNN
 
 echo "Building DLRM-99.9 workflow container"
 
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../
 
 #docker run --rm -it ${IMAGE_NAME} python -c "import torch; import intel_pytorch_extension as ipex; print('torch:', torch.__version__,' ipex:',ipex.__version__)"
 
diff --git a/closed/Intel/code/dlrm-99.9/pytorch-cpu/runcppsut b/closed/Intel/code/dlrm-99.9/pytorch-cpu/runcppsut
index cad1a42f6..8fb1093b4 100755
--- a/closed/Intel/code/dlrm-99.9/pytorch-cpu/runcppsut
+++ b/closed/Intel/code/dlrm-99.9/pytorch-cpu/runcppsut
@@ -25,6 +25,13 @@ if [ ! -d $OUTPUT_DIR ]; then
     mkdir -p $OUTPUT_DIR
 fi
 
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+
+python ../../user_config.py
+
 #valgrind --leak-check=full --show-leak-kinds=all \
 #gdb --args \
 src/build/dlrminf \
@@ -38,12 +45,11 @@ src/build/dlrminf \
     --logfile-prefix='mlperf_log_' \
     --logfile-suffix='' \
     --batch-size=${bs} \
-    --num-sockets=2 \ #    --model=dlrm \
-    --cores-per-socket=56 \
-    --num-producers=2 \
-    --consumers-per-producer=56 \
+    --num-sockets=$number_sockets \ #    --model=dlrm \
+    --cores-per-socket=$cpu_per_socket \
+    --num-producers=$number_sockets \
+    --consumers-per-producer=$cpu_per_socket \
     --start-consumer-core=${start_consumer_core} \
     --model-path=${MODEL_DIR}/dlrm_model.npz \
     --sample-partition-path=${DATA_DIR}/sample_partition.npy \
     --tensor-path=${DATA_DIR}/y_batch.npy,${DATA_DIR}/x_int_batch.npy,${DATA_DIR}/x_cat_batch.npy
-
diff --git a/closed/Intel/code/dlrm-99.9/pytorch-cpu/user_default.conf b/closed/Intel/code/dlrm-99.9/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..65c912c43
--- /dev/null
+++ b/closed/Intel/code/dlrm-99.9/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+dlrm.Server.target_qps = 62500.0
+dlrm.Offline.target_qps = 70000.0
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/README.md b/closed/Intel/code/resnet50/pytorch-cpu/README.md
index 21aab62b4..142afa7ee 100644
--- a/closed/Intel/code/resnet50/pytorch-cpu/README.md
+++ b/closed/Intel/code/resnet50/pytorch-cpu/README.md
@@ -66,17 +66,30 @@ Please follow the [instructions](#run-benchmark-common-for-docker--baremetal) in
 
 The docker container can be created either by building it using the Dockerfile or pulling the image from Dockerhub (if available). Please download the Imagenet dataset on the host system before starting the container.
 
-### Build & Run Docker container from Dockerfile
+### (a) Build & Run Docker container from Dockerfile
 ```
 cd docker/
 
 bash build_resnet50_contanier.sh
 
-docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -it --privileged <docker image ID> /bin/bash
+docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -itd --privileged <docker image ID> /bin/bash
 
 cd code/resnet50/pytorch-cpu
 ```
 
+### (b) Pull Docker Image from Dockerhub & Run container
+```
+[TBD]
+docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50
+
+docker run --name intel_resnet50 -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val --privileged -itd --net=host \
+  --ipc=host intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50:3.0
+  
+docker exec -it intel_resnet50 bash
+
+cd code/resnet50/pytorch-cpu
+
+```
 ### Prepare Calibration Dataset & Download Model ( Inside Container )
 
 If you need a proxy to access the internet, replace your host proxy with the proxy server for your environment. If no proxy is needed, you can skip this step:
@@ -140,3 +153,17 @@ bash run_offline_accuracy.sh <batch_size>
 bash run_server_accuracy.sh
 ```
 
+## Get the Results
+
+Check the ``./mlperf_log_summary.txt`` log file:
+
+* Verify you see ``results is: valid``.
+* For offline mode performance, check the field ``Samples per second:``
+* For server mode performance, check the field ``Scheduled samples per second:``
+
+Check the ``./offline_accuracy.txt`` or ``./server_accuracy.txt`` log file:
+
+* Check the field ``accuracy``
+
+Save these output log files elsewhere when each test is completed as they will be overwritten by the next test.
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/resnet50/pytorch-cpu/docker/Dockerfile
index 4eb5b9858..3f13d5812 100644
--- a/closed/Intel/code/resnet50/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/resnet50/pytorch-cpu/docker/Dockerfile
@@ -63,19 +63,19 @@ RUN --mount=type=cache,target=/opt/ccache \
     git submodule sync && git submodule update --init --recursive && \
     git fetch origin pull/89925/head && \
     git cherry-pick 78cad998e505b667d25ac42f8aaa24409f5031e1 && git config user.email "test@intel.com" && \
-    python setup.py install && cd ..
+    python setup.py install && \
+    pip install torchvision==0.13.0 --no-deps && cd ..
 
 FROM dev-base as mp-base
 COPY --from=build /opt/conda /opt/conda
 ENV CONDA_PREFIX "/opt/conda"
 WORKDIR /opt/workdir
 COPY ./code/resnet50 code/resnet50
+COPY ./code/user_config.py code/user_config.py
 COPY ./calibration/resnet50 calibration/resnet50
 ARG IPEX_VERSION=v1.12.0
 #ARG INFERENCE_COMMIT=8d83d61b5ba8308544aa5a76d311fef1e25d9584
 RUN source /opt/rh/gcc-toolset-11/enable && \
-    git clone https://github.com/pytorch/vision && \
-    cd vision && python setup.py install && cd .. && \
     cd code/resnet50/pytorch-cpu/ && mkdir rn50-mlperf && cd rn50-mlperf && \
     git clone https://github.com/intel/intel-extension-for-pytorch.git ipex-cpu-dev && \
     cd ipex-cpu-dev && git checkout ${IPEX_VERSION} && \
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/docker/build_resnet50_container.sh b/closed/Intel/code/resnet50/pytorch-cpu/docker/build_resnet50_container.sh
index 2572a6114..2858c6a8e 100644
--- a/closed/Intel/code/resnet50/pytorch-cpu/docker/build_resnet50_container.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/docker/build_resnet50_container.sh
@@ -17,7 +17,7 @@ export IMAGE_NAME=mlperf_inference_datacenter_resnet50:${VERSION}
 
 echo "Building resnet50 workflow container"
 
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../../../
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../../../
 
 #docker run --rm -it ${IMAGE_NAME} python -c "import torch; import intel_pytorch_extension as ipex; print('torch:', torch.__version__,' ipex:',ipex.__version__)"
 
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/prepare_env.sh b/closed/Intel/code/resnet50/pytorch-cpu/prepare_env.sh
index e7f905172..a4ddb82e4 100644
--- a/closed/Intel/code/resnet50/pytorch-cpu/prepare_env.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/prepare_env.sh
@@ -100,10 +100,7 @@ export LOADGEN_DIR=${PWD}
 cd ${WORKDIR}
 
 # Build torchvision
-echo "Installiing torch vision"
-git clone https://github.com/pytorch/vision
-cd vision
-python setup.py install
+python -m pip install torchvision==0.13.0 --no-deps
 cd ${WORKDIR}
 
 # Build OpenCV
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/run_offline.sh b/closed/Intel/code/resnet50/pytorch-cpu/run_offline.sh
index 2292f8354..a621189ae 100755
--- a/closed/Intel/code/resnet50/pytorch-cpu/run_offline.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/run_offline.sh
@@ -4,6 +4,13 @@ if [ -z $1 ]; then
   exit 0
 fi
 
+CPUS_PER_INSTANCE=1
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+
 export DATA_DIR=${PWD}/ILSVRC2012_img_val
 export RN50_START=${PWD}/models/resnet50-start-int8-model.pth
 export RN50_END=${PWD}/models/resnet50-end-int8-model.pth
@@ -61,22 +68,25 @@ fi
 
 # ONEDNN_JIT_PROFILE = 1
 
-numactl -C 0-55,56-111 -m 0,1 ${APP} --scenario Offline \
+python ../../user_config.py
+USER_CONF=user.conf
+
+$numactl ${APP} --scenario Offline \
 	--mode Performance \
 	--mlperf_conf ${CUR_DIR}/src/mlperf.conf \
-	--user_conf ${CUR_DIR}/src/user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name resnet50 \
     --rn50-part1 ${RN50_START} \
     --rn50-part3 ${RN50_END} \
     --rn50-full-model ${RN50_FULL} \
 	--data_path ${DATA_DIR} \
-	--num_instance 112 \
+	--num_instance $number_cores \
 	--warmup_iters 20 \
-	--cpus_per_instance 1 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 50000 \
     --batch_size $1
 
+
 if [ -e "mlperf_log_summary.txt" ]; then
     cat mlperf_log_summary.txt
 fi
-
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/run_offline_accuracy.sh b/closed/Intel/code/resnet50/pytorch-cpu/run_offline_accuracy.sh
index adf77d766..f52732302 100755
--- a/closed/Intel/code/resnet50/pytorch-cpu/run_offline_accuracy.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/run_offline_accuracy.sh
@@ -4,6 +4,8 @@ if [ -z $1 ]; then
   exit 0
 fi
 
+CPUS_PER_INSTANCE=1
+
 export BATCH_SIZE=$1
 echo "Testing BATCH SIZE is " $BATCH_SIZE
 if [ $1 = 8 ]; then
@@ -15,6 +17,12 @@ else
   exit 0
 fi
 
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+
+
 export DATA_DIR=${PWD}/ILSVRC2012_img_val
 export RN50_START=${PWD}/models/resnet50-start-int8-model.pth
 export RN50_END=${PWD}/models/resnet50-end-int8-model.pth
@@ -68,20 +76,24 @@ if [ -e mlperf_log_accuracy.json ]; then
     rm mlperf_log_accuracy.json
 fi
 
-numactl -C 0-55,56-111 -m 0,1 ${APP} --scenario Offline \
+python ../../user_config.py
+USER_CONF=user.conf
+
+numactl ${APP} --scenario Offline \
 	--mode Accuracy \
 	--mlperf_conf ${CUR_DIR}/src/mlperf.conf \
-	--user_conf ${CUR_DIR}/src/user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name resnet50 \
   --rn50-part1 ${RN50_START} \
   --rn50-part3 ${RN50_END} \
   --rn50-full-model ${RN50_FULL} \
 	--data_path ${DATA_DIR} \
-  --num_instance $NUM_INSTANCE \
+  --num_instance $number_cores \
   --warmup_iters 20 \
-  --cpus_per_instance 1 \
+  --cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 50000 \
   --batch_size $1
+ 
 
 echo " ==================================="
 echo "         Evaluating Accuracy        "
@@ -93,4 +105,3 @@ if [ -e mlperf_log_accuracy.json ]; then
         --imagenet-val-file ${DATA_DIR}/val_map.txt \
         --dtype int32 2>&1|tee offline_accuracy.txt
 fi
-
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/run_server.sh b/closed/Intel/code/resnet50/pytorch-cpu/run_server.sh
index a2582c9de..55fd12b01 100755
--- a/closed/Intel/code/resnet50/pytorch-cpu/run_server.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/run_server.sh
@@ -5,6 +5,14 @@ export RN50_START=${PWD}/models/resnet50-start-int8-model.pth
 export RN50_END=${PWD}/models/resnet50-end-int8-model.pth
 export RN50_FULL=${PWD}/models/resnet50-full.pth
 
+CPUS_PER_INSTANCE=2
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+num_instances=$((number_cores/CPUS_PER_INSTANCE))
+
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
     echo "export DATA_DIR=</path/to/openimages>"
@@ -52,21 +60,25 @@ if [ -e "mlperf_log_summary.txt" ]; then
     rm mlperf_log_summary.txt
 fi
 
-numactl -C 0-55,56-111 -m 0,1 ${APP} --scenario Server  \
+python ../../user_config.py
+USER_CONF=user.conf
+
+numactl ${APP} --scenario Server  \
 	--mode Performance  \
 	--mlperf_conf ${CUR_DIR}/src/mlperf.conf \
-	--user_conf ${CUR_DIR}/src/user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name resnet50 \
     --rn50-part1 ${RN50_START} \
     --rn50-part3 ${RN50_END} \
     --rn50-full-model ${RN50_FULL} \
 	--data_path ${DATA_DIR} \
-	--num_instance 56 \
+	--num_instance $num_instances \
 	--warmup_iters 50 \
-	--cpus_per_instance 2 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 50000 \
     --batch_size 4
 
+
 if [ -e "mlperf_log_summary.txt" ]; then
     cat mlperf_log_summary.txt
 fi
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/run_server_accuracy.sh b/closed/Intel/code/resnet50/pytorch-cpu/run_server_accuracy.sh
index 125cb7a54..7c0cadcff 100755
--- a/closed/Intel/code/resnet50/pytorch-cpu/run_server_accuracy.sh
+++ b/closed/Intel/code/resnet50/pytorch-cpu/run_server_accuracy.sh
@@ -5,6 +5,15 @@ export RN50_START=${PWD}/models/resnet50-start-int8-model.pth
 export RN50_END=${PWD}/models/resnet50-end-int8-model.pth
 export RN50_FULL=${PWD}/models/resnet50-full.pth
 
+CPUS_PER_INSTANCE=2
+BATCH_SIZE=4
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+num_instances=$((number_cores/CPUS_PER_INSTANCE))
+
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
     echo "export DATA_DIR=</path/to/openimages>"
@@ -52,20 +61,24 @@ if [ -e mlperf_log_accuracy.json ]; then
     rm mlperf_log_accuracy.json
 fi
 
-numactl -C 0-55,56-111 -m 0,1 ${APP} --scenario Server \
+
+python ../../user_config.py
+USER_CONF=user.conf
+
+numactl ${APP} --scenario Server \
     --mode Accuracy \
     --mlperf_conf ${CUR_DIR}/src/mlperf.conf \
-    --user_conf ${CUR_DIR}/src/user.conf \
+    --user_conf ${USER_CONF} \
     --model_name resnet50 \
     --rn50-part1 ${RN50_START} \
     --rn50-part3 ${RN50_END} \
     --rn50-full-model ${RN50_FULL} \
     --data_path ${DATA_DIR} \
-    --num_instance 56 \
+    --num_instance $num_instances \
     --warmup_iters 50 \
-    --cpus_per_instance 2 \
+    --cpus_per_instance $CPUS_PER_INSTANCE \
     --total_sample_count 50000 \
-    --batch_size 4
+    --batch_size $BATCH_SIZE
 
 echo " ==================================="
 echo "         Evaluating Accuracy        "
@@ -77,4 +90,3 @@ if [ -e mlperf_log_accuracy.json ]; then
         --imagenet-val-file ${DATA_DIR}/val_map.txt \
         --dtype int32 2>&1|tee server_accuracy.txt
 fi
-
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/README.md b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/README.md
new file mode 100644
index 000000000..ebb9cdf20
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/README.md
@@ -0,0 +1,74 @@
+# C++ kernel source code generated by Graph Compiler
+
+The repo includes the auto-generated MLP and RN50 backbone code by Graph
+Compiler, and the necessary runtime support code.
+
+Requirements:
+ * GCC 10.0+
+ * cmake
+ * SPR machine
+
+## Clone the repo
+
+```bash
+git clone https://github.com/intel-sandbox/graphcompiler-mlperf --recursive
+```
+
+## Standalone build
+
+```bash
+mkdir build
+cd build
+cmake ..
+make -j
+```
+
+The test code is now ready to run. You can run
+
+```bash
+./kerneltest
+```
+
+to check whether the build is sucessful.
+
+## Integrate the repo into other general cmake projects
+
+This section applys to using this repo in other general project via standard cmake build systems. In the cmake CMakeList of the project that uses graphcompiler-mlperf, please add:
+
+```cmake
+add_subdirectory(PATH/TO/graphcompiler-mlperf)
+include_directories(
+    PATH/TO/graphcompiler-mlperf/src
+)
+target_link_libraries(YOUR_BUILD_TARGET gc_mlp)
+```
+
+In the cpp code that uses the MLP code, please include:
+
+```c++
+#include <kernel/mlp.hpp>
+#include <kernel/shape.hpp>
+#include <kernel/pack.hpp>
+```
+
+To get the shape (blocking shape) of each parameter of MLP, please see `<kernel/shape.hpp>`.
+
+To pack/unpack each of the parameter tensors, please see `<kernel/pack.hpp>`.
+
+`<kernel/mlp.hpp>` exports the main function for MLP fwd and bwd.
+
+## Example
+
+Please check `tests/kerneltest.cpp`. It creates the buffers, packs the inputs and runs the kernel. And it also unpacks the results.
+
+## Build with existing oneDNN source code
+
+This git repo treats oneDNN as a 3rdparty git submodule. If your project has already had oneDNN included, you can specify the oneDNN source code to the repo, to avoid cloning oneDNN source multiple times. To do that, when calling cmake, please run:
+
+```
+cmake .. -DGC_DNNL_PATH=PATH/TO/oneDNN/SOURCE/ROOT
+```
+
+
+
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/graph_configs.py b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/graph_configs.py
new file mode 100644
index 000000000..7a5911c4e
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/graph_configs.py
@@ -0,0 +1,65 @@
+from typing import Iterable, Dict, List
+
+_rn50_multi_instance_bs8_raw_cfg = '64,64,1,1,28,-1,-1,5,64,64,1,28,8,-1,-1,2,32,64,1,-1,-1,28,-1,1,32,64,1,2,2,-1,-1,4,64,32,1,14,8,-1,-1,0,16,64,1,-1,-1,56,-1,3,32,64,1,2,8,-1,-1,4,64,32,1,8,2,-1,-1,4,16,64,1,-1,-1,28,-1,2,32,64,1,2,14,-1,-1,4,64,64,1,4,4,-1,1,2,64,64,1,8,56,-1,-1,1,128,64,1,-1,-1,797,-1,1,64,128,1,2,4,-1,-1,1,32,128,1,4,7,-1,-1,4,128,128,1,-1,-1,419,-1,1,128,64,1,1,28,-1,-1,1,64,32,1,14,14,-1,-1,2,32,64,1,-1,-1,419,-1,1,32,128,1,4,2,-1,-1,4,32,64,1,2,2,-1,-1,3,32,64,1,-1,-1,419,-1,2,64,64,1,2,4,-1,-1,4,32,64,1,14,14,-1,1,1,32,64,1,2,14,-1,-1,2,64,64,1,-1,-1,404,-1,2,32,256,1,2,1,-1,-1,4,256,64,1,2,1,-1,-1,1,32,64,1,-1,-1,222,-1,2,64,256,1,2,1,-1,-1,0,64,512,1,14,2,-1,-1,4,16,128,1,-1,-1,222,-1,3,512,256,1,2,2,-1,-1,3,64,64,1,14,1,-1,-1,2,16,64,1,-1,-1,222,-1,2,64,128,1,14,14,-1,-1,4,32,128,1,14,14,-1,-1,4,32,128,1,-1,-1,222,-1,0,128,64,1,1,7,-1,-1,2,128,256,1,2,2,-1,-1,5,128,128,1,-1,-1,222,-1,1,256,256,1,2,14,-1,-1,5,32,1024,1,7,7,-1,1,3,256,1024,1,7,7,-1,-1,2,64,256,1,7,7,-1,-1,1,32,64,1,7,7,-1,-1,3,64,64,1,7,7,-1,-1,3,128,64,1,-1,-1,61,-1,3,64,512,1,1,7,-1,-1,5,128,64,1,7,1,-1,-1,5,128,512,1,-1,-1,61,-1,3,64,256,1,7,1,-1,-1,1'
+_rn50_multi_instance_bs256_raw_cfg = '64,64,1,1,56,-1,-1,0,64,64,1,2,56,-1,-1,1,64,64,1,-1,-1,56,-1,0,64,64,1,1,56,-1,-1,1,64,64,1,1,56,-1,-1,0,64,64,1,-1,-1,56,-1,1,64,64,1,1,56,-1,-1,1,64,64,1,1,56,-1,-1,0,64,64,1,-1,-1,56,-1,0,64,64,1,1,56,-1,-1,0,64,64,1,2,28,-1,1,0,64,64,1,1,28,-1,-1,0,64,64,1,1,28,-1,-1,1,64,64,1,2,28,-1,-1,1,64,64,1,1,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,1,28,-1,-1,0,64,64,1,14,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,4,28,-1,-1,0,64,64,1,2,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,2,28,-1,-1,0,64,64,1,2,14,-1,1,1,64,64,1,2,28,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,1,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,1,64,64,1,2,14,-1,-1,1,512,64,1,7,7,-1,1,1,512,64,1,2,14,-1,-1,1,256,64,1,7,7,-1,-1,0,512,512,1,7,7,-1,-1,0,64,512,1,7,7,-1,-1,0,128,64,1,-1,-1,61,-1,0,512,512,1,7,7,-1,-1,1,256,512,1,7,7,-1,-1,0,64,512,1,-1,-1,61,-1,0,512,64,1,7,7,-1,-1,0'
+unified_raw_cfg = '64,64,1,1,56,-1,-1,0,64,64,1,2,56,-1,-1,1,64,64,1,-1,-1,56,-1,0,64,64,1,1,56,-1,-1,1,64,64,1,1,56,-1,-1,0,64,64,1,-1,-1,56,-1,1,64,64,1,1,56,-1,-1,1,64,64,1,1,56,-1,-1,0,64,64,1,-1,-1,56,-1,0,64,64,1,1,56,-1,-1,0,64,64,1,2,28,-1,1,0,64,64,1,1,28,-1,-1,0,64,64,1,1,28,-1,-1,1,64,64,1,2,28,-1,-1,1,64,64,1,1,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,1,28,-1,-1,0,64,64,1,14,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,4,28,-1,-1,0,64,64,1,2,28,-1,-1,0,64,64,1,-1,-1,419,-1,1,64,64,1,2,28,-1,-1,0,64,64,1,2,14,-1,1,1,64,64,1,2,28,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,1,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,2,14,-1,-1,0,64,64,1,-1,-1,222,-1,1,64,64,1,2,14,-1,-1,1,512,64,1,7,7,-1,1,1,512,64,1,2,14,-1,-1,1,256,64,1,7,7,-1,-1,0,512,512,1,7,7,-1,-1,0,64,512,1,7,7,-1,-1,0,128,64,1,-1,-1,61,-1,0,512,512,1,7,7,-1,-1,1,256,512,1,7,7,-1,-1,0,64,512,1,-1,-1,61,-1,0,512,64,1,7,7,-1,-1,0'
+
+
+class ConvFwdConfig:
+    number_of_config_elements = 8
+
+    def __init__(self, k_block: int, c_block: int, tile_d: int, tile_p: int, tile_q: int, tile_os: int,
+                 pack_input: int, loop_sched: int):
+        self.k_block = k_block
+        self.c_block = c_block
+        self.tile_d = tile_d
+        self.tile_p = tile_p
+        self.tile_q = tile_q
+        self.tile_os = tile_os
+        self.pack_input = pack_input
+        self.loop_sched = loop_sched
+
+    def to_dict(self) -> Dict[str, int]:
+        return {
+            'K_block': self.k_block,
+            'C_block': self.c_block,
+            'tile_d': self.tile_d,
+            'tile_p': self.tile_p,
+            'tile_q': self.tile_q,
+            'tile_os': self.tile_os,
+            'pack_input': self.pack_input,
+            'loop_sched': self.loop_sched,
+        }
+
+    def to_list(self) -> List[int]:
+        return [
+            self.k_block,
+            self.c_block,
+            self.tile_d,
+            self.tile_p,
+            self.tile_q,
+            self.tile_os,
+            self.pack_input,
+            self.loop_sched,
+        ]
+
+def get_unified_cfgs() -> Iterable[ConvFwdConfig]:
+    return _get_cfgs(unified_raw_cfg)
+
+
+def get_rn50_multi_instance_bs8_cfgs() -> Iterable[ConvFwdConfig]:
+    return _get_cfgs(_rn50_multi_instance_bs8_raw_cfg)
+
+
+def get_rn50_multi_instance_bs256_cfgs() -> Iterable[ConvFwdConfig]:
+    return _get_cfgs(_rn50_multi_instance_bs256_raw_cfg)
+
+
+def _get_cfgs(raw_cfg: str) -> Iterable[ConvFwdConfig]:
+    split_cfgs = [int(cfg) for cfg in raw_cfg.split(',')]
+    length = len(split_cfgs)
+    elements = ConvFwdConfig.number_of_config_elements
+    if length % elements != 0:
+        raise ValueError('Illegal config, length % elements != 0: {}'.format(raw_cfg))
+    for i in range(0, length, elements):
+        yield ConvFwdConfig(*split_cfgs[i:i+elements])
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_mlp.py b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_mlp.py
new file mode 100644
index 000000000..6a019ee14
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_mlp.py
@@ -0,0 +1,211 @@
+import pysc
+import subprocess
+import struct
+import math
+import argparse
+from pysc.graph.configs import postop_type
+from utils import *
+import os.path
+
+CUR_DIR = os.path.dirname(os.path.abspath(__file__)) # This is your Project Root
+PROJ_DIR = os.path.split(CUR_DIR)[0]
+default_outpath = os.path.join(PROJ_DIR, "src", "kernel_mlp")
+
+parser = argparse.ArgumentParser()
+parser.add_argument("--buildpath",
+                    type=str, help="The cmake build path of graph-compiler")
+parser.add_argument("--no-data-source", action="store_true", default=False,
+                    help="Don't generate global data in C source code")
+parser.add_argument("--extra-options", type=str,
+                    default="", help="The extra Compiler options")
+parser.add_argument("--compile", type=str, default="none",
+                    help="Compile the kernel: none/bin/src")
+parser.add_argument("--outpath", type=str, default=default_outpath,
+                    help="The destination path to store the generated kernels")
+args = parser.parse_args()
+
+
+ctx = pysc.contexts.get_context("spr")  # pysc.get_default_context()
+pysc.runtime.config.num_threads_per_instance = 56
+out_path = args.outpath
+if not os.path.exists(out_path):
+    os.makedirs(out_path)
+
+
+def get_fwd_graph(bs_str: str):
+    test_layers = 3
+    test_batch_size = batch_size_to_number(bs_str)
+    test_hidden_size = [13, 512, 256, 128]
+    postop_types = [postop_type.bias, postop_type.bias, postop_type.bias,
+                    postop_type.relu, postop_type.relu, postop_type.relu]
+    qinfo = []
+    g = pysc.graph.predefined.get_mlp_training_forward_graph(
+        [], test_layers, test_batch_size, test_hidden_size, pysc.dtype("bf16"), postop_types, [])
+    g.attrs["temp.name"] = g.attrs["temp.name"].extract() + "_" + bs_str
+    # print(g)
+    for op in g:
+        if op.op_name == "input" or op.op_name == "output":
+            if get_op_name(op) == "input":
+                op.attrs["keep_plain"] = True
+            elif get_op_name(op) == "relu_out2":
+                op.attrs["target_formats"] = make_vector_any(
+                    "sc_data_format_t", [pysc.data_format.MK()])
+    g.attrs["is_input_plain"] = False
+    g.attrs["is_output_plain"] = False
+    g.run_passes_and_tune(ctx, timeout=0)
+    print(g)
+    return g
+
+
+def map_bwd_arg_to_fwd_arg(name: str) -> str:
+    def process(f):
+        return f if f != "input0" else "input"
+    if name.startswith("out_grad_"):
+        return process(name[len("out_grad_"):])
+    ret = {"gradient": "relu_out2",
+           "in_relu_output": "relu_out2",
+           "data_input0": "input",
+           "data_input1": "relu_out0",
+           "data_input2": "relu_out1",
+           }
+    if name in ret:
+        return ret[name]
+    if name.startswith("weight_input"):
+        return name.replace("_input", "")
+    return None
+
+
+def get_bwd_graph(bs_str: str, arg_name_to_format):
+    test_layers = 3
+    test_batch_size = batch_size_to_number(bs_str)
+    test_hidden_size = [13, 512, 256, 128]
+    postop_types = [postop_type.bias, postop_type.bias, postop_type.bias,
+                    postop_type.relu, postop_type.relu, postop_type.relu]
+    qinfo = []
+    g = pysc.graph.predefined.get_mlp_training_backward_graph(
+        [], test_layers, test_batch_size, test_hidden_size, pysc.dtype("bf16"), postop_types, [])
+    g.attrs["temp.name"] = g.attrs["temp.name"].extract() + "_" + bs_str
+    for op in g:
+        if op.op_name == "output":
+            detail = op.inputs[0].details
+            the_format = arg_name_to_format[map_bwd_arg_to_fwd_arg(
+                get_op_name(op))].format
+            op.attrs["target_formats"] = make_vector_any(
+                "sc_data_format_t", [the_format])
+        if op.op_name == "input":
+            detail = op.outputs[0].details
+            detail.format = arg_name_to_format[map_bwd_arg_to_fwd_arg(
+                get_op_name(op))].format
+    print(g)
+    g.attrs["is_input_plain"] = False
+    g.attrs["is_output_plain"] = False
+    g.run_passes_and_tune(ctx, timeout=0)
+    print(g)
+    return g
+
+
+def gen_fwd(batch_size: str, reorders: dict):
+    fwd_g = get_fwd_graph(batch_size)
+    main_src, doc_src1, fwd_graph_name, reorder_to_add = compile_graph(fwd_g, ctx)
+    out_data_file = os.path.join(out_path, "fwd_data" + batch_size + ".cpp")
+    out_src_file = os.path.join(out_path, "fwd" + batch_size + ".cpp")
+    (inited_size, uninited_size) = process_global_data(
+        fwd_graph_name, out_data_file, args.no_data_source)
+    decl = process_source(main_src, fwd_graph_name, inited_size,
+                          uninited_size, out_src_file)
+    doc_src = doc_src1 + decl
+    for k in reorder_to_add:
+        reorders[k] = reorder_to_add[k]
+    fwd_arg2format = get_arg_name_format_map(fwd_g)
+    return fwd_g, doc_src, fwd_arg2format
+
+
+def gen_bwd(batch_size, fwd_g, fwd_arg2format, reorders):
+    bwd_g = get_bwd_graph(batch_size, fwd_arg2format)
+    bwd_arg2format = get_arg_name_format_map(bwd_g)
+    main_src, doc_src1, bwd_graph_name, reorder_to_add2 = compile_graph(bwd_g, ctx)
+    out_data_file = os.path.join(out_path, "bwd_data" + batch_size + ".cpp")
+    out_src_file = os.path.join(out_path, "bwd" + batch_size + ".cpp")
+    (inited_size, uninited_size) = process_global_data(
+        bwd_graph_name, out_data_file, args.no_data_source)
+    decl = process_source(main_src, bwd_graph_name, inited_size,
+                          uninited_size, out_src_file)
+    doc_src = doc_src1 + decl
+    for k in reorder_to_add2:
+        reorders[k] = reorder_to_add2[k]
+    return bwd_g, doc_src, bwd_arg2format
+
+
+reorder_to_add = dict()
+doc_src =  '#pragma once\n#include <stdint.h>\n\n'
+
+def gen_by_batch(bs_str):
+    global doc_src
+    global reorder_to_add
+    fwd_g_4k, doc_src_tmp, fwd_arg2format_4k = gen_fwd(bs_str, reorder_to_add)
+    doc_src += doc_src_tmp
+    bwd_g_4k, doc_src_tmp, bwd_arg2format_4k = gen_bwd(
+        bs_str, fwd_g_4k, fwd_arg2format_4k, reorder_to_add)
+    doc_src += doc_src_tmp
+    return (fwd_arg2format_4k, bwd_arg2format_4k)
+
+
+def gen_by_batches(bs_list: list):
+    return [(bs, gen_by_batch(bs)) for bs in bs_list]
+
+
+bs2formats = gen_by_batches(["4k", "128k"])
+for (bs, args2format) in bs2formats:
+    print ("bs:", bs)
+    print ("args2foramt:", args2format)
+
+main_src, decl, reorder_info = make_reorder_graph(reorder_to_add, ctx)
+reorder_data_file = os.path.join(out_path, "reorder_data.cpp")
+(inited_size, uninited_size) = process_global_data("reorder", reorder_data_file,
+                                                   args.no_data_source)
+reorder_func_replace_map = []
+for idx, info in enumerate(reorder_info):
+    old_func_name = "reorder__{}(".format(idx+1)
+    new_func_name = info[2]+"("
+    reorder_func_replace_map.append((old_func_name, new_func_name))
+reorder_func_replace_map.append(
+    ('extern "C" void main_entry', 'static void main_entry'))
+reorder_src_file = os.path.join(out_path, "reorder.cpp")
+_ = process_source(main_src, "reorder", inited_size,
+                   uninited_size, reorder_src_file, reorder_func_replace_map)
+doc_src_reorder = '#pragma once\n#include <stdint.h>\n\n' + decl
+with open(out_path+"/reorder.hpp", 'w') as f:
+    f.write(doc_src_reorder)
+
+
+with open(out_path+"/mlp.hpp", 'w') as f:
+    f.write(doc_src)
+
+shape_code_template = '''
+namespace mlp_fwd_{bs}_shape {{
+{fwd}
+}}
+
+namespace mlp_bwd_{bs}_shape {{
+{bwd}
+}}
+'''
+
+shape_src_template = '''#pragma once
+{}
+{}
+'''
+
+with open(out_path+"/shape.hpp", 'w') as f:
+    code = "\n".join([shape_code_template.format(bs=bs, fwd=gen_doc_for_shape(fwd_arg2format), bwd=gen_doc_for_shape(
+        bwd_arg2format)) for (bs, (fwd_arg2format, bwd_arg2format)) in bs2formats])
+    f.write(shape_src_template.format("#include <array>", code))
+
+for (bs, (fwd_arg2format, bwd_arg2format)) in bs2formats:
+    del fwd_arg2format["input"]
+    del fwd_arg2format["relu_out2"]
+
+with open(out_path+"/pack.hpp", 'w') as f:
+    code = "\n".join([shape_code_template.format(bs=bs, fwd=gen_src_for_pack_unpack(
+        fwd_arg2format), bwd=gen_src_for_pack_unpack(bwd_arg2format)) for (bs, (fwd_arg2format, bwd_arg2format)) in bs2formats])
+    f.write(shape_src_template.format('#include "reorder.hpp"\n#include <string.h>',code))
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_rn50.py b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_rn50.py
new file mode 100644
index 000000000..cd078f64b
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/make_rn50.py
@@ -0,0 +1,364 @@
+import json
+import argparse
+import os.path
+import os
+
+import pysc
+from pysc.graph.configs import quantize_infos
+
+import graph_configs
+from utils import *
+
+reorder_to_add = dict()
+doc_src = '#pragma once\n#include <stdint.h>\n\n'
+
+
+def main():
+    args = parse_args()
+    ctx = pysc.contexts.get_context("spr")  # pysc.get_default_context()
+
+    out_path = args.outpath
+    if not os.path.exists(out_path):
+        os.makedirs(out_path)
+
+    bs_args2formats = gen_by_batches_rn50(ctx, args, ["256", "8", "4"])
+
+    # debug info
+    for (bs, args2format) in bs_args2formats:
+        print("bs:", bs)
+        print("args2foramt:", args2format)
+    print("gen_rn50_backbone done...\n")
+
+    main_src, decl, reorder_info = make_reorder_graph(reorder_to_add, ctx)
+    reorder_data_file = os.path.join(out_path, "reorder_data.cpp")
+    (inited_size, uninited_size) = process_global_data("reorder",
+                                                       reorder_data_file,
+                                                       args.no_data_source)
+    reorder_func_replace_map = []
+    for idx, info in enumerate(reorder_info):
+        old_func_name = "reorder__{}(".format(idx + 1)
+        new_func_name = info[2] + "("
+        reorder_func_replace_map.append((old_func_name, new_func_name))
+    reorder_func_replace_map.append(
+        ('extern "C" void main_entry', 'static void main_entry'))
+    reorder_src_file = os.path.join(out_path, "reorder.cpp")
+    _ = process_source(main_src, "reorder", inited_size, uninited_size,
+                       reorder_src_file, reorder_func_replace_map)
+    doc_src_reorder = '#pragma once\n#include <stdint.h>\n\n' + decl
+
+    reorder_header_file = os.path.join(out_path, "reorder.hpp")
+    with open(reorder_header_file, 'w') as f:
+        f.write(doc_src_reorder)
+
+    api_header_file = os.path.join(out_path, "rn50_backbone.hpp")
+    with open(api_header_file, 'w') as f:
+        f.write(doc_src)
+
+    shape_code_template = '''
+namespace backbone_{bs}_shape {{
+{shapes}
+}}
+'''
+
+    shape_src_template = '''#pragma once
+{}
+{}
+'''
+
+    shape_header_file = os.path.join(out_path, "shape.hpp")
+    with open(shape_header_file, 'w') as f:
+        code = "\n".join([
+            shape_code_template.format(bs=bs,
+                                       shapes=gen_doc_for_shape(arg2format))
+            for (bs, arg2format) in bs_args2formats
+        ])
+        f.write(shape_src_template.format("#include <array>", code))
+
+    pack_header_file = os.path.join(out_path, "pack.hpp")
+    with open(pack_header_file, 'w') as f:
+        code = "\n".join([
+            shape_code_template.format(
+                bs=bs, shapes=gen_src_for_pack_unpack(arg2format))
+            for (bs, arg2format) in bs_args2formats
+        ])
+        f.write(
+            shape_src_template.format(
+                '#include "reorder.hpp"\n#include <string.h>', code))
+
+
+def parse_args():
+    CUR_DIR = os.path.dirname(
+        os.path.abspath(__file__))  # This is your Project Root
+    PROJ_DIR = os.path.split(CUR_DIR)[0]
+    default_outpath = os.path.join(PROJ_DIR, "src", "kernel_rn50")
+
+    parser = argparse.ArgumentParser()
+    parser.add_argument(
+        "--buildpath", type=str,
+        help="The cmake build path of graph-compiler")  # unused
+    parser.add_argument("--no-data-source",
+                        action="store_true",
+                        default=False,
+                        help="Don't generate global data in C source code")
+    parser.add_argument("--extra-options",
+                        type=str,
+                        default="",
+                        help="The extra Compiler options")  # unused
+    parser.add_argument("--compile",
+                        type=str,
+                        default="none",
+                        help="Compile the kernel: none/bin/src")  # unused
+    parser.add_argument(
+        "--outpath",
+        type=str,
+        default=default_outpath,
+        help="The destination path to store the generated kernels")
+    args = parser.parse_args()
+    return args
+
+
+def get_qinfos(path="./int8-scales-fused.json"):
+    with open(path, "r") as f:
+        data = json.load(f)
+        return get_qinfos_v1(path) if isinstance(data,
+                                                 list) else get_qinfos_v2(path)
+
+
+def get_qinfos_v1(path):
+    print("read qinfo from ", path)
+    qinfos = [() for _ in range(100)]
+
+    with open(path, "r") as f:
+        data = json.load(f)
+        cnt = 0
+        layer_start = [3, 25, 54, 97, 119]
+        layer_index = 0
+        index = 0
+        old_index = 0
+        conv_index = 0
+        for i, item in enumerate(data):
+
+            if item['id'] < 3 or item['id'] > 118:
+                continue
+
+            # print(item["id"], item["name"], item["inputs_flow"], item["outputs_flow"] )
+
+            if item["id"] >= layer_start[layer_index]:
+                old_index = index
+                layer_index += 1
+                index += 1
+                conv_index = 0
+
+            # quantize_infos_t(dtype, scales,
+            #                 zero_points, per_channel, channel_axis,
+            #                 asymmetric, dynamic)
+
+            if item["name"] == "conv2d":
+
+                conv_index += 1
+                q1 = quantize_infos(pysc.dtype("s8"), item["input_scales"],
+                                    [0], False, 0, False, False)
+
+                q2 = quantize_infos(pysc.dtype("s8"), item["weight_scales"][0],
+                                    [0], True, 0, False, False)
+                cnt += 1
+                if conv_index == 4:
+                    qinfos[old_index] = (q1, q2)
+                else:
+                    qinfos[index] = (q1, q2)
+                    index += 1
+
+            elif item["name"] == "add":
+                q1 = quantize_infos(pysc.dtype("s8"),
+                                    [item["input_scales"][1]], [0], False, 0,
+                                    False, False)
+                q2 = quantize_infos(pysc.dtype("s8"),
+                                    [item["input_scales"][0]], [0], False, 0,
+                                    False, False)
+
+                # conv block add
+                if item['id'] in (9, 31, 60, 103):
+                    q1 = quantize_infos(pysc.dtype("s8"),
+                                        [item["input_scales"][1]], [0], False,
+                                        0, False, False)
+
+                q3 = quantize_infos(pysc.dtype("s8"),
+                                    data[i + 2]["input_scales"], [0], False, 0,
+                                    False, False)
+
+                qinfos[index] = (q1, q1)
+                index += 1
+                qinfos[index] = (q2, q2)
+                index += 1
+                qinfos[index] = (q3, q3)
+                index += 1
+
+            # if item["id"] in [24, 53, 96, 118]:
+            #     print("------------")
+    return qinfos
+
+
+def get_qinfos_v2(path):
+    print("read qinfo from ", path)
+    qinfos = [() for _ in range(100)]
+
+    with open(path, "r") as f:
+        data = json.load(f)[" "]["q_op_infos"]
+        cnt = 0
+        layer_start = [3, 25, 54, 97, 119]
+        layer_index = 0
+        index = 0
+        old_index = 0
+        conv_index = 0
+        for i in range(122):
+            item = data[str(i)]
+            # print(item["op_type"])
+
+            if i < 3 or i > 118:
+                continue
+
+            # print(item["id"], item["name"], item["inputs_flow"], item["outputs_flow"] )
+
+            if i >= layer_start[layer_index]:
+                old_index = index
+                layer_index += 1
+                index += 1
+                conv_index = 0
+
+            # quantize_infos_t(dtype, scales,
+            #                 zero_points, per_channel, channel_axis,
+            #                 asymmetric, dynamic)
+
+            if item["op_type"] == "<class 'torch.nn.modules.conv.Conv2d'>":
+
+                conv_index += 1
+                input_tensor_infos = item["input_tensor_infos"][0]
+                q1 = quantize_infos(pysc.dtype("s8"),
+                                    input_tensor_infos["scale"], [0], False, 0,
+                                    False, False)
+
+                weight_tensor_infos = item["weight_tensor_infos"][0]
+                q2 = quantize_infos(pysc.dtype("s8"),
+                                    weight_tensor_infos["scale"], [0], True, 0,
+                                    False, False)
+                cnt += 1
+                if conv_index == 4:
+                    qinfos[old_index] = (q1, q2)
+                else:
+                    qinfos[index] = (q1, q2)
+                    index += 1
+
+            elif item[
+                    "op_type"] == "<method 'add' of 'torch._C._TensorBase' objects>":
+
+                residual_input = item["input_tensor_infos"][1]
+                main_branch_input = item["input_tensor_infos"][0]
+
+                q1 = quantize_infos(pysc.dtype("s8"), residual_input["scale"],
+                                    [0], False, 0, False, False)
+
+                q2 = quantize_infos(pysc.dtype("s8"),
+                                    main_branch_input["scale"], [0], False, 0,
+                                    False, False)
+
+                # conv block add
+                if i in (9, 31, 60, 103):
+                    q1 = quantize_infos(pysc.dtype("s8"),
+                                        residual_input["scale"], [0], False, 0,
+                                        False, False)
+
+                next_input = data[str(i + 2)]["input_tensor_infos"][0]
+                q3 = quantize_infos(pysc.dtype("s8"), next_input["scale"], [0],
+                                    False, 0, False, False)
+
+                qinfos[index] = (q1, q1)
+                index += 1
+                qinfos[index] = (q2, q2)
+                index += 1
+                qinfos[index] = (q3, q3)
+                index += 1
+
+            # if item["id"] in [24, 53, 96, 118]:
+            #     print("------------")
+
+    return qinfos
+
+
+def get_rn50_backbone(ctx, batch_size: str):
+    # args, batch_size, is_quantize, add_type(0: f32, 1: qadd, 2: int8_add), cfgs, qinfos
+
+    if batch_size not in ["256", "8", "4"]:
+         raise ValueError('Unsupported batch size {}'.format(batch_size))
+    get_cfgs = graph_configs.get_unified_cfgs
+
+    cfgs = []
+    for cfg in get_cfgs():
+        cfgs.append(pysc.graph.configs.conv_fwd_config(**cfg.to_dict()))
+    g = pysc.graph.predefined.get_rn50_backbone_graph(
+        [],
+        int(batch_size),
+        True,
+        pysc.graph.configs.Residual_Add_Type(2),
+        cfgs,
+        get_qinfos("./int8-scales-fused.json"),
+        data_f32=False,
+        output_f32=False)
+    g.attrs["temp.name"] = "rn50_backbone_bs" + batch_size
+    for op in g:
+        if op.op_name == "input" or op.op_name == "output":
+            if get_op_name(op) == "input":
+                op.attrs["keep_plain"] = True
+    g.attrs["is_input_plain"] = True
+    g.attrs["is_output_plain"] = False
+    g.run_passes_and_tune(ctx, timeout=0)
+    return g
+
+
+def gen_rn50_backbone(ctx, args, batch_size: str, reorders: dict):
+    g = get_rn50_backbone(ctx, batch_size)
+    print(g)
+    main_src, doc_src1, graph_name, reorder_to_add = compile_graph(g, ctx)
+
+    out_data_file = os.path.join(args.outpath,
+                                 "backbone_data_" + batch_size + ".cpp")
+    out_src_file = os.path.join(args.outpath,
+                                "backbone_" + batch_size + ".cpp")
+    (inited_size, uninited_size) = process_global_data(graph_name,
+                                                       out_data_file,
+                                                       args.no_data_source)
+    decl = process_source(main_src, graph_name, inited_size, uninited_size,
+                          out_src_file)
+    doc_src = doc_src1 + decl
+    for k in reorder_to_add:
+        reorders[k] = reorder_to_add[k]
+    arg2format = get_arg_name_format_map(g)
+    return g, doc_src, arg2format
+
+
+def gen_by_batch_rn50(ctx, args, batch_size: str):
+    global doc_src
+    global reorder_to_add
+
+    if int(batch_size) == 4:
+        ## enable multi-core for parallel for
+        pysc.runtime.config.num_threads_per_instance = 2
+        os.environ["IMAGE_AFFINITY_BOUNDARY"] = "12"
+    else:
+        ## use single-core w/o parallel for
+        pysc.runtime.config.num_threads_per_instance = 1
+        os.environ["IMAGE_AFFINITY_BOUNDARY"] = "12"
+
+    g, doc_src_tmp, args2format = gen_rn50_backbone(ctx, args, batch_size,
+                                                    reorder_to_add)
+    doc_src += doc_src_tmp
+    del os.environ["IMAGE_AFFINITY_BOUNDARY"]
+
+    return args2format
+
+
+def gen_by_batches_rn50(ctx, args, bs_list: list):
+    return [(bs, gen_by_batch_rn50(ctx, args, bs)) for bs in bs_list]
+
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/out.ldscript b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/out.ldscript
new file mode 100644
index 000000000..a7850ae3b
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/out.ldscript
@@ -0,0 +1,231 @@
+/* Script for -z combreloc: combine and sort reloc sections */
+/* Copyright (C) 2014-2015 Free Software Foundation, Inc.
+   Copying and distribution of this script, with or without modification,
+   are permitted in any medium without royalty provided the copyright
+   notice and this notice are preserved.  */
+OUTPUT_FORMAT("elf64-x86-64", "elf64-x86-64",
+              "elf64-x86-64")
+OUTPUT_ARCH(i386:x86-64)
+ENTRY(_start)
+SEARCH_DIR("=/usr/local/lib/x86_64-linux-gnu"); SEARCH_DIR("=/lib/x86_64-linux-gnu"); SEARCH_DIR("=/usr/lib/x86_64-linux-gnu"); SEARCH_DIR("=/usr/local/lib64"); SEARCH_DIR("=/lib64"); SEARCH_DIR("=/usr/lib64"); SEARCH_DIR("=/usr/local/lib"); SEARCH_DIR("=/lib"); SEARCH_DIR("=/usr/lib"); SEARCH_DIR("=/usr/x86_64-linux-gnu/lib64"); SEARCH_DIR("=/usr/x86_64-linux-gnu/lib");
+SECTIONS
+{
+  /* Read-only sections, merged into text segment: */
+  PROVIDE (__executable_start = SEGMENT_START("text-segment", 0x400000)); . = SEGMENT_START("text-segment", 0x400000) + SIZEOF_HEADERS;
+  .interp         : { *(.interp) }
+  .note.gnu.build-id : { *(.note.gnu.build-id) }
+  .hash           : { *(.hash) }
+  .gnu.hash       : { *(.gnu.hash) }
+  .dynsym         : { *(.dynsym) }
+  .dynstr         : { *(.dynstr) }
+  .gnu.version    : { *(.gnu.version) }
+  .gnu.version_d  : { *(.gnu.version_d) }
+  .gnu.version_r  : { *(.gnu.version_r) }
+  .rela.dyn       :
+    {
+      *(.rela.init)
+      *(.rela.text .rela.text.* .rela.gnu.linkonce.t.*)
+      *(.rela.fini)
+      *(.rela.rodata .rela.rodata.* .rela.gnu.linkonce.r.*)
+      *(.rela.data .rela.data.* .rela.gnu.linkonce.d.*)
+      *(.rela.tdata .rela.tdata.* .rela.gnu.linkonce.td.*)
+      *(.rela.tbss .rela.tbss.* .rela.gnu.linkonce.tb.*)
+      *(.rela.ctors)
+      *(.rela.dtors)
+      *(.rela.got)
+      *(.rela.bss .rela.bss.* .rela.gnu.linkonce.b.*)
+      *(.rela.ldata .rela.ldata.* .rela.gnu.linkonce.l.*)
+      *(.rela.lbss .rela.lbss.* .rela.gnu.linkonce.lb.*)
+      *(.rela.lrodata .rela.lrodata.* .rela.gnu.linkonce.lr.*)
+      *(.rela.ifunc)
+    }
+  .rela.plt       :
+    {
+      *(.rela.plt)
+      PROVIDE_HIDDEN (__rela_iplt_start = .);
+      *(.rela.iplt)
+      PROVIDE_HIDDEN (__rela_iplt_end = .);
+    }
+  .init           :
+  {
+    KEEP (*(SORT_NONE(.init)))
+  }
+  .plt            : { *(.plt) *(.iplt) }
+.plt.got        : { *(.plt.got) }
+.plt.bnd        : { *(.plt.bnd) }
+  .text           :
+  {
+    *(.text.unlikely .text.*_unlikely .text.unlikely.*)
+    *(.text.exit .text.exit.*)
+    *(.text.startup .text.startup.*)
+    *(.text.hot .text.hot.*)
+    *(.text .stub .text.* .gnu.linkonce.t.*)
+    /* .gnu.warning sections are handled specially by elf32.em.  */
+    *(.gnu.warning)
+  }
+  .fini           :
+  {
+    KEEP (*(SORT_NONE(.fini)))
+  }
+  PROVIDE (__etext = .);
+  PROVIDE (_etext = .);
+  PROVIDE (etext = .);
+  .rodata         : { *(.rodata .rodata.* .gnu.linkonce.r.*) }
+  .rodata1        : { *(.rodata1) }
+  .eh_frame_hdr : { *(.eh_frame_hdr) *(.eh_frame_entry .eh_frame_entry.*) }
+  .eh_frame       : ONLY_IF_RO { KEEP (*(.eh_frame)) *(.eh_frame.*) }
+  .gcc_except_table   : ONLY_IF_RO { *(.gcc_except_table
+  .gcc_except_table.*) }
+  .gnu_extab   : ONLY_IF_RO { *(.gnu_extab*) }
+  /* These sections are generated by the Sun/Oracle C++ compiler.  */
+  .exception_ranges   : ONLY_IF_RO { *(.exception_ranges
+  .exception_ranges*) }
+  /* Adjust the address for the data segment.  We want to adjust up to
+     the same address within the page on the next page up.  */
+  . = DATA_SEGMENT_ALIGN (CONSTANT (MAXPAGESIZE), CONSTANT (COMMONPAGESIZE));
+  /* Exception handling  */
+  .eh_frame       : ONLY_IF_RW { KEEP (*(.eh_frame)) *(.eh_frame.*) }
+  .gnu_extab      : ONLY_IF_RW { *(.gnu_extab) }
+  .gcc_except_table   : ONLY_IF_RW { *(.gcc_except_table .gcc_except_table.*) }
+  .exception_ranges   : ONLY_IF_RW { *(.exception_ranges .exception_ranges*) }
+  /* Thread Local Storage sections  */
+  .tdata          : { *(.tdata .tdata.* .gnu.linkonce.td.*) }
+  .tbss           : { *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon) }
+  .preinit_array     :
+  {
+    PROVIDE_HIDDEN (__preinit_array_start = .);
+    KEEP (*(.preinit_array))
+    PROVIDE_HIDDEN (__preinit_array_end = .);
+  }
+  .init_array     :
+  {
+    PROVIDE_HIDDEN (__init_array_start = .);
+    KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*)))
+    KEEP (*(.init_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .ctors))
+    PROVIDE_HIDDEN (__init_array_end = .);
+  }
+  .fini_array     :
+  {
+    PROVIDE_HIDDEN (__fini_array_start = .);
+    KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*) SORT_BY_INIT_PRIORITY(.dtors.*)))
+    KEEP (*(.fini_array EXCLUDE_FILE (*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o ) .dtors))
+    PROVIDE_HIDDEN (__fini_array_end = .);
+  }
+  .ctors          :
+  {
+    /* gcc uses crtbegin.o to find the start of
+       the constructors, so we make sure it is
+       first.  Because this is a wildcard, it
+       doesn't matter if the user does not
+       actually link against crtbegin.o; the
+       linker won't look for a file to match a
+       wildcard.  The wildcard also means that it
+       doesn't matter which directory crtbegin.o
+       is in.  */
+    KEEP (*crtbegin.o(.ctors))
+    KEEP (*crtbegin?.o(.ctors))
+    /* We don't want to include the .ctor section from
+       the crtend.o file until after the sorted ctors.
+       The .ctor section from the crtend file contains the
+       end of ctors marker and it must be last */
+    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
+    KEEP (*(SORT(.ctors.*)))
+    KEEP (*(.ctors))
+  }
+  .dtors          :
+  {
+    KEEP (*crtbegin.o(.dtors))
+    KEEP (*crtbegin?.o(.dtors))
+    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
+    KEEP (*(SORT(.dtors.*)))
+    KEEP (*(.dtors))
+  }
+  .jcr            : { KEEP (*(.jcr)) }
+  .data.rel.ro : { *(.data.rel.ro.local* .gnu.linkonce.d.rel.ro.local.*) *(.data.rel.ro .data.rel.ro.* .gnu.linkonce.d.rel.ro.*) }
+  .dynamic        : { *(.dynamic) }
+  .got            : { *(.got) *(.igot) }
+  . = DATA_SEGMENT_RELRO_END (SIZEOF (.got.plt) >= 24 ? 24 : 0, .);
+  .got.plt        : { *(.got.plt)  *(.igot.plt) }
+  .data           :
+  {
+    *(.data .data.* .gnu.linkonce.d.*)
+    SORT(CONSTRUCTORS)
+  }
+  .data1          : { *(.data1) }
+  sc_globals : ALIGN(0x1000) { *(sc_globals)}
+  _edata = .; PROVIDE (edata = .);
+  . = .;
+  __bss_start = .;
+  .bss            :
+  {
+   *(.dynbss)
+   *(.bss .bss.* .gnu.linkonce.b.*)
+   *(COMMON)
+   /* Align here to ensure that the .bss section occupies space up to
+      _end.  Align after .bss to ensure correct alignment even if the
+      .bss section disappears because there are no input sections.
+      FIXME: Why do we need it? When there is no .bss section, we don't
+      pad the .data section.  */
+   . = ALIGN(. != 0 ? 64 / 8 : 1);
+  }
+  .lbss   :
+  {
+    *(.dynlbss)
+    *(.lbss .lbss.* .gnu.linkonce.lb.*)
+    *(LARGE_COMMON)
+  }
+  . = ALIGN(64 / 8);
+  . = SEGMENT_START("ldata-segment", .);
+  .lrodata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
+  {
+    *(.lrodata .lrodata.* .gnu.linkonce.lr.*)
+  }
+  .ldata   ALIGN(CONSTANT (MAXPAGESIZE)) + (. & (CONSTANT (MAXPAGESIZE) - 1)) :
+  {
+    *(.ldata .ldata.* .gnu.linkonce.l.*)
+    . = ALIGN(. != 0 ? 64 / 8 : 1);
+  }
+  . = ALIGN(64 / 8);
+  _end = .; PROVIDE (end = .);
+  . = DATA_SEGMENT_END (.);
+  /* Stabs debugging sections.  */
+  .stab          0 : { *(.stab) }
+  .stabstr       0 : { *(.stabstr) }
+  .stab.excl     0 : { *(.stab.excl) }
+  .stab.exclstr  0 : { *(.stab.exclstr) }
+  .stab.index    0 : { *(.stab.index) }
+  .stab.indexstr 0 : { *(.stab.indexstr) }
+  .comment       0 : { *(.comment) }
+  /* DWARF debug sections.
+     Symbols in the DWARF debugging sections are relative to the beginning
+     of the section so we begin them at 0.  */
+  /* DWARF 1 */
+  .debug          0 : { *(.debug) }
+  .line           0 : { *(.line) }
+  /* GNU DWARF 1 extensions */
+  .debug_srcinfo  0 : { *(.debug_srcinfo) }
+  .debug_sfnames  0 : { *(.debug_sfnames) }
+  /* DWARF 1.1 and DWARF 2 */
+  .debug_aranges  0 : { *(.debug_aranges) }
+  .debug_pubnames 0 : { *(.debug_pubnames) }
+  /* DWARF 2 */
+  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
+  .debug_abbrev   0 : { *(.debug_abbrev) }
+  .debug_line     0 : { *(.debug_line .debug_line.* .debug_line_end ) }
+  .debug_frame    0 : { *(.debug_frame) }
+  .debug_str      0 : { *(.debug_str) }
+  .debug_loc      0 : { *(.debug_loc) }
+  .debug_macinfo  0 : { *(.debug_macinfo) }
+  /* SGI/MIPS DWARF 2 extensions */
+  .debug_weaknames 0 : { *(.debug_weaknames) }
+  .debug_funcnames 0 : { *(.debug_funcnames) }
+  .debug_typenames 0 : { *(.debug_typenames) }
+  .debug_varnames  0 : { *(.debug_varnames) }
+  /* DWARF 3 */
+  .debug_pubtypes 0 : { *(.debug_pubtypes) }
+  .debug_ranges   0 : { *(.debug_ranges) }
+  /* DWARF Extension.  */
+  .debug_macro    0 : { *(.debug_macro) }
+  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
+  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
+}
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/sc_graph_func_name_list.txt b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/sc_graph_func_name_list.txt
new file mode 100644
index 000000000..71232a3eb
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/sc_graph_func_name_list.txt
@@ -0,0 +1,406 @@
+3 rn50_backbone_bs256
+4 mul__569
+5 mul__571
+6 mul__575
+7 mul__577
+8 mul__581
+9 mul__583
+10 reorder__419
+11 mul__566
+12 mul__568
+13 mul__570
+14 reorder__424
+15 mul__572
+16 mul__574
+17 mul__576
+18 reorder__429
+19 mul__578
+20 mul__580
+21 mul__582
+22 reorder__434
+23 mul__584
+24 reorder__437
+25 mul__586
+26 reorder__440
+27 mul__588
+28 mul__590
+29 reorder__444
+30 mul__592
+31 reorder__447
+32 mul__594
+33 mul__596
+34 reorder__451
+35 mul__598
+36 reorder__454
+37 mul__600
+38 reorder__457
+39 mul__602
+40 reorder__460
+41 mul__604
+42 reorder__463
+43 mul__606
+44 reorder__466
+45 mul__608
+46 reorder__469
+47 mul__610
+48 reorder__472
+49 mul__612
+50 reorder__475
+51 mul__614
+52 reorder__478
+53 mul__616
+54 reorder__481
+55 mul__618
+56 mul__620
+57 reorder__485
+58 mul__622
+59 reorder__488
+60 mul__624
+61 reorder__491
+62 mul__626
+63 reorder__494
+64 mul__628
+65 reorder__497
+66 mul__630
+67 reorder__500
+68 mul__632
+69 reorder__503
+70 mul__634
+71 reorder__506
+72 mul__636
+73 reorder__509
+74 mul__638
+75 reorder__512
+76 mul__640
+77 reorder__515
+78 mul__642
+79 reorder__518
+80 mul__644
+81 reorder__521
+82 mul__646
+83 reorder__524
+84 mul__648
+85 reorder__527
+86 mul__650
+87 mul__652
+88 reorder__531
+89 mul__654
+90 reorder__534
+91 mul__656
+92 reorder__537
+93 mul__658
+94 reorder__540
+95 mul__660
+96 reorder__543
+97 mul__662
+98 reorder__546
+99 mul__664
+100 reorder__549
+101 mul__666
+102 reorder__552
+103 mul__668
+104 reorder__420
+105 mul__567
+106 reorder__425
+107 mul__573
+108 reorder__430
+109 mul__579
+110 reorder__435
+111 mul__585
+112 reorder__441
+113 mul__589
+114 mul__591
+115 reorder__448
+116 mul__595
+117 mul__597
+118 reorder__455
+119 mul__601
+120 reorder__458
+121 mul__603
+122 reorder__464
+123 mul__607
+124 reorder__467
+125 mul__609
+126 reorder__476
+127 mul__615
+128 reorder__479
+129 mul__617
+130 mul__621
+131 reorder__486
+132 mul__623
+133 reorder__492
+134 mul__627
+135 reorder__495
+136 mul__629
+137 reorder__501
+138 mul__633
+139 reorder__504
+140 mul__635
+141 reorder__510
+142 mul__639
+143 reorder__513
+144 mul__641
+145 reorder__519
+146 mul__645
+147 reorder__522
+148 mul__647
+149 reorder__438
+150 mul__587
+151 reorder__445
+152 mul__593
+153 reorder__452
+154 mul__599
+155 reorder__461
+156 mul__605
+157 reorder__470
+158 mul__611
+159 mul__653
+160 reorder__532
+161 mul__655
+162 reorder__538
+163 mul__659
+164 reorder__541
+165 mul__661
+166 reorder__547
+167 mul__665
+168 reorder__550
+169 mul__667
+170 reorder__473
+171 mul__613
+172 reorder__482
+173 mul__619
+174 reorder__489
+175 mul__625
+176 reorder__498
+177 mul__631
+178 reorder__507
+179 mul__637
+180 reorder__516
+181 mul__643
+182 reorder__525
+183 mul__649
+184 reorder__528
+185 mul__651
+186 reorder__535
+187 mul__657
+188 reorder__544
+189 mul__663
+190 reorder__553
+191 mul__669
+192 mul__110
+193 cast__111
+194 reorder__421
+195 mul__107
+196 cast__108
+197 reorder__418
+198 mul__116
+199 cast__117
+200 reorder__423
+201 mul__125
+202 cast__126
+203 reorder__428
+204 mul__134
+205 cast__135
+206 reorder__433
+207 mul__119
+208 cast__120
+209 reorder__426
+210 mul__128
+211 cast__129
+212 reorder__431
+213 mul__140
+214 cast__141
+215 reorder__439
+216 mul__113
+217 cast__114
+218 reorder__422
+219 mul__122
+220 cast__123
+221 reorder__427
+222 mul__131
+223 cast__132
+224 reorder__432
+225 mul__146
+226 cast__147
+227 reorder__443
+228 mul__155
+229 cast__156
+230 reorder__450
+231 mul__164
+232 cast__165
+233 reorder__459
+234 mul__173
+235 cast__174
+236 reorder__468
+237 mul__149
+238 cast__150
+239 reorder__446
+240 mul__158
+241 cast__159
+242 reorder__453
+243 mul__167
+244 cast__168
+245 reorder__462
+246 mul__137
+247 cast__138
+248 reorder__436
+249 mul__179
+250 cast__180
+251 reorder__474
+252 mul__143
+253 cast__144
+254 reorder__442
+255 mul__152
+256 cast__153
+257 reorder__449
+258 mul__161
+259 cast__162
+260 reorder__456
+261 mul__170
+262 cast__171
+263 reorder__465
+264 mul__185
+265 cast__186
+266 reorder__480
+267 mul__194
+268 cast__195
+269 reorder__487
+270 mul__203
+271 cast__204
+272 reorder__496
+273 mul__212
+274 cast__213
+275 reorder__505
+276 mul__221
+277 cast__222
+278 reorder__514
+279 mul__230
+280 cast__231
+281 reorder__523
+282 mul__188
+283 cast__189
+284 reorder__483
+285 mul__197
+286 cast__198
+287 reorder__490
+288 mul__206
+289 cast__207
+290 reorder__499
+291 mul__215
+292 cast__216
+293 reorder__508
+294 mul__224
+295 cast__225
+296 reorder__517
+297 mul__176
+298 cast__177
+299 reorder__471
+300 mul__236
+301 cast__237
+302 reorder__529
+303 mul__182
+304 cast__183
+305 reorder__477
+306 mul__191
+307 cast__192
+308 reorder__484
+309 mul__200
+310 cast__201
+311 reorder__493
+312 mul__209
+313 cast__210
+314 reorder__502
+315 mul__218
+316 cast__219
+317 reorder__511
+318 mul__227
+319 cast__228
+320 reorder__520
+321 mul__242
+322 cast__243
+323 reorder__533
+324 mul__251
+325 cast__252
+326 reorder__542
+327 mul__260
+328 cast__261
+329 reorder__551
+330 mul__245
+331 cast__246
+332 reorder__536
+333 mul__254
+334 cast__255
+335 reorder__545
+336 mul__233
+337 cast__234
+338 reorder__526
+339 mul__239
+340 cast__240
+341 reorder__530
+342 mul__248
+343 cast__249
+344 reorder__539
+345 mul__257
+346 cast__258
+347 reorder__548
+348 batchwise_256_fused_res2a_conv_b_cast_mul_add_cast_res2a_conv_0_cast_mul_add_relu_cast_res2a_conv_1_cast_mul_add_relu_cast_res2a_conv_2_cast_mul_add_cast_add_cast_cast_res2b_conv_0_cast_mul_add_relu_cast_res2b_conv_1_cast_mul_add_relu_cast_res2b_conv_2_cast_mul_add_cast_add_cast_cast_res2c_conv_0_cast_mul_add_relu_cast_res2c_conv_1_cast_mul_add_relu_cast_res2c_conv_2_cast_mul_add_cast_add_cast_cast_res3a_conv_b_cast_mul_add_cast_res3a_conv_0_cast_mul_add_relu_cast_res3a_conv_1_cast_mul_add_relu_cast_res3a_conv_2_cast_mul_add_cast_add_cast_cast_res3b_conv_0_cast_mul_add_relu_cast_reorder_res3b_conv_1_cast_mul_add_relu_cast_reorder_res3b_conv_2_cast_mul_add_cast_add_cast_cast_res3c_conv_0_cast_mul_add_relu_cast_res3c_conv_1_cast_mul_add_relu_cast_reorder_res3c_conv_2_cast_mul_add_cast_add_cast_cast_res3d_conv_0_cast_mul_add_relu_cast_res3d_conv_1_cast_mul_add_relu_cast_reorder_res3d_conv_2_cast_mul_add_cast_add_cast_cast__680
+349 main_entry
+350 res2a_conv_b_cast_mul_add_cast__4
+351 res2a_conv_0_cast_mul_add_relu_cast__8
+352 res2a_conv_1_cast_mul_add_relu_cast__12
+353 res2a_conv_2_cast_mul_add_cast_add_cast_cast__16
+354 res2b_conv_0_cast_mul_add_relu_cast__20
+355 res2b_conv_1_cast_mul_add_relu_cast__24
+356 res2b_conv_2_cast_mul_add_cast_add_cast_cast__28
+357 res2c_conv_0_cast_mul_add_relu_cast__32
+358 res2c_conv_1_cast_mul_add_relu_cast__36
+359 res2c_conv_2_cast_mul_add_cast_add_cast_cast__40
+360 res3a_conv_b_cast_mul_add_cast__44
+361 res3a_conv_0_cast_mul_add_relu_cast__48
+362 res3a_conv_1_cast_mul_add_relu_cast__52
+363 res3a_conv_2_cast_mul_add_cast_add_cast_cast__56
+364 res3b_conv_0_cast_mul_add_relu_cast_reorder__60
+365 res3b_conv_1_cast_mul_add_relu_cast_reorder__64
+366 res3b_conv_2_cast_mul_add_cast_add_cast_cast__68
+367 res3c_conv_0_cast_mul_add_relu_cast__72
+368 res3c_conv_1_cast_mul_add_relu_cast_reorder__76
+369 res3c_conv_2_cast_mul_add_cast_add_cast_cast__80
+370 res3d_conv_0_cast_mul_add_relu_cast__84
+371 res3d_conv_1_cast_mul_add_relu_cast_reorder__88
+372 res3d_conv_2_cast_mul_add_cast_add_cast_cast__93
+373 batchwise_128_fused_res4a_conv_b_cast_mul_add_cast_res4a_conv_0_cast_mul_add_relu_cast_reorder_res4a_conv_1_cast_mul_add_relu_cast_reorder_res4a_conv_2_cast_mul_add_cast_add_cast_cast_res4b_conv_0_cast_mul_add_relu_cast_reorder_res4b_conv_1_cast_mul_add_relu_cast_reorder_res4b_conv_2_cast_mul_add_cast_add_cast_cast_res4c_conv_0_cast_mul_add_relu_cast_reorder_res4c_conv_1_cast_mul_add_relu_cast_reorder_res4c_conv_2_cast_mul_add_cast_add_cast_cast_res4d_conv_0_cast_mul_add_relu_cast_res4d_conv_1_cast_mul_add_relu_cast_reorder_res4d_conv_2_cast_mul_add_cast_add_cast_cast_res4e_conv_0_cast_mul_add_relu_cast_reorder_res4e_conv_1_cast_mul_add_relu_cast_reorder_res4e_conv_2_cast_mul_add_cast_add_cast_cast_res4f_conv_0_cast_mul_add_relu_cast_res4f_conv_1_cast_mul_add_relu_cast_reorder_res4f_conv_2_cast_mul_add_cast_add_cast_cast_reorder__681
+374 main_entry_1
+375 res4a_conv_b_cast_mul_add_cast__4
+376 res4a_conv_0_cast_mul_add_relu_cast_reorder__8
+377 res4a_conv_1_cast_mul_add_relu_cast_reorder__12
+378 res4a_conv_2_cast_mul_add_cast_add_cast_cast__16
+379 res4b_conv_0_cast_mul_add_relu_cast_reorder__20
+380 res4b_conv_1_cast_mul_add_relu_cast_reorder__24
+381 res4b_conv_2_cast_mul_add_cast_add_cast_cast__28
+382 res4c_conv_0_cast_mul_add_relu_cast_reorder__32
+383 res4c_conv_1_cast_mul_add_relu_cast_reorder__36
+384 res4c_conv_2_cast_mul_add_cast_add_cast_cast__40
+385 res4d_conv_0_cast_mul_add_relu_cast__44
+386 res4d_conv_1_cast_mul_add_relu_cast_reorder__48
+387 res4d_conv_2_cast_mul_add_cast_add_cast_cast__52
+388 res4e_conv_0_cast_mul_add_relu_cast_reorder__56
+389 res4e_conv_1_cast_mul_add_relu_cast_reorder__60
+390 res4e_conv_2_cast_mul_add_cast_add_cast_cast__64
+391 res4f_conv_0_cast_mul_add_relu_cast__68
+392 res4f_conv_1_cast_mul_add_relu_cast_reorder__72
+393 res4f_conv_2_cast_mul_add_cast_add_cast_cast_reorder__77
+394 res5a_conv_b_cast_mul_add_cast__679
+395 res5a_conv_0_cast_mul_add_relu_cast__678
+396 res5a_conv_1_cast_mul_add_relu_cast_reorder__677
+397 res5a_conv_2_cast_mul_add_cast_add_cast_cast__676
+398 res5b_conv_0_cast_mul_add_relu_cast__675
+399 res5b_conv_1_cast_mul_add_relu_cast_reorder__674
+400 res5b_conv_2_cast_mul_add_cast_add_cast_cast__673
+401 res5c_conv_0_cast_mul_add_relu_cast_reorder__672
+402 res5c_conv_1_cast_mul_add_relu_cast_reorder__671
+403 res5c_conv_2_cast_mul_add_cast_add_cast_cast_reorder__670
+404 __init_const_globals
+405 __sc_init__
+406 main_entry
+407 reorder__2
+408 reorder__1
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/utils.py b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/utils.py
new file mode 100644
index 000000000..7608cf7ed
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/scripts/utils.py
@@ -0,0 +1,356 @@
+import pysc
+import subprocess
+import struct
+import math
+import os.path
+import re
+
+def run_cmd_get_output(cmd, cwd: str = None) -> str:
+    p1 = subprocess.Popen(
+        cmd, stdout=subprocess.PIPE, cwd=cwd)
+    out, err = p1.communicate()
+    if p1.wait() != 0:
+        print("Running command", cmd, "failed")
+        exit(127)
+    out = out.decode("utf-8")
+    return out
+
+
+def run_cmd(cmd: str, cwd: str, allow_failure=False):
+    process = subprocess.Popen(cmd, cwd=cwd)
+    ret = process.wait()
+    if ret != 0:
+        print("Running command", cmd, "failed")
+        if not allow_failure:
+            exit(127)
+    return ret
+
+
+def dims_to_str(dims: list):
+    return 'x'.join([str(v) for v in dims])
+
+
+def get_op_name(op):
+    ## hack for rn50
+    # if not "temp.name" in op.attrs:
+    #     return None
+    return op.attrs["temp.name"].extract()
+
+
+def make_vector_any(typename, lst) -> pysc.any:
+    any_str = [str(pysc.any(f)) for f in lst]
+    data = '{{"type":"v[{typename}]", "data":[{data}]}}'.format(
+        typename=typename, data=','.join(any_str))
+    return pysc.any.make(data)
+
+
+def sort_dict(v: dict):
+    ret = [kv for kv in v.items()]
+    ret.sort(key=lambda kv: kv[0])
+    return ret
+
+
+def batch_size_to_number(bs: str) -> int:
+    if bs.endswith('k'):
+        return int(bs[:-1])*1024
+    return int(bs)
+
+
+def get_arg_name_format_map(g: pysc.graph):
+    ret = dict()
+    for op in g:
+        # print("op.name:" , op.op_name)
+        # print (op.attrs)
+
+        if op.op_name == "output":
+            detail = op.inputs[0].details
+            ret[get_op_name(op)] = detail
+        if op.op_name == "input":
+            detail = op.outputs[0].details
+            ret[get_op_name(op)] = detail
+    return ret
+
+
+def gen_doc_for_shape(arg_name_to_format) -> str:
+    templ = '''inline const std::array<int, {N}>& {name}() {{
+    static const std::array<int, {N}> shape = {{{values}}};
+    return shape;
+}}
+'''
+    lines = []
+    for name, fmt in sort_dict(arg_name_to_format):
+        real_dims = fmt.real_dims
+        line = templ.format(N=len(real_dims), name=name,
+                            values=','.join([str(v) for v in real_dims]))
+        lines.append(line)
+    return "\n".join(lines)
+
+
+def gen_src_for_pack_unpack(arg_name_to_format) -> str:
+    plain_templ = '''inline void pack_{name}(uint16_t* out, uint16_t* in) {{
+    memcpy(out, in, sizeof(uint16_t) * {num_elem});
+}}
+
+inline void unpack_{name}(uint16_t* out, uint16_t* in) {{
+    memcpy(out, in, sizeof(uint16_t) * {num_elem});
+}}
+'''
+
+    block_templ = '''inline void pack_{name}(uint16_t* out, uint16_t* in) {{
+    reorder_{dims}_{pfmt}_{bfmt}(out, in);
+}}
+
+inline void unpack_{name}(uint16_t* out, uint16_t* in) {{
+    reorder_{dims}_{bfmt}_{pfmt}(out, in);
+}}
+'''
+    lines = []
+    for name, details in sort_dict(arg_name_to_format):
+        dims = details.logical_dims
+        if details.format.is_plain:
+            size = 1
+            for v in dims:
+                size *= v
+            line = plain_templ.format(name=name, num_elem=size)
+        else:
+            line = block_templ.format(name=name, dims=dims_to_str(
+                dims), pfmt=pysc.data_format.get_plain_by_dims(len(dims)), bfmt=details.format)
+        lines.append(line)
+
+    return "\n".join(lines)
+
+
+def compile_graph(g: pysc.graph.graph, ctx):
+    reorder_to_add = dict()
+    ops_args = []
+    for op in g:
+        if op.op_name == "output":
+            ops_args.append(op)
+            detail = op.inputs[0].details
+            plain_fmt = pysc.data_format.get_plain_by_dims(
+                len(detail.logical_dims))
+            name = str(detail) + str(plain_fmt)
+            if not detail.format.is_plain:
+                if name not in reorder_to_add:
+                    reorder_to_add[name] = (detail, plain_fmt)
+    for op in g:
+        if op.op_name == "input":
+            ops_args.append(op)
+            detail = op.outputs[0].details
+            plain_fmt = pysc.data_format.get_plain_by_dims(
+                len(detail.logical_dims))
+            target_detail = pysc.graph.tensor_detail(
+                plain_fmt, detail.logical_dims, detail.dtype)
+            name = str(target_detail) + str(detail.format)
+            if not detail.format.is_plain:
+                if name not in reorder_to_add:
+                    reorder_to_add[name] = (target_detail, detail.format)
+    #ops_args.reverse()
+    gl = g.lower(ctx, ops_args)
+
+    gname = g.attrs["temp.name"].extract()
+    print("Graph name", gname)
+    doc_src_list = []
+    for op in ops_args:
+        if op.op_name == "input":
+            detail = op.outputs[0].details
+        elif op.op_name == "output":
+            detail = op.inputs[0].details
+        detail_str = str(detail)
+        op_name = get_op_name(op)
+        line = " * @param {op_name} {inout} tensor, {detail}".format(
+            op_name=op_name, inout=op.op_name, detail=detail_str)
+        if not detail.format.is_plain:
+            line += ", real dims is " + str(detail.real_dims)
+        doc_src_list.append(line)
+    doc_src = '''
+/**
+ * {gname}
+{lines}
+**/
+'''.format(gname=gname, lines="\n".join(doc_src_list))
+
+    jit = pysc.jit.cfake_jit(ctx)
+    if not os.path.exists("tmp"):
+        os.makedirs("tmp")
+    src = jit.codegen_to_cpp(gl, False, "tmp/mod_raw.bin")
+    # print(gl)
+
+    # reorder_g.attrs["is_input_plain"] = False
+    # reorder_g.attrs["is_output_plain"] = False
+    # reorder_g.run_passes_and_tune(ctx, timeout=0)
+    # print(reorder_g)
+    return src, doc_src, gname, reorder_to_add
+
+
+def make_reorder_graph(reorder_to_add, ctx):
+    reorder_g = pysc.graph.graph()
+    sorted_map = sort_dict(reorder_to_add)
+    reorder_ins = [kv[1][0] for kv in sorted_map]
+    reorder_fmts = [kv[1][1] for kv in sorted_map]
+    in_tsr = reorder_g.make_input(reorder_ins).outputs
+    outs = []
+    reorder_info = []
+    for idx, t in enumerate(in_tsr):
+        otsr = reorder_g.make("reorder", [t], [], pysc.any_map(
+            {"out_format": reorder_fmts[idx], "internal": True})).outputs[0]
+        outs.append(otsr)
+        func_name = "reorder_{dims}_{ifmt}_{ofmt}".format(
+            ifmt=reorder_ins[idx].format, ofmt=reorder_fmts[idx], dims=dims_to_str(reorder_ins[idx].logical_dims))
+        reorder_info.append(
+            (reorder_ins[idx], reorder_fmts[idx], func_name))
+    reorder_g.make_output(outs)
+    print(reorder_g)
+    gl = reorder_g.lower(ctx)
+    jit = pysc.jit.cfake_jit(ctx)
+
+    if not os.path.exists("tmp"):
+        os.makedirs("tmp")
+    src = jit.codegen_to_cpp(gl, False, "tmp/mod_raw.bin")
+    doc_template = '''
+/**
+ * Do reorder from {ifmt} format to {ofmt} format. Plain dims is {dims}
+**/
+extern "C" bool {func_name}(uint16_t* out, uint16_t* in);
+'''
+    doc_src = '\n'.join([doc_template.format(
+        ifmt=info[0].format, ofmt=info[1], func_name=info[2], dims=dims_to_str(info[0].logical_dims)) for info in reorder_info])
+    return src, doc_src, reorder_info
+
+
+def process_global_data(graph_name: str, out_file_name: str, no_data_source: bool):
+    with open("tmp/mod_raw.bin", 'rb') as binf:
+        magic = struct.unpack('Q', binf.read(8))[0]
+        assert(magic == 0xC0FFEEC011001010)
+        total_size = struct.unpack('Q', binf.read(8))[0]
+        print("Module data total size =", total_size)
+        inited_size = struct.unpack('Q', binf.read(8))[0]
+        print("Module data initialized size =", inited_size)
+        data = binf.read(inited_size)
+        inited_size = int(math.ceil(inited_size/64.0))*64
+        if(total_size < inited_size):
+            uninited_size = 0
+        else:
+            uninited_size = total_size-inited_size
+        with open("tmp/mod.bin", 'wb') as boutf:
+            boutf.write(data)
+            # boutf.write(bytearray(total_size-inited_size))
+        if not no_data_source:
+            len_data = len(data)
+            if len_data % 8 != 0:
+                padding = (len_data//8 + 1) * 8 - len_data
+                data += bytearray(padding)
+                len_data = len(data)
+            with open(out_file_name, 'w') as outf:
+                outf.write(
+                    '#include <stdint.h>\nalignas(64) uint64_t {name}_data[]={{\n'.format(name=graph_name))
+                for i in range(len_data//8):
+                    val = struct.unpack('Q', data[i*8:(i+1)*8])[0]
+                    outf.write(hex(val)+",")
+                outf.write("};")
+        return (inited_size, uninited_size)
+
+
+def is_closure_wrapper(line):
+    if "_closure_" in line and "_0wrapper" in line:
+        return True
+    return False
+
+def process_source(src: str,
+                   graph_name: str,
+                   inited_size: int,
+                   uninited_size: int,
+                   out_file_name: str,
+                   replace_map: list = []):
+    src_header = '''
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+'''
+    new_header = src_header + \
+        '''
+extern int8_t {name}_data[{init_size}];
+static constexpr int8_t* __module_data = {name}_data;
+alignas(64) static int8_t __uninitialized_data[{size}UL];'''.format(
+            name=graph_name, size=uninited_size, init_size=inited_size)
+    new_lines = []
+    module_data_use = ")&__module_data["
+    module_data_use_end = "UL];"
+    need_remove = False
+    decl = ""
+    wrapper_func_suffix = "_0wrapper(void* __stream, int8_t* __restrict__ __module_data, generic_val* __restrict__ args) noexcept{"
+    main_entry_prefix = 'extern "C" void main_entry('
+    for index, line in enumerate(src.split("\n")):
+        if index == 0:
+            new_lines.append(new_header)
+            continue
+        if "_fptr)" in line:
+            continue
+        arg_remove = "(void* __stream, int8_t* __restrict__ __module_data, "
+
+        if (line.endswith(wrapper_func_suffix) or line.startswith(main_entry_prefix)) and "_closure_" not in line:
+            # remove wrappers
+            need_remove = True
+            continue
+        elif need_remove:
+            if line == "}":
+                # end of wrappers
+                need_remove = False
+            continue
+        elif arg_remove in line and not is_closure_wrapper(line):
+            line = line.replace(arg_remove, "(")
+
+            # update nonnull idx.
+            pattern = re.compile(r'noexcept __attribute__\(\(nonnull \((.+)\)\)\)')
+            attr_pattern = re.search(pattern, line)
+            if attr_pattern:
+                original_idx = attr_pattern.group(1)
+                new_idx = [int(x) - 2 for x in original_idx.split(',') if (int(x) - 2) > 0]
+                new_idx_str = ','.join(str(x) for x in new_idx)
+                line = line.replace(original_idx, new_idx_str)
+        elif line.startswith(
+                'extern "C" void __sc_init__(void* __stream, int8_t* __restrict__ __module_data)'
+        ):
+            if line[-1] == ';':
+                continue
+            else:
+                line = 'extern "C" void sc_init_{}() {{'.format(graph_name)
+        else:
+            idx = line.find(module_data_use)
+            if idx != -1:
+                number_idx_start = idx + len(module_data_use)
+                end_idx = line.find(module_data_use_end, number_idx_start)
+                assert (end_idx != -1)
+                offset_str = line[number_idx_start:end_idx]
+                offset = int(offset_str)
+                if offset >= inited_size:
+                    line = line[:idx] + ")&__uninitialized_data[" + \
+                        str(offset-inited_size)+module_data_use_end
+
+        to_replace = [
+            ("(__stream, __module_data, ", "("),
+            ("sc_aligned_malloc_fptr", "sc_aligned_malloc"),
+            ("sc_aligned_free_fptr", "sc_aligned_free"),
+            ("sc_parallel_call_cpu_with_env_fptr",
+             "sc_parallel_call_cpu_with_env"),
+            ("_fptr(", "("),
+            ("sc_get_thread_id", "omp_get_thread_num"),
+            ("sc_init_barrier", "sc_init_barrier_call"),
+            ("sc_arrive_at_barrier", "sc_arrive_at_barrier_call"),
+        ]
+        for arg_remove, arg_new in to_replace:
+            if arg_remove in line:
+                line = line.replace(arg_remove, arg_new)
+        for arg_remove, arg_new in replace_map:
+            if arg_remove in line:
+                line = line.replace(arg_remove, arg_new)
+        if line.startswith('extern "C" void ' + graph_name +
+                           '(') and line[-1] == '{':
+            decl = line[:-1]+';' + '\n\n' + \
+                'extern "C" void sc_init_{}();'.format(graph_name) + "\n"
+        if line.startswith('extern "C" bool '):
+            line = line.replace('extern "C" bool ', "static bool ")
+        new_lines.append(line)
+
+    with open(out_file_name, 'w') as f:
+        f.write("\n".join(new_lines))
+    return decl
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd128k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd128k.cpp
new file mode 100644
index 000000000..9c33f60e8
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd128k.cpp
@@ -0,0 +1,1010 @@
+
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+
+extern int8_t mlp_training_backward_128k_data[64];
+static constexpr int8_t* __module_data = mlp_training_backward_128k_data;
+alignas(64) static int8_t __uninitialized_data[0UL];
+
+static bool reorder__17(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool select_one_mul_reduce__41(uint16_t* __outs_0, uint16_t* __outs_1, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__18(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_select_one_cast_mul__36(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool reduce__6(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__19(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__26(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__27(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__35(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__28(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_select_one_cast_mul__38(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_reorder__40(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reduce__11(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__21(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__20(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__39(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__22(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__23(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__24(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__37(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__25(uint16_t* __outs_0, uint16_t* __ins_0);
+static void reorder__170_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void select_one_mul_reduce__410_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__180_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_select_one_cast_mul__360_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__190_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__260_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__270_closure_6_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__350_closure_7_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__280_closure_8_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_select_one_cast_mul__380_closure_9_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_reorder__400_closure_10_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__210_closure_11_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__200_closure_12_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__390_closure_13_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__220_closure_14_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__230_closure_15_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__240_closure_16_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__370_closure_17_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__250_closure_18_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__170_closure_0(uint64_t fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void select_one_mul_reduce__410_closure_1(uint64_t __itr_0_0outer, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__180_closure_2(uint64_t fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_select_one_cast_mul__360_closure_3(uint64_t fused_0m_o__n_o_39, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void reorder__190_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__260_closure_5(uint64_t _fuseiter_199, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__270_closure_6(uint64_t fused_0_fuseiter_201___fuseiter_202_43, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__350_closure_7(uint64_t fused_0m_o__n_o_44, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__280_closure_8(uint64_t fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_select_one_cast_mul__380_closure_9(uint64_t fused_0m_o__n_o_47, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_reorder__400_closure_10(uint64_t fused_0m_o__n_o_48, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__210_closure_11(uint64_t fused_0_fuseiter_235___fuseiter_236_49, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__200_closure_12(uint64_t _fuseiter_240_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__390_closure_13(uint64_t fused_0m_o__n_o_50, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__220_closure_14(uint64_t fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__230_closure_15(uint64_t _fuseiter_252, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__240_closure_16(uint64_t fused_0_fuseiter_254___fuseiter_255_54, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__370_closure_17(uint64_t fused_0m_o__n_o_55, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__250_closure_18(uint64_t fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+
+
+extern "C" void mlp_training_backward_128k(uint16_t* out_grad_bias2, uint16_t* out_grad_weight2, uint16_t* out_grad_bias1, uint16_t* out_grad_weight1, uint16_t* out_grad_bias0, uint16_t* out_grad_weight0, uint16_t* out_grad_input0, uint16_t* gradient, uint16_t* in_relu_output, uint16_t* data_input2, uint16_t* weight_input2, uint16_t* data_input1, uint16_t* weight_input1, uint16_t* data_input0, uint16_t* weight_input0){
+  int8_t* __rescheduled_0 = (int8_t*)sc_aligned_malloc(__stream, 369360896UL);
+  uint16_t* buffer_8 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__17(buffer_8, &weight_input2[0UL]);
+  uint16_t* buffer_9 = (uint16_t*)&__rescheduled_0[201326592UL];
+  select_one_mul_reduce__41(buffer_9, out_grad_bias2, in_relu_output, gradient);
+  uint16_t* buffer_11 = (uint16_t*)&__rescheduled_0[268435456UL];
+  reorder__18(buffer_11, &weight_input1[0UL]);
+  uint16_t* buffer_12 = (uint16_t*)&__rescheduled_0[268697600UL];
+  matmul_core_select_one_cast_mul__36(buffer_12, buffer_9, buffer_8, data_input2);
+  reduce__6(out_grad_bias1, buffer_12);
+  uint16_t* buffer_14 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__19(buffer_14, &weight_input0[0UL]);
+  uint16_t* buffer_15 = (uint16_t*)&__rescheduled_0[134217728UL];
+  reorder__26(buffer_15, &data_input2[0UL]);
+  uint16_t* buffer_16 = (uint16_t*)&__rescheduled_0[335806464UL];
+  reorder__27(buffer_16, buffer_9);
+  uint16_t* buffer_17 = (uint16_t*)&__rescheduled_0[201326592UL];
+  matmul_core_cast__35(buffer_17, buffer_15, buffer_16);
+  reorder__28(out_grad_weight2, buffer_17);
+  uint16_t* buffer_19 = (uint16_t*)&__rescheduled_0[134217728UL];
+  matmul_core_select_one_cast_mul__38(buffer_19, buffer_12, buffer_11, data_input1);
+  matmul_core_cast_reorder__40(out_grad_input0, buffer_19, buffer_14);
+  reduce__11(out_grad_bias0, buffer_19);
+  uint16_t* buffer_22 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__21(buffer_22, buffer_19);
+  uint16_t* buffer_23 = (uint16_t*)&__rescheduled_0[134217728UL];
+  reorder__20(buffer_23, &data_input0[0UL]);
+  uint16_t* buffer_24 = (uint16_t*)&__rescheduled_0[137625600UL];
+  matmul_core_cast__39(buffer_24, buffer_23, buffer_22);
+  reorder__22(out_grad_weight0, buffer_24);
+  uint16_t* buffer_26 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__23(buffer_26, &data_input1[0UL]);
+  uint16_t* buffer_27 = (uint16_t*)&__rescheduled_0[134217728UL];
+  reorder__24(buffer_27, buffer_12);
+  uint16_t* buffer_28 = (uint16_t*)&__rescheduled_0[201326592UL];
+  matmul_core_cast__37(buffer_28, buffer_26, buffer_27);
+  reorder__25(out_grad_weight1, buffer_28);
+  sc_aligned_free(__stream, __rescheduled_0);
+}
+
+static bool reorder__17(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs0[2UL];
+  __tempargs0[0UL] = __ins_0;
+  __tempargs0[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__170_closure_0_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs0);
+  return true;
+}
+
+static bool select_one_mul_reduce__41(uint16_t* __outs_0, uint16_t* __outs_1, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs1[3UL];
+  __tempargs1[0UL] = __ins_0;
+  __tempargs1[1UL] = __ins_1;
+  __tempargs1[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&select_one_mul_reduce__410_closure_1_0wrapper, __stream, __module_data, 0UL, 8192UL, 1UL, __tempargs1);
+  for (uint64_t _fuseiter_177 = 0UL; _fuseiter_177 < 128UL; _fuseiter_177 += 16UL) {
+    vec_f32x16 reduce__35;
+    reduce__35 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_176 = 0UL; _fuseiter_176 < 131072UL; _fuseiter_176 += 1UL) {
+      vec_f32x16 __cached_4;
+      __cached_4 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__outs_0[((_fuseiter_176 * 128UL) + _fuseiter_177)]))) << vec_u32x16(16UL)));
+      reduce__35 = (__cached_4 + reduce__35);
+    }
+    vec_u16x16 __cached_5;
+    __cached_5 = tobf16(reduce__35);
+    vec_u16x16::store(__cached_5, &__outs_1[_fuseiter_177]);
+  }
+  return true;
+}
+
+static bool reorder__18(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs2[2UL];
+  __tempargs2[0UL] = __ins_0;
+  __tempargs2[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__180_closure_2_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs2);
+  return true;
+}
+
+static bool matmul_core_select_one_cast_mul__36(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs3[4UL];
+  __tempargs3[0UL] = __ins_0;
+  __tempargs3[1UL] = __ins_1;
+  __tempargs3[2UL] = __ins_2;
+  __tempargs3[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_select_one_cast_mul__360_closure_3_0wrapper, __stream, __module_data, 0UL, 8192UL, 1UL, __tempargs3);
+  return true;
+}
+
+static bool reduce__6(uint16_t* __outs_0, uint16_t* __ins_0){
+  for (uint64_t _fuseiter_193 = 0UL; _fuseiter_193 < 256UL; _fuseiter_193 += 16UL) {
+    vec_f32x16 reduce__36;
+    reduce__36 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_192 = 0UL; _fuseiter_192 < 131072UL; _fuseiter_192 += 1UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((_fuseiter_192 * 256UL) + _fuseiter_193)]))) << vec_u32x16(16UL)));
+      reduce__36 = (__cached_0 + reduce__36);
+    }
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(reduce__36);
+    vec_u16x16::store(__cached_1, &__outs_0[_fuseiter_193]);
+  }
+  return true;
+}
+
+static bool reorder__19(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs4[2UL];
+  __tempargs4[0UL] = __ins_0;
+  __tempargs4[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__190_closure_4_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs4);
+  return true;
+}
+
+static bool reorder__26(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs5[2UL];
+  __tempargs5[0UL] = __ins_0;
+  __tempargs5[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__260_closure_5_0wrapper, __stream, __module_data, 0UL, 256UL, 8UL, __tempargs5);
+  return true;
+}
+
+static bool reorder__27(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs6[2UL];
+  __tempargs6[0UL] = __ins_0;
+  __tempargs6[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__270_closure_6_0wrapper, __stream, __module_data, 0UL, 8192UL, 1UL, __tempargs6);
+  return true;
+}
+
+static bool matmul_core_cast__35(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs7[3UL];
+  __tempargs7[0UL] = __ins_0;
+  __tempargs7[1UL] = __ins_1;
+  __tempargs7[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__350_closure_7_0wrapper, __stream, __module_data, 0UL, 32UL, 1UL, __tempargs7);
+  return true;
+}
+
+static bool reorder__28(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs8[2UL];
+  __tempargs8[0UL] = __ins_0;
+  __tempargs8[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__280_closure_8_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs8);
+  return true;
+}
+
+static bool matmul_core_select_one_cast_mul__38(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs9[4UL];
+  __tempargs9[0UL] = __ins_0;
+  __tempargs9[1UL] = __ins_1;
+  __tempargs9[2UL] = __ins_2;
+  __tempargs9[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_select_one_cast_mul__380_closure_9_0wrapper, __stream, __module_data, 0UL, 16384UL, 1UL, __tempargs9);
+  return true;
+}
+
+static bool matmul_core_cast_reorder__40(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs10[3UL];
+  __tempargs10[0UL] = __ins_0;
+  __tempargs10[1UL] = __ins_1;
+  __tempargs10[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_reorder__400_closure_10_0wrapper, __stream, __module_data, 0UL, 2048UL, 1UL, __tempargs10);
+  return true;
+}
+
+static bool reduce__11(uint16_t* __outs_0, uint16_t* __ins_0){
+  for (uint64_t _fuseiter_234 = 0UL; _fuseiter_234 < 512UL; _fuseiter_234 += 16UL) {
+    vec_f32x16 reduce__53;
+    reduce__53 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_233 = 0UL; _fuseiter_233 < 131072UL; _fuseiter_233 += 1UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((_fuseiter_233 * 512UL) + _fuseiter_234)]))) << vec_u32x16(16UL)));
+      reduce__53 = (__cached_0 + reduce__53);
+    }
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(reduce__53);
+    vec_u16x16::store(__cached_1, &__outs_0[_fuseiter_234]);
+  }
+  return true;
+}
+
+static bool reorder__21(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs11[2UL];
+  __tempargs11[0UL] = __ins_0;
+  __tempargs11[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__210_closure_11_0wrapper, __stream, __module_data, 0UL, 32768UL, 1UL, __tempargs11);
+  return true;
+}
+
+static bool reorder__20(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs12[2UL];
+  __tempargs12[0UL] = __ins_0;
+  __tempargs12[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__200_closure_12_0wrapper, __stream, __module_data, 0UL, 4096UL, 1UL, __tempargs12);
+  return true;
+}
+
+static bool matmul_core_cast__39(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs13[3UL];
+  __tempargs13[0UL] = __ins_0;
+  __tempargs13[1UL] = __ins_1;
+  __tempargs13[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__390_closure_13_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs13);
+  return true;
+}
+
+static bool reorder__22(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs14[2UL];
+  __tempargs14[0UL] = __ins_0;
+  __tempargs14[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__220_closure_14_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs14);
+  return true;
+}
+
+static bool reorder__23(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs15[2UL];
+  __tempargs15[0UL] = __ins_0;
+  __tempargs15[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__230_closure_15_0wrapper, __stream, __module_data, 0UL, 512UL, 8UL, __tempargs15);
+  return true;
+}
+
+static bool reorder__24(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs16[2UL];
+  __tempargs16[0UL] = __ins_0;
+  __tempargs16[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__240_closure_16_0wrapper, __stream, __module_data, 0UL, 16384UL, 1UL, __tempargs16);
+  return true;
+}
+
+static bool matmul_core_cast__37(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs17[3UL];
+  __tempargs17[0UL] = __ins_0;
+  __tempargs17[1UL] = __ins_1;
+  __tempargs17[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__370_closure_17_0wrapper, __stream, __module_data, 0UL, 128UL, 1UL, __tempargs17);
+  return true;
+}
+
+static bool reorder__25(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs18[2UL];
+  __tempargs18[0UL] = __ins_0;
+  __tempargs18[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__250_closure_18_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs18);
+  return true;
+}
+
+extern "C" void sc_init_mlp_training_backward_128k() {
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  void*& __sc_kernel_cache_9 = *(void**)(__module_data + 8);
+  void*& __sc_kernel_cache_10 = *(void**)(__module_data + 16);
+  void*& __sc_kernel_cache_11 = *(void**)(__module_data + 24);
+  void*& __sc_kernel_cache_12 = *(void**)(__module_data + 32);
+  __sc_kernel_cache = dnnl_brgemm_func(64, 64, 64, 128, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_9 = dnnl_brgemm_func(32, 32, 64, 131072, 32, 32, 64, 2048, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_10 = dnnl_brgemm_func(64, 64, 64, 256, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_11 = dnnl_brgemm_func(64, 16, 64, 512, 16, 16, 64, 1024, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_12 = dnnl_brgemm_func(13, 32, 64, 131072, 32, 32, 64, 2048, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+}
+
+static void reorder__170_closure_0(uint64_t fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner = 0UL; fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner < 256UL; fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner += 1UL) {
+    for (uint64_t _fuseiter_169 = 0UL; _fuseiter_169 < 2UL; _fuseiter_169 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 8192UL) * 16384UL) + ((((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 2048UL) % 4UL) * 4096UL) + ((((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 64UL) % 32UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) % 64UL) * 2UL) + _fuseiter_169))))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[(((((_fuseiter_169 + (((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 2048UL) % 4UL) * 64UL)) / 64UL) * 8192UL) + (((((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 8192UL) * 64UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 8192UL) * 64UL)) % 64UL) / 2UL) * 128UL) + (((((_fuseiter_169 + (((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 2048UL) % 4UL) * 64UL)) % 64UL) * 2UL) + ((((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_165___fuseiter_166_34___fuseiter_167_35___fuseiter_168_36_0inner) / 8192UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__170_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__170_closure_0(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void select_one_mul_reduce__410_closure_1(uint64_t __itr_0_0outer, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  for (uint64_t __itr_0_0inner = 0UL; __itr_0_0inner < 16UL; __itr_0_0inner += 1UL) {
+    uint16_t _select_one_buf_0_shr[16];
+    for (uint64_t _fuseiter171 = 0UL; _fuseiter171 < 128UL; _fuseiter171 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter171)]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_0 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_0)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_1[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter171)]))) << vec_u32x16(16UL)));
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_1 = (__cached_2 * __cached_1);
+      __cached_3 = tobf16(_arg_cache_1);
+      vec_u16x16::store(__cached_3, &__outs_0[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter171)]);
+    }
+  }
+}
+
+static void select_one_mul_reduce__410_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  select_one_mul_reduce__410_closure_1(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__180_closure_2(uint64_t fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner = 0UL; fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner < 4UL; fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner += 1UL) {
+    for (uint64_t _fuseiter_181 = 0UL; _fuseiter_181 < 64UL; _fuseiter_181 += 1UL) {
+      for (uint64_t _fuseiter_182 = 0UL; _fuseiter_182 < 2UL; _fuseiter_182 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 256UL) * 32768UL) + ((((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 32UL) % 8UL) * 4096UL) + (((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) % 32UL) * 128UL) + ((_fuseiter_181 * 2UL) + _fuseiter_182))))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((_fuseiter_182 + ((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 32UL) % 8UL) * 64UL)) / 64UL) * 16384UL) + ((((_fuseiter_181 + ((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 256UL) * 64UL)) / 64UL) * 4096UL) + (((((_fuseiter_181 + ((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 256UL) * 64UL)) % 64UL) / 2UL) * 128UL) + (((((_fuseiter_182 + ((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 32UL) % 8UL) * 64UL)) % 64UL) * 2UL) + (((_fuseiter_181 + ((((fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0outer * 4UL) + fused_0fused_0_fuseiter_178___fuseiter_179_37___fuseiter_180_38_0inner) / 256UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__180_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__180_closure_2(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_select_one_cast_mul__360_closure_3(uint64_t fused_0m_o__n_o_39, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_340_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache, &__ins_0[((fused_0m_o__n_o_39 / 4UL) * 8192UL)], &__ins_1[((fused_0m_o__n_o_39 % 4UL) * 8192UL)], &__origouts_340_shr[0UL], 2, __stream);
+  for (uint64_t _fuseiter183 = 0UL; _fuseiter183 < 64UL; _fuseiter183 += 1UL) {
+    for (uint64_t _fuseiter184 = 0UL; _fuseiter184 < 64UL; _fuseiter184 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[((((fused_0m_o__n_o_39 / 4UL) * 16384UL) + ((fused_0m_o__n_o_39 % 4UL) * 64UL)) + ((_fuseiter183 * 256UL) + _fuseiter184))]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_2 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_2)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = vec_f32x16::load(&__origouts_340_shr[((_fuseiter183 * 64UL) + _fuseiter184)]);
+      vec_f32x16 __cached_3;
+      __cached_3 = __cached_2;
+      vec_u16x16 __cached_4;
+      vec_f32x16 _arg_cache_3 = (__cached_3 * __cached_1);
+      __cached_4 = tobf16(_arg_cache_3);
+      vec_u16x16::store(__cached_4, &__outs_0[((((fused_0m_o__n_o_39 / 4UL) * 16384UL) + ((fused_0m_o__n_o_39 % 4UL) * 64UL)) + ((_fuseiter183 * 256UL) + _fuseiter184))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_select_one_cast_mul__360_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_select_one_cast_mul__360_closure_3(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void reorder__190_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner = 0UL; fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner < 256UL; fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner += 1UL) {
+    for (uint64_t _fuseiter_198 = 0UL; _fuseiter_198 < 2UL; _fuseiter_198 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) % 64UL) * 2UL) + _fuseiter_198)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_198 + (((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 64UL) % 8UL) * 2UL)) / 16UL) * 8192UL) + (((((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 512UL) * 64UL)) / 64UL) * 1024UL) + ((((((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 512UL) * 64UL)) % 64UL) / 2UL) * 32UL) + ((((_fuseiter_198 + (((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 64UL) % 8UL) * 2UL)) % 16UL) * 2UL) + ((((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_194___fuseiter_195_40___fuseiter_196_41___fuseiter_197_42_0inner) / 512UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__190_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__190_closure_4(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__260_closure_5(uint64_t _fuseiter_199, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_200 = 0UL; _fuseiter_200 < 131072UL; _fuseiter_200 += 32UL) {
+    vec_u16x32 row1_37;
+    vec_u16x32 row2_38;
+    vec_u16x32 row3_39;
+    vec_u16x32 row4_40;
+    vec_u16x32 row5_41;
+    vec_u16x32 row6_42;
+    vec_u16x32 row7_43;
+    vec_u16x32 row8_44;
+    vec_u16x32 row9_45;
+    vec_u16x32 row10_46;
+    vec_u16x32 row11_47;
+    vec_u16x32 row12_48;
+    vec_u16x32 row13_49;
+    vec_u16x32 row14_50;
+    vec_u16x32 row15_51;
+    vec_u16x32 row16_52;
+    vec_u16x8 __cached_0;
+    __cached_0 = vec_u16x8::load(&__ins_0[((_fuseiter_200 * 256UL) + _fuseiter_199)]);
+    row1_37 = vec_u16x32(__cached_0);
+    vec_u16x8 __cached_1;
+    __cached_1 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 8UL) * 256UL) + _fuseiter_199)]);
+    row1_37 = sc_select(65280, vec_u16x32(__cached_1), row1_37);
+    vec_u16x8 __cached_2;
+    __cached_2 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 16UL) * 256UL) + _fuseiter_199)]);
+    row1_37 = sc_select(16711680, vec_u16x32(__cached_2), row1_37);
+    vec_u16x8 __cached_3;
+    __cached_3 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 24UL) * 256UL) + _fuseiter_199)]);
+    row1_37 = sc_select(-16777216, vec_u16x32(__cached_3), row1_37);
+    vec_u16x8 __cached_4;
+    __cached_4 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 1UL) * 256UL) + _fuseiter_199)]);
+    row2_38 = vec_u16x32(__cached_4);
+    vec_u16x8 __cached_5;
+    __cached_5 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 9UL) * 256UL) + _fuseiter_199)]);
+    row2_38 = sc_select(65280, vec_u16x32(__cached_5), row2_38);
+    vec_u16x8 __cached_6;
+    __cached_6 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 17UL) * 256UL) + _fuseiter_199)]);
+    row2_38 = sc_select(16711680, vec_u16x32(__cached_6), row2_38);
+    vec_u16x8 __cached_7;
+    __cached_7 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 25UL) * 256UL) + _fuseiter_199)]);
+    row2_38 = sc_select(-16777216, vec_u16x32(__cached_7), row2_38);
+    vec_u16x8 __cached_8;
+    __cached_8 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 2UL) * 256UL) + _fuseiter_199)]);
+    row3_39 = vec_u16x32(__cached_8);
+    vec_u16x8 __cached_9;
+    __cached_9 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 10UL) * 256UL) + _fuseiter_199)]);
+    row3_39 = sc_select(65280, vec_u16x32(__cached_9), row3_39);
+    vec_u16x8 __cached_10;
+    __cached_10 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 18UL) * 256UL) + _fuseiter_199)]);
+    row3_39 = sc_select(16711680, vec_u16x32(__cached_10), row3_39);
+    vec_u16x8 __cached_11;
+    __cached_11 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 26UL) * 256UL) + _fuseiter_199)]);
+    row3_39 = sc_select(-16777216, vec_u16x32(__cached_11), row3_39);
+    vec_u16x8 __cached_12;
+    __cached_12 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 3UL) * 256UL) + _fuseiter_199)]);
+    row4_40 = vec_u16x32(__cached_12);
+    vec_u16x8 __cached_13;
+    __cached_13 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 11UL) * 256UL) + _fuseiter_199)]);
+    row4_40 = sc_select(65280, vec_u16x32(__cached_13), row4_40);
+    vec_u16x8 __cached_14;
+    __cached_14 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 19UL) * 256UL) + _fuseiter_199)]);
+    row4_40 = sc_select(16711680, vec_u16x32(__cached_14), row4_40);
+    vec_u16x8 __cached_15;
+    __cached_15 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 27UL) * 256UL) + _fuseiter_199)]);
+    row4_40 = sc_select(-16777216, vec_u16x32(__cached_15), row4_40);
+    vec_u16x8 __cached_16;
+    __cached_16 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 4UL) * 256UL) + _fuseiter_199)]);
+    row5_41 = vec_u16x32(__cached_16);
+    vec_u16x8 __cached_17;
+    __cached_17 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 12UL) * 256UL) + _fuseiter_199)]);
+    row5_41 = sc_select(65280, vec_u16x32(__cached_17), row5_41);
+    vec_u16x8 __cached_18;
+    __cached_18 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 20UL) * 256UL) + _fuseiter_199)]);
+    row5_41 = sc_select(16711680, vec_u16x32(__cached_18), row5_41);
+    vec_u16x8 __cached_19;
+    __cached_19 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 28UL) * 256UL) + _fuseiter_199)]);
+    row5_41 = sc_select(-16777216, vec_u16x32(__cached_19), row5_41);
+    vec_u16x8 __cached_20;
+    __cached_20 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 5UL) * 256UL) + _fuseiter_199)]);
+    row6_42 = vec_u16x32(__cached_20);
+    vec_u16x8 __cached_21;
+    __cached_21 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 13UL) * 256UL) + _fuseiter_199)]);
+    row6_42 = sc_select(65280, vec_u16x32(__cached_21), row6_42);
+    vec_u16x8 __cached_22;
+    __cached_22 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 21UL) * 256UL) + _fuseiter_199)]);
+    row6_42 = sc_select(16711680, vec_u16x32(__cached_22), row6_42);
+    vec_u16x8 __cached_23;
+    __cached_23 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 29UL) * 256UL) + _fuseiter_199)]);
+    row6_42 = sc_select(-16777216, vec_u16x32(__cached_23), row6_42);
+    vec_u16x8 __cached_24;
+    __cached_24 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 6UL) * 256UL) + _fuseiter_199)]);
+    row7_43 = vec_u16x32(__cached_24);
+    vec_u16x8 __cached_25;
+    __cached_25 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 14UL) * 256UL) + _fuseiter_199)]);
+    row7_43 = sc_select(65280, vec_u16x32(__cached_25), row7_43);
+    vec_u16x8 __cached_26;
+    __cached_26 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 22UL) * 256UL) + _fuseiter_199)]);
+    row7_43 = sc_select(16711680, vec_u16x32(__cached_26), row7_43);
+    vec_u16x8 __cached_27;
+    __cached_27 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 30UL) * 256UL) + _fuseiter_199)]);
+    row7_43 = sc_select(-16777216, vec_u16x32(__cached_27), row7_43);
+    vec_u16x8 __cached_28;
+    __cached_28 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 7UL) * 256UL) + _fuseiter_199)]);
+    row8_44 = vec_u16x32(__cached_28);
+    vec_u16x8 __cached_29;
+    __cached_29 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 15UL) * 256UL) + _fuseiter_199)]);
+    row8_44 = sc_select(65280, vec_u16x32(__cached_29), row8_44);
+    vec_u16x8 __cached_30;
+    __cached_30 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 23UL) * 256UL) + _fuseiter_199)]);
+    row8_44 = sc_select(16711680, vec_u16x32(__cached_30), row8_44);
+    vec_u16x8 __cached_31;
+    __cached_31 = vec_u16x8::load(&__ins_0[(((_fuseiter_200 + 31UL) * 256UL) + _fuseiter_199)]);
+    row8_44 = sc_select(-16777216, vec_u16x32(__cached_31), row8_44);
+    row9_45 = sc_unpack_low(row1_37, row2_38, 16);
+    row10_46 = sc_unpack_high(row1_37, row2_38, 16);
+    row11_47 = sc_unpack_low(row3_39, row4_40, 16);
+    row12_48 = sc_unpack_high(row3_39, row4_40, 16);
+    row13_49 = sc_unpack_low(row5_41, row6_42, 16);
+    row14_50 = sc_unpack_high(row5_41, row6_42, 16);
+    row15_51 = sc_unpack_low(row7_43, row8_44, 16);
+    row16_52 = sc_unpack_high(row7_43, row8_44, 16);
+    row1_37 = sc_unpack_low(row9_45, row11_47, 32);
+    row2_38 = sc_unpack_high(row9_45, row11_47, 32);
+    row3_39 = sc_unpack_low(row10_46, row12_48, 32);
+    row4_40 = sc_unpack_high(row10_46, row12_48, 32);
+    row5_41 = sc_unpack_low(row13_49, row15_51, 32);
+    row6_42 = sc_unpack_high(row13_49, row15_51, 32);
+    row7_43 = sc_unpack_low(row14_50, row16_52, 32);
+    row8_44 = sc_unpack_high(row14_50, row16_52, 32);
+    row9_45 = sc_unpack_low(row1_37, row5_41, 64);
+    row10_46 = sc_unpack_high(row1_37, row5_41, 64);
+    row11_47 = sc_unpack_low(row2_38, row6_42, 64);
+    row12_48 = sc_unpack_high(row2_38, row6_42, 64);
+    row13_49 = sc_unpack_low(row3_39, row7_43, 64);
+    row14_50 = sc_unpack_high(row3_39, row7_43, 64);
+    row15_51 = sc_unpack_low(row4_40, row8_44, 64);
+    row16_52 = sc_unpack_high(row4_40, row8_44, 64);
+    vec_u16x32 __cached_32;
+    __cached_32 = row9_45;
+    vec_u16x32::store(__cached_32, &__outs_0[((_fuseiter_199 * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_33;
+    __cached_33 = row10_46;
+    vec_u16x32::store(__cached_33, &__outs_0[(((_fuseiter_199 + 1UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_34;
+    __cached_34 = row11_47;
+    vec_u16x32::store(__cached_34, &__outs_0[(((_fuseiter_199 + 2UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_35;
+    __cached_35 = row12_48;
+    vec_u16x32::store(__cached_35, &__outs_0[(((_fuseiter_199 + 3UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_36;
+    __cached_36 = row13_49;
+    vec_u16x32::store(__cached_36, &__outs_0[(((_fuseiter_199 + 4UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_37;
+    __cached_37 = row14_50;
+    vec_u16x32::store(__cached_37, &__outs_0[(((_fuseiter_199 + 5UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_38;
+    __cached_38 = row15_51;
+    vec_u16x32::store(__cached_38, &__outs_0[(((_fuseiter_199 + 6UL) * 131072UL) + _fuseiter_200)]);
+    vec_u16x32 __cached_39;
+    __cached_39 = row16_52;
+    vec_u16x32::store(__cached_39, &__outs_0[(((_fuseiter_199 + 7UL) * 131072UL) + _fuseiter_200)]);
+  }
+}
+
+static void reorder__260_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__260_closure_5(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__270_closure_6(uint64_t fused_0_fuseiter_201___fuseiter_202_43, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_203 = 0UL; _fuseiter_203 < 32UL; _fuseiter_203 += 1UL) {
+    for (uint64_t _fuseiter_204 = 0UL; _fuseiter_204 < 32UL; _fuseiter_204 += 1UL) {
+      for (uint64_t _fuseiter_205 = 0UL; _fuseiter_205 < 2UL; _fuseiter_205 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_205 + (_fuseiter_203 * 2UL)) + ((fused_0_fuseiter_201___fuseiter_202_43 % 2048UL) * 64UL)) * 128UL) + (_fuseiter_204 + ((fused_0_fuseiter_201___fuseiter_202_43 / 2048UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((fused_0_fuseiter_201___fuseiter_202_43 / 2048UL) * 4194304UL) + (((fused_0_fuseiter_201___fuseiter_202_43 % 2048UL) * 2048UL) + ((_fuseiter_203 * 64UL) + ((_fuseiter_204 * 2UL) + _fuseiter_205))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__270_closure_6_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__270_closure_6(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__350_closure_7(uint64_t fused_0m_o__n_o_44, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_9 = *(void**)(__module_data + 8);
+  float* __origouts_350_shr = (float*)sc_thread_aligned_malloc(__stream, 4096UL);
+  dnnl_brgemm_call(__sc_kernel_cache_9, &__ins_0[((fused_0m_o__n_o_44 / 4UL) * 4194304UL)], &__ins_1[((fused_0m_o__n_o_44 % 4UL) * 4194304UL)], &__origouts_350_shr[0UL], 2048, __stream);
+  for (uint64_t _fuseiter208 = 0UL; _fuseiter208 < 32UL; _fuseiter208 += 1UL) {
+    for (uint64_t _fuseiter209 = 0UL; _fuseiter209 < 32UL; _fuseiter209 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_350_shr[((_fuseiter208 * 32UL) + _fuseiter209)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_44 / 4UL) * 4096UL) + ((fused_0m_o__n_o_44 % 4UL) * 1024UL)) + ((_fuseiter208 * 32UL) + _fuseiter209))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_350_shr);
+}
+
+static void matmul_core_cast__350_closure_7_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__350_closure_7(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__280_closure_8(uint64_t fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner = 0UL; fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner < 16UL; fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner += 1UL) {
+    for (uint64_t _fuseiter_214 = 0UL; _fuseiter_214 < 32UL; _fuseiter_214 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 128UL) * 4096UL) + ((((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 32UL) % 4UL) * 1024UL) + (((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) % 32UL) * 32UL) + _fuseiter_214)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_214 + (((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 32UL) % 4UL) * 32UL)) / 64UL) * 16384UL) + (((((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 128UL) * 32UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 128UL) * 32UL)) % 64UL) / 2UL) * 128UL) + ((((_fuseiter_214 + (((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 32UL) % 4UL) * 32UL)) % 64UL) * 2UL) + ((((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0outer * 16UL) + fused_0fused_0_fuseiter_211___fuseiter_212_45___fuseiter_213_46_0inner) / 128UL) * 32UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__280_closure_8_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__280_closure_8(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_select_one_cast_mul__380_closure_9(uint64_t fused_0m_o__n_o_47, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_10 = *(void**)(__module_data + 16);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_360_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_10, &__ins_0[((fused_0m_o__n_o_47 / 8UL) * 16384UL)], &__ins_1[((fused_0m_o__n_o_47 % 8UL) * 16384UL)], &__origouts_360_shr[0UL], 4, __stream);
+  for (uint64_t _fuseiter215 = 0UL; _fuseiter215 < 64UL; _fuseiter215 += 1UL) {
+    for (uint64_t _fuseiter216 = 0UL; _fuseiter216 < 64UL; _fuseiter216 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[((((fused_0m_o__n_o_47 / 8UL) * 32768UL) + ((fused_0m_o__n_o_47 % 8UL) * 64UL)) + ((_fuseiter215 * 512UL) + _fuseiter216))]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_4 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_4)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = vec_f32x16::load(&__origouts_360_shr[((_fuseiter215 * 64UL) + _fuseiter216)]);
+      vec_f32x16 __cached_3;
+      __cached_3 = __cached_2;
+      vec_u16x16 __cached_4;
+      vec_f32x16 _arg_cache_5 = (__cached_3 * __cached_1);
+      __cached_4 = tobf16(_arg_cache_5);
+      vec_u16x16::store(__cached_4, &__outs_0[((((fused_0m_o__n_o_47 / 8UL) * 32768UL) + ((fused_0m_o__n_o_47 % 8UL) * 64UL)) + ((_fuseiter215 * 512UL) + _fuseiter216))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_select_one_cast_mul__380_closure_9_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_select_one_cast_mul__380_closure_9(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_reorder__400_closure_10(uint64_t fused_0m_o__n_o_48, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_11 = *(void**)(__module_data + 24);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 4160UL);
+  float* __origouts_370_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_11, &__ins_0[(fused_0m_o__n_o_48 * 32768UL)], &__ins_1[0UL], &__origouts_370_shr[0UL], 8, __stream);
+  uint16_t* _cast_buf_0_shr = (uint16_t*)&__rescheduled_1[4096UL];
+  for (uint64_t _fuseiter226 = 0UL; _fuseiter226 < 64UL; _fuseiter226 += 1UL) {
+    vec_f32x16 __cached_0;
+    __cached_0 = vec_f32x16::load(&__origouts_370_shr[(_fuseiter226 * 16UL)]);
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(__cached_0);
+    vec_u16x16::store(__cached_1, &_cast_buf_0_shr[0UL]);
+    for (uint64_t _fuseiter_232 = 0UL; _fuseiter_232 < 16UL; _fuseiter_232 += 1UL) {
+      if (((_fuseiter_232 < 13UL) && ((_fuseiter226 + (fused_0m_o__n_o_48 * 64UL)) < 131072UL))) {
+        uint16_t __cached_2;
+        __cached_2 = _cast_buf_0_shr[_fuseiter_232];
+        uint16_t __cached_3;
+        __cached_3 = __cached_2;
+        __outs_0[(((_fuseiter226 + (fused_0m_o__n_o_48 * 64UL)) * 13UL) + _fuseiter_232)] = __cached_3;
+      }
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_reorder__400_closure_10_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_reorder__400_closure_10(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__210_closure_11(uint64_t fused_0_fuseiter_235___fuseiter_236_49, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_237 = 0UL; _fuseiter_237 < 32UL; _fuseiter_237 += 1UL) {
+    for (uint64_t _fuseiter_238 = 0UL; _fuseiter_238 < 32UL; _fuseiter_238 += 1UL) {
+      for (uint64_t _fuseiter_239 = 0UL; _fuseiter_239 < 2UL; _fuseiter_239 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_239 + (_fuseiter_237 * 2UL)) + ((fused_0_fuseiter_235___fuseiter_236_49 % 2048UL) * 64UL)) * 512UL) + (_fuseiter_238 + ((fused_0_fuseiter_235___fuseiter_236_49 / 2048UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((fused_0_fuseiter_235___fuseiter_236_49 / 2048UL) * 4194304UL) + (((fused_0_fuseiter_235___fuseiter_236_49 % 2048UL) * 2048UL) + ((_fuseiter_237 * 64UL) + ((_fuseiter_238 * 2UL) + _fuseiter_239))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__210_closure_11_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__210_closure_11(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__200_closure_12(uint64_t _fuseiter_240_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_240_0inner = 0UL; _fuseiter_240_0inner < 32UL; _fuseiter_240_0inner += 1UL) {
+    for (uint64_t _fuseiter_241 = 0UL; _fuseiter_241 < 13UL; _fuseiter_241 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[((((_fuseiter_240_0outer * 32UL) + _fuseiter_240_0inner) * 13UL) + _fuseiter_241)];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((_fuseiter_241 * 131072UL) + ((_fuseiter_240_0outer * 32UL) + _fuseiter_240_0inner))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__200_closure_12_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__200_closure_12(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__390_closure_13(uint64_t fused_0m_o__n_o_50, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_12 = *(void**)(__module_data + 32);
+  float* __origouts_380_shr = (float*)sc_thread_aligned_malloc(__stream, 1664UL);
+  dnnl_brgemm_call(__sc_kernel_cache_12, &__ins_0[((fused_0m_o__n_o_50 / 16UL) * 1703936UL)], &__ins_1[((fused_0m_o__n_o_50 % 16UL) * 4194304UL)], &__origouts_380_shr[0UL], 2048, __stream);
+  for (uint64_t _fuseiter244 = 0UL; _fuseiter244 < 13UL; _fuseiter244 += 1UL) {
+    for (uint64_t _fuseiter245 = 0UL; _fuseiter245 < 32UL; _fuseiter245 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_380_shr[((_fuseiter244 * 32UL) + _fuseiter245)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_50 / 16UL) * 6656UL) + ((fused_0m_o__n_o_50 % 16UL) * 416UL)) + ((_fuseiter244 * 32UL) + _fuseiter245))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_380_shr);
+}
+
+static void matmul_core_cast__390_closure_13_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__390_closure_13(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__220_closure_14(uint64_t fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner = 0UL; fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner < 256UL; fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner += 1UL) {
+    for (uint64_t _fuseiter_251 = 0UL; _fuseiter_251 < 2UL; _fuseiter_251 += 1UL) {
+      if (((((_fuseiter_251 + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 2UL)) < 16UL) && ((_fuseiter_251 + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 2UL)) < 13UL)) && (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 512UL) * 64UL)) < 512UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_251 + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 2UL)) / 13UL) * 6656UL) + (((((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 512UL) * 64UL)) / 32UL) * 416UL) + ((((_fuseiter_251 + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 2UL)) % 13UL) * 32UL) + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 512UL) * 64UL)) % 32UL))))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) % 64UL) * 2UL) + _fuseiter_251)))] = __cached_1;
+      } else {
+        uint16_t __cached_2;
+        __cached_2 = 0UL;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_247___fuseiter_248_51___fuseiter_249_52___fuseiter_250_53_0inner) % 64UL) * 2UL) + _fuseiter_251)))] = __cached_2;
+      }
+    }
+  }
+}
+
+static void reorder__220_closure_14_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__220_closure_14(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__230_closure_15(uint64_t _fuseiter_252, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_253 = 0UL; _fuseiter_253 < 131072UL; _fuseiter_253 += 32UL) {
+    vec_u16x32 row1_54;
+    vec_u16x32 row2_55;
+    vec_u16x32 row3_56;
+    vec_u16x32 row4_57;
+    vec_u16x32 row5_58;
+    vec_u16x32 row6_59;
+    vec_u16x32 row7_60;
+    vec_u16x32 row8_61;
+    vec_u16x32 row9_62;
+    vec_u16x32 row10_63;
+    vec_u16x32 row11_64;
+    vec_u16x32 row12_65;
+    vec_u16x32 row13_66;
+    vec_u16x32 row14_67;
+    vec_u16x32 row15_68;
+    vec_u16x32 row16_69;
+    vec_u16x8 __cached_0;
+    __cached_0 = vec_u16x8::load(&__ins_0[((_fuseiter_253 * 512UL) + _fuseiter_252)]);
+    row1_54 = vec_u16x32(__cached_0);
+    vec_u16x8 __cached_1;
+    __cached_1 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 8UL) * 512UL) + _fuseiter_252)]);
+    row1_54 = sc_select(65280, vec_u16x32(__cached_1), row1_54);
+    vec_u16x8 __cached_2;
+    __cached_2 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 16UL) * 512UL) + _fuseiter_252)]);
+    row1_54 = sc_select(16711680, vec_u16x32(__cached_2), row1_54);
+    vec_u16x8 __cached_3;
+    __cached_3 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 24UL) * 512UL) + _fuseiter_252)]);
+    row1_54 = sc_select(-16777216, vec_u16x32(__cached_3), row1_54);
+    vec_u16x8 __cached_4;
+    __cached_4 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 1UL) * 512UL) + _fuseiter_252)]);
+    row2_55 = vec_u16x32(__cached_4);
+    vec_u16x8 __cached_5;
+    __cached_5 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 9UL) * 512UL) + _fuseiter_252)]);
+    row2_55 = sc_select(65280, vec_u16x32(__cached_5), row2_55);
+    vec_u16x8 __cached_6;
+    __cached_6 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 17UL) * 512UL) + _fuseiter_252)]);
+    row2_55 = sc_select(16711680, vec_u16x32(__cached_6), row2_55);
+    vec_u16x8 __cached_7;
+    __cached_7 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 25UL) * 512UL) + _fuseiter_252)]);
+    row2_55 = sc_select(-16777216, vec_u16x32(__cached_7), row2_55);
+    vec_u16x8 __cached_8;
+    __cached_8 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 2UL) * 512UL) + _fuseiter_252)]);
+    row3_56 = vec_u16x32(__cached_8);
+    vec_u16x8 __cached_9;
+    __cached_9 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 10UL) * 512UL) + _fuseiter_252)]);
+    row3_56 = sc_select(65280, vec_u16x32(__cached_9), row3_56);
+    vec_u16x8 __cached_10;
+    __cached_10 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 18UL) * 512UL) + _fuseiter_252)]);
+    row3_56 = sc_select(16711680, vec_u16x32(__cached_10), row3_56);
+    vec_u16x8 __cached_11;
+    __cached_11 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 26UL) * 512UL) + _fuseiter_252)]);
+    row3_56 = sc_select(-16777216, vec_u16x32(__cached_11), row3_56);
+    vec_u16x8 __cached_12;
+    __cached_12 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 3UL) * 512UL) + _fuseiter_252)]);
+    row4_57 = vec_u16x32(__cached_12);
+    vec_u16x8 __cached_13;
+    __cached_13 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 11UL) * 512UL) + _fuseiter_252)]);
+    row4_57 = sc_select(65280, vec_u16x32(__cached_13), row4_57);
+    vec_u16x8 __cached_14;
+    __cached_14 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 19UL) * 512UL) + _fuseiter_252)]);
+    row4_57 = sc_select(16711680, vec_u16x32(__cached_14), row4_57);
+    vec_u16x8 __cached_15;
+    __cached_15 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 27UL) * 512UL) + _fuseiter_252)]);
+    row4_57 = sc_select(-16777216, vec_u16x32(__cached_15), row4_57);
+    vec_u16x8 __cached_16;
+    __cached_16 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 4UL) * 512UL) + _fuseiter_252)]);
+    row5_58 = vec_u16x32(__cached_16);
+    vec_u16x8 __cached_17;
+    __cached_17 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 12UL) * 512UL) + _fuseiter_252)]);
+    row5_58 = sc_select(65280, vec_u16x32(__cached_17), row5_58);
+    vec_u16x8 __cached_18;
+    __cached_18 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 20UL) * 512UL) + _fuseiter_252)]);
+    row5_58 = sc_select(16711680, vec_u16x32(__cached_18), row5_58);
+    vec_u16x8 __cached_19;
+    __cached_19 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 28UL) * 512UL) + _fuseiter_252)]);
+    row5_58 = sc_select(-16777216, vec_u16x32(__cached_19), row5_58);
+    vec_u16x8 __cached_20;
+    __cached_20 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 5UL) * 512UL) + _fuseiter_252)]);
+    row6_59 = vec_u16x32(__cached_20);
+    vec_u16x8 __cached_21;
+    __cached_21 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 13UL) * 512UL) + _fuseiter_252)]);
+    row6_59 = sc_select(65280, vec_u16x32(__cached_21), row6_59);
+    vec_u16x8 __cached_22;
+    __cached_22 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 21UL) * 512UL) + _fuseiter_252)]);
+    row6_59 = sc_select(16711680, vec_u16x32(__cached_22), row6_59);
+    vec_u16x8 __cached_23;
+    __cached_23 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 29UL) * 512UL) + _fuseiter_252)]);
+    row6_59 = sc_select(-16777216, vec_u16x32(__cached_23), row6_59);
+    vec_u16x8 __cached_24;
+    __cached_24 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 6UL) * 512UL) + _fuseiter_252)]);
+    row7_60 = vec_u16x32(__cached_24);
+    vec_u16x8 __cached_25;
+    __cached_25 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 14UL) * 512UL) + _fuseiter_252)]);
+    row7_60 = sc_select(65280, vec_u16x32(__cached_25), row7_60);
+    vec_u16x8 __cached_26;
+    __cached_26 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 22UL) * 512UL) + _fuseiter_252)]);
+    row7_60 = sc_select(16711680, vec_u16x32(__cached_26), row7_60);
+    vec_u16x8 __cached_27;
+    __cached_27 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 30UL) * 512UL) + _fuseiter_252)]);
+    row7_60 = sc_select(-16777216, vec_u16x32(__cached_27), row7_60);
+    vec_u16x8 __cached_28;
+    __cached_28 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 7UL) * 512UL) + _fuseiter_252)]);
+    row8_61 = vec_u16x32(__cached_28);
+    vec_u16x8 __cached_29;
+    __cached_29 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 15UL) * 512UL) + _fuseiter_252)]);
+    row8_61 = sc_select(65280, vec_u16x32(__cached_29), row8_61);
+    vec_u16x8 __cached_30;
+    __cached_30 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 23UL) * 512UL) + _fuseiter_252)]);
+    row8_61 = sc_select(16711680, vec_u16x32(__cached_30), row8_61);
+    vec_u16x8 __cached_31;
+    __cached_31 = vec_u16x8::load(&__ins_0[(((_fuseiter_253 + 31UL) * 512UL) + _fuseiter_252)]);
+    row8_61 = sc_select(-16777216, vec_u16x32(__cached_31), row8_61);
+    row9_62 = sc_unpack_low(row1_54, row2_55, 16);
+    row10_63 = sc_unpack_high(row1_54, row2_55, 16);
+    row11_64 = sc_unpack_low(row3_56, row4_57, 16);
+    row12_65 = sc_unpack_high(row3_56, row4_57, 16);
+    row13_66 = sc_unpack_low(row5_58, row6_59, 16);
+    row14_67 = sc_unpack_high(row5_58, row6_59, 16);
+    row15_68 = sc_unpack_low(row7_60, row8_61, 16);
+    row16_69 = sc_unpack_high(row7_60, row8_61, 16);
+    row1_54 = sc_unpack_low(row9_62, row11_64, 32);
+    row2_55 = sc_unpack_high(row9_62, row11_64, 32);
+    row3_56 = sc_unpack_low(row10_63, row12_65, 32);
+    row4_57 = sc_unpack_high(row10_63, row12_65, 32);
+    row5_58 = sc_unpack_low(row13_66, row15_68, 32);
+    row6_59 = sc_unpack_high(row13_66, row15_68, 32);
+    row7_60 = sc_unpack_low(row14_67, row16_69, 32);
+    row8_61 = sc_unpack_high(row14_67, row16_69, 32);
+    row9_62 = sc_unpack_low(row1_54, row5_58, 64);
+    row10_63 = sc_unpack_high(row1_54, row5_58, 64);
+    row11_64 = sc_unpack_low(row2_55, row6_59, 64);
+    row12_65 = sc_unpack_high(row2_55, row6_59, 64);
+    row13_66 = sc_unpack_low(row3_56, row7_60, 64);
+    row14_67 = sc_unpack_high(row3_56, row7_60, 64);
+    row15_68 = sc_unpack_low(row4_57, row8_61, 64);
+    row16_69 = sc_unpack_high(row4_57, row8_61, 64);
+    vec_u16x32 __cached_32;
+    __cached_32 = row9_62;
+    vec_u16x32::store(__cached_32, &__outs_0[((_fuseiter_252 * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_33;
+    __cached_33 = row10_63;
+    vec_u16x32::store(__cached_33, &__outs_0[(((_fuseiter_252 + 1UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_34;
+    __cached_34 = row11_64;
+    vec_u16x32::store(__cached_34, &__outs_0[(((_fuseiter_252 + 2UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_35;
+    __cached_35 = row12_65;
+    vec_u16x32::store(__cached_35, &__outs_0[(((_fuseiter_252 + 3UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_36;
+    __cached_36 = row13_66;
+    vec_u16x32::store(__cached_36, &__outs_0[(((_fuseiter_252 + 4UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_37;
+    __cached_37 = row14_67;
+    vec_u16x32::store(__cached_37, &__outs_0[(((_fuseiter_252 + 5UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_38;
+    __cached_38 = row15_68;
+    vec_u16x32::store(__cached_38, &__outs_0[(((_fuseiter_252 + 6UL) * 131072UL) + _fuseiter_253)]);
+    vec_u16x32 __cached_39;
+    __cached_39 = row16_69;
+    vec_u16x32::store(__cached_39, &__outs_0[(((_fuseiter_252 + 7UL) * 131072UL) + _fuseiter_253)]);
+  }
+}
+
+static void reorder__230_closure_15_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__230_closure_15(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__240_closure_16(uint64_t fused_0_fuseiter_254___fuseiter_255_54, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_256 = 0UL; _fuseiter_256 < 32UL; _fuseiter_256 += 1UL) {
+    for (uint64_t _fuseiter_257 = 0UL; _fuseiter_257 < 32UL; _fuseiter_257 += 1UL) {
+      for (uint64_t _fuseiter_258 = 0UL; _fuseiter_258 < 2UL; _fuseiter_258 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_258 + (_fuseiter_256 * 2UL)) + ((fused_0_fuseiter_254___fuseiter_255_54 % 2048UL) * 64UL)) * 256UL) + (_fuseiter_257 + ((fused_0_fuseiter_254___fuseiter_255_54 / 2048UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((fused_0_fuseiter_254___fuseiter_255_54 / 2048UL) * 4194304UL) + (((fused_0_fuseiter_254___fuseiter_255_54 % 2048UL) * 2048UL) + ((_fuseiter_256 * 64UL) + ((_fuseiter_257 * 2UL) + _fuseiter_258))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__240_closure_16_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__240_closure_16(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__370_closure_17(uint64_t fused_0m_o__n_o_55, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_9 = *(void**)(__module_data + 8);
+  float* __origouts_390_shr = (float*)sc_thread_aligned_malloc(__stream, 4096UL);
+  dnnl_brgemm_call(__sc_kernel_cache_9, &__ins_0[((fused_0m_o__n_o_55 / 8UL) * 4194304UL)], &__ins_1[((fused_0m_o__n_o_55 % 8UL) * 4194304UL)], &__origouts_390_shr[0UL], 2048, __stream);
+  for (uint64_t _fuseiter261 = 0UL; _fuseiter261 < 32UL; _fuseiter261 += 1UL) {
+    for (uint64_t _fuseiter262 = 0UL; _fuseiter262 < 32UL; _fuseiter262 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_390_shr[((_fuseiter261 * 32UL) + _fuseiter262)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_55 / 8UL) * 8192UL) + ((fused_0m_o__n_o_55 % 8UL) * 1024UL)) + ((_fuseiter261 * 32UL) + _fuseiter262))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_390_shr);
+}
+
+static void matmul_core_cast__370_closure_17_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__370_closure_17(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__250_closure_18(uint64_t fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner = 0UL; fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner < 16UL; fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner += 1UL) {
+    for (uint64_t _fuseiter_267 = 0UL; _fuseiter_267 < 32UL; _fuseiter_267 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 256UL) * 8192UL) + ((((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 32UL) % 8UL) * 1024UL) + (((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) % 32UL) * 32UL) + _fuseiter_267)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_267 + (((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 32UL) % 8UL) * 32UL)) / 64UL) * 32768UL) + (((((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 256UL) * 32UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 256UL) * 32UL)) % 64UL) / 2UL) * 128UL) + ((((_fuseiter_267 + (((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 32UL) % 8UL) * 32UL)) % 64UL) * 2UL) + ((((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0outer * 16UL) + fused_0fused_0_fuseiter_264___fuseiter_265_56___fuseiter_266_57_0inner) / 256UL) * 32UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__250_closure_18_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__250_closure_18(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd4k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd4k.cpp
new file mode 100644
index 000000000..f43c37dff
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd4k.cpp
@@ -0,0 +1,1010 @@
+
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+
+extern int8_t mlp_training_backward_4k_data[64];
+static constexpr int8_t* __module_data = mlp_training_backward_4k_data;
+alignas(64) static int8_t __uninitialized_data[0UL];
+
+static bool reorder__17(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool select_one_mul_reduce__41(uint16_t* __outs_0, uint16_t* __outs_1, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__18(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_select_one_cast_mul__36(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool reduce__6(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__19(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__26(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__27(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__35(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__28(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_select_one_cast_mul__38(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_reorder__40(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reduce__11(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__21(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__20(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__39(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__22(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__23(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool reorder__24(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast__37(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1);
+static bool reorder__25(uint16_t* __outs_0, uint16_t* __ins_0);
+static void reorder__170_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void select_one_mul_reduce__410_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__180_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_select_one_cast_mul__360_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__190_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__260_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__270_closure_6_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__350_closure_7_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__280_closure_8_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_select_one_cast_mul__380_closure_9_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_reorder__400_closure_10_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__210_closure_11_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__200_closure_12_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__390_closure_13_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__220_closure_14_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__230_closure_15_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__240_closure_16_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast__370_closure_17_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__250_closure_18_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__170_closure_0(uint64_t fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void select_one_mul_reduce__410_closure_1(uint64_t __itr_0_0outer, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__180_closure_2(uint64_t fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_select_one_cast_mul__360_closure_3(uint64_t fused_0m_o__n_o_10, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void reorder__190_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__260_closure_5(uint64_t _fuseiter_65, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__270_closure_6(uint64_t fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__350_closure_7(uint64_t fused_0m_o__n_o_16, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__280_closure_8(uint64_t fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_select_one_cast_mul__380_closure_9(uint64_t fused_0m_o__n_o_19, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_reorder__400_closure_10(uint64_t fused_0m_o__n_o_20, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__210_closure_11(uint64_t fused_0_fuseiter_101___fuseiter_102_21, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__200_closure_12(uint64_t _fuseiter_106_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__390_closure_13(uint64_t fused_0m_o__n_o_22, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__220_closure_14(uint64_t fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__230_closure_15(uint64_t _fuseiter_118, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__240_closure_16(uint64_t fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast__370_closure_17(uint64_t fused_0m_o__n_o_28, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0);
+static void reorder__250_closure_18(uint64_t fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+
+
+extern "C" void mlp_training_backward_4k(uint16_t* out_grad_bias2, uint16_t* out_grad_weight2, uint16_t* out_grad_bias1, uint16_t* out_grad_weight1, uint16_t* out_grad_bias0, uint16_t* out_grad_weight0, uint16_t* out_grad_input0, uint16_t* gradient, uint16_t* in_relu_output, uint16_t* data_input2, uint16_t* weight_input2, uint16_t* data_input1, uint16_t* weight_input1, uint16_t* data_input0, uint16_t* weight_input0){
+  int8_t* __rescheduled_0 = (int8_t*)sc_aligned_malloc(__stream, 11796480UL);
+  uint16_t* buffer_8 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__17(buffer_8, &weight_input2[0UL]);
+  uint16_t* buffer_9 = (uint16_t*)&__rescheduled_0[6291456UL];
+  select_one_mul_reduce__41(buffer_9, out_grad_bias2, in_relu_output, gradient);
+  uint16_t* buffer_11 = (uint16_t*)&__rescheduled_0[8388608UL];
+  reorder__18(buffer_11, &weight_input1[0UL]);
+  uint16_t* buffer_12 = (uint16_t*)&__rescheduled_0[8650752UL];
+  matmul_core_select_one_cast_mul__36(buffer_12, buffer_9, buffer_8, data_input2);
+  reduce__6(out_grad_bias1, buffer_12);
+  uint16_t* buffer_14 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__19(buffer_14, &weight_input0[0UL]);
+  uint16_t* buffer_15 = (uint16_t*)&__rescheduled_0[4194304UL];
+  reorder__26(buffer_15, &data_input2[0UL]);
+  uint16_t* buffer_16 = (uint16_t*)&__rescheduled_0[10747904UL];
+  reorder__27(buffer_16, buffer_9);
+  uint16_t* buffer_17 = (uint16_t*)&__rescheduled_0[6291456UL];
+  matmul_core_cast__35(buffer_17, buffer_15, buffer_16);
+  reorder__28(out_grad_weight2, buffer_17);
+  uint16_t* buffer_19 = (uint16_t*)&__rescheduled_0[4194304UL];
+  matmul_core_select_one_cast_mul__38(buffer_19, buffer_12, buffer_11, data_input1);
+  matmul_core_cast_reorder__40(out_grad_input0, buffer_19, buffer_14);
+  reduce__11(out_grad_bias0, buffer_19);
+  uint16_t* buffer_22 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__21(buffer_22, buffer_19);
+  uint16_t* buffer_23 = (uint16_t*)&__rescheduled_0[4194304UL];
+  reorder__20(buffer_23, &data_input0[0UL]);
+  uint16_t* buffer_24 = (uint16_t*)&__rescheduled_0[4300800UL];
+  matmul_core_cast__39(buffer_24, buffer_23, buffer_22);
+  reorder__22(out_grad_weight0, buffer_24);
+  uint16_t* buffer_26 = (uint16_t*)&__rescheduled_0[0UL];
+  reorder__23(buffer_26, &data_input1[0UL]);
+  uint16_t* buffer_27 = (uint16_t*)&__rescheduled_0[4194304UL];
+  reorder__24(buffer_27, buffer_12);
+  uint16_t* buffer_28 = (uint16_t*)&__rescheduled_0[6291456UL];
+  matmul_core_cast__37(buffer_28, buffer_26, buffer_27);
+  reorder__25(out_grad_weight1, buffer_28);
+  sc_aligned_free(__stream, __rescheduled_0);
+}
+
+static bool reorder__17(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs0[2UL];
+  __tempargs0[0UL] = __ins_0;
+  __tempargs0[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__170_closure_0_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs0);
+  return true;
+}
+
+static bool select_one_mul_reduce__41(uint16_t* __outs_0, uint16_t* __outs_1, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs1[3UL];
+  __tempargs1[0UL] = __ins_0;
+  __tempargs1[1UL] = __ins_1;
+  __tempargs1[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&select_one_mul_reduce__410_closure_1_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs1);
+  for (uint64_t _fuseiter_43 = 0UL; _fuseiter_43 < 128UL; _fuseiter_43 += 16UL) {
+    vec_f32x16 reduce__0;
+    reduce__0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_42 = 0UL; _fuseiter_42 < 4096UL; _fuseiter_42 += 1UL) {
+      vec_f32x16 __cached_4;
+      __cached_4 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__outs_0[((_fuseiter_42 * 128UL) + _fuseiter_43)]))) << vec_u32x16(16UL)));
+      reduce__0 = (__cached_4 + reduce__0);
+    }
+    vec_u16x16 __cached_5;
+    __cached_5 = tobf16(reduce__0);
+    vec_u16x16::store(__cached_5, &__outs_1[_fuseiter_43]);
+  }
+  return true;
+}
+
+static bool reorder__18(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs2[2UL];
+  __tempargs2[0UL] = __ins_0;
+  __tempargs2[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__180_closure_2_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs2);
+  return true;
+}
+
+static bool matmul_core_select_one_cast_mul__36(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs3[4UL];
+  __tempargs3[0UL] = __ins_0;
+  __tempargs3[1UL] = __ins_1;
+  __tempargs3[2UL] = __ins_2;
+  __tempargs3[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_select_one_cast_mul__360_closure_3_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs3);
+  return true;
+}
+
+static bool reduce__6(uint16_t* __outs_0, uint16_t* __ins_0){
+  for (uint64_t _fuseiter_59 = 0UL; _fuseiter_59 < 256UL; _fuseiter_59 += 16UL) {
+    vec_f32x16 reduce__1;
+    reduce__1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_58 = 0UL; _fuseiter_58 < 4096UL; _fuseiter_58 += 1UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((_fuseiter_58 * 256UL) + _fuseiter_59)]))) << vec_u32x16(16UL)));
+      reduce__1 = (__cached_0 + reduce__1);
+    }
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(reduce__1);
+    vec_u16x16::store(__cached_1, &__outs_0[_fuseiter_59]);
+  }
+  return true;
+}
+
+static bool reorder__19(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs4[2UL];
+  __tempargs4[0UL] = __ins_0;
+  __tempargs4[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__190_closure_4_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs4);
+  return true;
+}
+
+static bool reorder__26(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs5[2UL];
+  __tempargs5[0UL] = __ins_0;
+  __tempargs5[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__260_closure_5_0wrapper, __stream, __module_data, 0UL, 256UL, 8UL, __tempargs5);
+  return true;
+}
+
+static bool reorder__27(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs6[2UL];
+  __tempargs6[0UL] = __ins_0;
+  __tempargs6[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__270_closure_6_0wrapper, __stream, __module_data, 0UL, 1024UL, 1UL, __tempargs6);
+  return true;
+}
+
+static bool matmul_core_cast__35(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs7[3UL];
+  __tempargs7[0UL] = __ins_0;
+  __tempargs7[1UL] = __ins_1;
+  __tempargs7[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__350_closure_7_0wrapper, __stream, __module_data, 0UL, 32UL, 1UL, __tempargs7);
+  return true;
+}
+
+static bool reorder__28(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs8[2UL];
+  __tempargs8[0UL] = __ins_0;
+  __tempargs8[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__280_closure_8_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs8);
+  return true;
+}
+
+static bool matmul_core_select_one_cast_mul__38(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs9[4UL];
+  __tempargs9[0UL] = __ins_0;
+  __tempargs9[1UL] = __ins_1;
+  __tempargs9[2UL] = __ins_2;
+  __tempargs9[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_select_one_cast_mul__380_closure_9_0wrapper, __stream, __module_data, 0UL, 512UL, 1UL, __tempargs9);
+  return true;
+}
+
+static bool matmul_core_cast_reorder__40(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs10[3UL];
+  __tempargs10[0UL] = __ins_0;
+  __tempargs10[1UL] = __ins_1;
+  __tempargs10[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_reorder__400_closure_10_0wrapper, __stream, __module_data, 0UL, 128UL, 1UL, __tempargs10);
+  return true;
+}
+
+static bool reduce__11(uint16_t* __outs_0, uint16_t* __ins_0){
+  for (uint64_t _fuseiter_100 = 0UL; _fuseiter_100 < 512UL; _fuseiter_100 += 16UL) {
+    vec_f32x16 reduce__18;
+    reduce__18 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16(0UL))) << vec_u32x16(16UL)));
+    for (uint64_t _fuseiter_99 = 0UL; _fuseiter_99 < 4096UL; _fuseiter_99 += 1UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((_fuseiter_99 * 512UL) + _fuseiter_100)]))) << vec_u32x16(16UL)));
+      reduce__18 = (__cached_0 + reduce__18);
+    }
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(reduce__18);
+    vec_u16x16::store(__cached_1, &__outs_0[_fuseiter_100]);
+  }
+  return true;
+}
+
+static bool reorder__21(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs11[2UL];
+  __tempargs11[0UL] = __ins_0;
+  __tempargs11[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__210_closure_11_0wrapper, __stream, __module_data, 0UL, 1024UL, 1UL, __tempargs11);
+  return true;
+}
+
+static bool reorder__20(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs12[2UL];
+  __tempargs12[0UL] = __ins_0;
+  __tempargs12[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__200_closure_12_0wrapper, __stream, __module_data, 0UL, 128UL, 1UL, __tempargs12);
+  return true;
+}
+
+static bool matmul_core_cast__39(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs13[3UL];
+  __tempargs13[0UL] = __ins_0;
+  __tempargs13[1UL] = __ins_1;
+  __tempargs13[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__390_closure_13_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs13);
+  return true;
+}
+
+static bool reorder__22(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs14[2UL];
+  __tempargs14[0UL] = __ins_0;
+  __tempargs14[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__220_closure_14_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs14);
+  return true;
+}
+
+static bool reorder__23(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs15[2UL];
+  __tempargs15[0UL] = __ins_0;
+  __tempargs15[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__230_closure_15_0wrapper, __stream, __module_data, 0UL, 512UL, 8UL, __tempargs15);
+  return true;
+}
+
+static bool reorder__24(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs16[2UL];
+  __tempargs16[0UL] = __ins_0;
+  __tempargs16[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__240_closure_16_0wrapper, __stream, __module_data, 0UL, 2048UL, 1UL, __tempargs16);
+  return true;
+}
+
+static bool matmul_core_cast__37(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1){
+  generic_val __tempargs17[3UL];
+  __tempargs17[0UL] = __ins_0;
+  __tempargs17[1UL] = __ins_1;
+  __tempargs17[2UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast__370_closure_17_0wrapper, __stream, __module_data, 0UL, 128UL, 1UL, __tempargs17);
+  return true;
+}
+
+static bool reorder__25(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs18[2UL];
+  __tempargs18[0UL] = __ins_0;
+  __tempargs18[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__250_closure_18_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs18);
+  return true;
+}
+
+extern "C" void sc_init_mlp_training_backward_4k() {
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  void*& __sc_kernel_cache_3 = *(void**)(__module_data + 8);
+  void*& __sc_kernel_cache_4 = *(void**)(__module_data + 16);
+  void*& __sc_kernel_cache_5 = *(void**)(__module_data + 24);
+  void*& __sc_kernel_cache_6 = *(void**)(__module_data + 32);
+  __sc_kernel_cache = dnnl_brgemm_func(64, 64, 64, 128, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_3 = dnnl_brgemm_func(32, 32, 64, 4096, 32, 32, 64, 2048, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_4 = dnnl_brgemm_func(64, 64, 64, 256, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_5 = dnnl_brgemm_func(32, 16, 64, 512, 16, 16, 64, 1024, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_6 = dnnl_brgemm_func(13, 32, 64, 4096, 32, 32, 64, 2048, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+}
+
+static void reorder__170_closure_0(uint64_t fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner = 0UL; fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner < 256UL; fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner += 1UL) {
+    for (uint64_t _fuseiter_35 = 0UL; _fuseiter_35 < 2UL; _fuseiter_35 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 8192UL) * 16384UL) + ((((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 2048UL) % 4UL) * 4096UL) + ((((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 64UL) % 32UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) % 64UL) * 2UL) + _fuseiter_35))))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[(((((_fuseiter_35 + (((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 2048UL) % 4UL) * 64UL)) / 64UL) * 8192UL) + (((((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 8192UL) * 64UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 8192UL) * 64UL)) % 64UL) / 2UL) * 128UL) + (((((_fuseiter_35 + (((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 2048UL) % 4UL) * 64UL)) % 64UL) * 2UL) + ((((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_31___fuseiter_32_5___fuseiter_33_6___fuseiter_34_7_0inner) / 8192UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__170_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__170_closure_0(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void select_one_mul_reduce__410_closure_1(uint64_t __itr_0_0outer, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  for (uint64_t __itr_0_0inner = 0UL; __itr_0_0inner < 16UL; __itr_0_0inner += 1UL) {
+    uint16_t _select_one_buf_0_shr[16];
+    for (uint64_t _fuseiter37 = 0UL; _fuseiter37 < 128UL; _fuseiter37 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_0[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter37)]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_0 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_0)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_1[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter37)]))) << vec_u32x16(16UL)));
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_1 = (__cached_2 * __cached_1);
+      __cached_3 = tobf16(_arg_cache_1);
+      vec_u16x16::store(__cached_3, &__outs_0[((((__itr_0_0outer * 16UL) + __itr_0_0inner) * 128UL) + _fuseiter37)]);
+    }
+  }
+}
+
+static void select_one_mul_reduce__410_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  select_one_mul_reduce__410_closure_1(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__180_closure_2(uint64_t fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner = 0UL; fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner < 4UL; fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner += 1UL) {
+    for (uint64_t _fuseiter_47 = 0UL; _fuseiter_47 < 64UL; _fuseiter_47 += 1UL) {
+      for (uint64_t _fuseiter_48 = 0UL; _fuseiter_48 < 2UL; _fuseiter_48 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 256UL) * 32768UL) + ((((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 32UL) % 8UL) * 4096UL) + (((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) % 32UL) * 128UL) + ((_fuseiter_47 * 2UL) + _fuseiter_48))))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((_fuseiter_48 + ((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 32UL) % 8UL) * 64UL)) / 64UL) * 16384UL) + ((((_fuseiter_47 + ((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 256UL) * 64UL)) / 64UL) * 4096UL) + (((((_fuseiter_47 + ((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 256UL) * 64UL)) % 64UL) / 2UL) * 128UL) + (((((_fuseiter_48 + ((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 32UL) % 8UL) * 64UL)) % 64UL) * 2UL) + (((_fuseiter_47 + ((((fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0outer * 4UL) + fused_0fused_0_fuseiter_44___fuseiter_45_8___fuseiter_46_9_0inner) / 256UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__180_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__180_closure_2(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_select_one_cast_mul__360_closure_3(uint64_t fused_0m_o__n_o_10, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_140_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache, &__ins_0[((fused_0m_o__n_o_10 / 4UL) * 8192UL)], &__ins_1[((fused_0m_o__n_o_10 % 4UL) * 8192UL)], &__origouts_140_shr[0UL], 2, __stream);
+  for (uint64_t _fuseiter49 = 0UL; _fuseiter49 < 64UL; _fuseiter49 += 1UL) {
+    for (uint64_t _fuseiter50 = 0UL; _fuseiter50 < 64UL; _fuseiter50 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[((((fused_0m_o__n_o_10 / 4UL) * 16384UL) + ((fused_0m_o__n_o_10 % 4UL) * 64UL)) + ((_fuseiter49 * 256UL) + _fuseiter50))]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_2 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_2)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = vec_f32x16::load(&__origouts_140_shr[((_fuseiter49 * 64UL) + _fuseiter50)]);
+      vec_f32x16 __cached_3;
+      __cached_3 = __cached_2;
+      vec_u16x16 __cached_4;
+      vec_f32x16 _arg_cache_3 = (__cached_3 * __cached_1);
+      __cached_4 = tobf16(_arg_cache_3);
+      vec_u16x16::store(__cached_4, &__outs_0[((((fused_0m_o__n_o_10 / 4UL) * 16384UL) + ((fused_0m_o__n_o_10 % 4UL) * 64UL)) + ((_fuseiter49 * 256UL) + _fuseiter50))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_select_one_cast_mul__360_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_select_one_cast_mul__360_closure_3(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void reorder__190_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner = 0UL; fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner < 256UL; fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner += 1UL) {
+    for (uint64_t _fuseiter_64 = 0UL; _fuseiter_64 < 2UL; _fuseiter_64 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) % 64UL) * 2UL) + _fuseiter_64)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_64 + (((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 64UL) % 8UL) * 2UL)) / 16UL) * 8192UL) + (((((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 512UL) * 64UL)) / 64UL) * 1024UL) + ((((((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 512UL) * 64UL)) % 64UL) / 2UL) * 32UL) + ((((_fuseiter_64 + (((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 64UL) % 8UL) * 2UL)) % 16UL) * 2UL) + ((((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_60___fuseiter_61_11___fuseiter_62_12___fuseiter_63_13_0inner) / 512UL) * 64UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__190_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__190_closure_4(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__260_closure_5(uint64_t _fuseiter_65, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_66 = 0UL; _fuseiter_66 < 4096UL; _fuseiter_66 += 32UL) {
+    vec_u16x32 row1_2;
+    vec_u16x32 row2_3;
+    vec_u16x32 row3_4;
+    vec_u16x32 row4_5;
+    vec_u16x32 row5_6;
+    vec_u16x32 row6_7;
+    vec_u16x32 row7_8;
+    vec_u16x32 row8_9;
+    vec_u16x32 row9_10;
+    vec_u16x32 row10_11;
+    vec_u16x32 row11_12;
+    vec_u16x32 row12_13;
+    vec_u16x32 row13_14;
+    vec_u16x32 row14_15;
+    vec_u16x32 row15_16;
+    vec_u16x32 row16_17;
+    vec_u16x8 __cached_0;
+    __cached_0 = vec_u16x8::load(&__ins_0[((_fuseiter_66 * 256UL) + _fuseiter_65)]);
+    row1_2 = vec_u16x32(__cached_0);
+    vec_u16x8 __cached_1;
+    __cached_1 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 8UL) * 256UL) + _fuseiter_65)]);
+    row1_2 = sc_select(65280, vec_u16x32(__cached_1), row1_2);
+    vec_u16x8 __cached_2;
+    __cached_2 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 16UL) * 256UL) + _fuseiter_65)]);
+    row1_2 = sc_select(16711680, vec_u16x32(__cached_2), row1_2);
+    vec_u16x8 __cached_3;
+    __cached_3 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 24UL) * 256UL) + _fuseiter_65)]);
+    row1_2 = sc_select(-16777216, vec_u16x32(__cached_3), row1_2);
+    vec_u16x8 __cached_4;
+    __cached_4 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 1UL) * 256UL) + _fuseiter_65)]);
+    row2_3 = vec_u16x32(__cached_4);
+    vec_u16x8 __cached_5;
+    __cached_5 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 9UL) * 256UL) + _fuseiter_65)]);
+    row2_3 = sc_select(65280, vec_u16x32(__cached_5), row2_3);
+    vec_u16x8 __cached_6;
+    __cached_6 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 17UL) * 256UL) + _fuseiter_65)]);
+    row2_3 = sc_select(16711680, vec_u16x32(__cached_6), row2_3);
+    vec_u16x8 __cached_7;
+    __cached_7 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 25UL) * 256UL) + _fuseiter_65)]);
+    row2_3 = sc_select(-16777216, vec_u16x32(__cached_7), row2_3);
+    vec_u16x8 __cached_8;
+    __cached_8 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 2UL) * 256UL) + _fuseiter_65)]);
+    row3_4 = vec_u16x32(__cached_8);
+    vec_u16x8 __cached_9;
+    __cached_9 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 10UL) * 256UL) + _fuseiter_65)]);
+    row3_4 = sc_select(65280, vec_u16x32(__cached_9), row3_4);
+    vec_u16x8 __cached_10;
+    __cached_10 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 18UL) * 256UL) + _fuseiter_65)]);
+    row3_4 = sc_select(16711680, vec_u16x32(__cached_10), row3_4);
+    vec_u16x8 __cached_11;
+    __cached_11 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 26UL) * 256UL) + _fuseiter_65)]);
+    row3_4 = sc_select(-16777216, vec_u16x32(__cached_11), row3_4);
+    vec_u16x8 __cached_12;
+    __cached_12 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 3UL) * 256UL) + _fuseiter_65)]);
+    row4_5 = vec_u16x32(__cached_12);
+    vec_u16x8 __cached_13;
+    __cached_13 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 11UL) * 256UL) + _fuseiter_65)]);
+    row4_5 = sc_select(65280, vec_u16x32(__cached_13), row4_5);
+    vec_u16x8 __cached_14;
+    __cached_14 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 19UL) * 256UL) + _fuseiter_65)]);
+    row4_5 = sc_select(16711680, vec_u16x32(__cached_14), row4_5);
+    vec_u16x8 __cached_15;
+    __cached_15 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 27UL) * 256UL) + _fuseiter_65)]);
+    row4_5 = sc_select(-16777216, vec_u16x32(__cached_15), row4_5);
+    vec_u16x8 __cached_16;
+    __cached_16 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 4UL) * 256UL) + _fuseiter_65)]);
+    row5_6 = vec_u16x32(__cached_16);
+    vec_u16x8 __cached_17;
+    __cached_17 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 12UL) * 256UL) + _fuseiter_65)]);
+    row5_6 = sc_select(65280, vec_u16x32(__cached_17), row5_6);
+    vec_u16x8 __cached_18;
+    __cached_18 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 20UL) * 256UL) + _fuseiter_65)]);
+    row5_6 = sc_select(16711680, vec_u16x32(__cached_18), row5_6);
+    vec_u16x8 __cached_19;
+    __cached_19 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 28UL) * 256UL) + _fuseiter_65)]);
+    row5_6 = sc_select(-16777216, vec_u16x32(__cached_19), row5_6);
+    vec_u16x8 __cached_20;
+    __cached_20 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 5UL) * 256UL) + _fuseiter_65)]);
+    row6_7 = vec_u16x32(__cached_20);
+    vec_u16x8 __cached_21;
+    __cached_21 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 13UL) * 256UL) + _fuseiter_65)]);
+    row6_7 = sc_select(65280, vec_u16x32(__cached_21), row6_7);
+    vec_u16x8 __cached_22;
+    __cached_22 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 21UL) * 256UL) + _fuseiter_65)]);
+    row6_7 = sc_select(16711680, vec_u16x32(__cached_22), row6_7);
+    vec_u16x8 __cached_23;
+    __cached_23 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 29UL) * 256UL) + _fuseiter_65)]);
+    row6_7 = sc_select(-16777216, vec_u16x32(__cached_23), row6_7);
+    vec_u16x8 __cached_24;
+    __cached_24 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 6UL) * 256UL) + _fuseiter_65)]);
+    row7_8 = vec_u16x32(__cached_24);
+    vec_u16x8 __cached_25;
+    __cached_25 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 14UL) * 256UL) + _fuseiter_65)]);
+    row7_8 = sc_select(65280, vec_u16x32(__cached_25), row7_8);
+    vec_u16x8 __cached_26;
+    __cached_26 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 22UL) * 256UL) + _fuseiter_65)]);
+    row7_8 = sc_select(16711680, vec_u16x32(__cached_26), row7_8);
+    vec_u16x8 __cached_27;
+    __cached_27 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 30UL) * 256UL) + _fuseiter_65)]);
+    row7_8 = sc_select(-16777216, vec_u16x32(__cached_27), row7_8);
+    vec_u16x8 __cached_28;
+    __cached_28 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 7UL) * 256UL) + _fuseiter_65)]);
+    row8_9 = vec_u16x32(__cached_28);
+    vec_u16x8 __cached_29;
+    __cached_29 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 15UL) * 256UL) + _fuseiter_65)]);
+    row8_9 = sc_select(65280, vec_u16x32(__cached_29), row8_9);
+    vec_u16x8 __cached_30;
+    __cached_30 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 23UL) * 256UL) + _fuseiter_65)]);
+    row8_9 = sc_select(16711680, vec_u16x32(__cached_30), row8_9);
+    vec_u16x8 __cached_31;
+    __cached_31 = vec_u16x8::load(&__ins_0[(((_fuseiter_66 + 31UL) * 256UL) + _fuseiter_65)]);
+    row8_9 = sc_select(-16777216, vec_u16x32(__cached_31), row8_9);
+    row9_10 = sc_unpack_low(row1_2, row2_3, 16);
+    row10_11 = sc_unpack_high(row1_2, row2_3, 16);
+    row11_12 = sc_unpack_low(row3_4, row4_5, 16);
+    row12_13 = sc_unpack_high(row3_4, row4_5, 16);
+    row13_14 = sc_unpack_low(row5_6, row6_7, 16);
+    row14_15 = sc_unpack_high(row5_6, row6_7, 16);
+    row15_16 = sc_unpack_low(row7_8, row8_9, 16);
+    row16_17 = sc_unpack_high(row7_8, row8_9, 16);
+    row1_2 = sc_unpack_low(row9_10, row11_12, 32);
+    row2_3 = sc_unpack_high(row9_10, row11_12, 32);
+    row3_4 = sc_unpack_low(row10_11, row12_13, 32);
+    row4_5 = sc_unpack_high(row10_11, row12_13, 32);
+    row5_6 = sc_unpack_low(row13_14, row15_16, 32);
+    row6_7 = sc_unpack_high(row13_14, row15_16, 32);
+    row7_8 = sc_unpack_low(row14_15, row16_17, 32);
+    row8_9 = sc_unpack_high(row14_15, row16_17, 32);
+    row9_10 = sc_unpack_low(row1_2, row5_6, 64);
+    row10_11 = sc_unpack_high(row1_2, row5_6, 64);
+    row11_12 = sc_unpack_low(row2_3, row6_7, 64);
+    row12_13 = sc_unpack_high(row2_3, row6_7, 64);
+    row13_14 = sc_unpack_low(row3_4, row7_8, 64);
+    row14_15 = sc_unpack_high(row3_4, row7_8, 64);
+    row15_16 = sc_unpack_low(row4_5, row8_9, 64);
+    row16_17 = sc_unpack_high(row4_5, row8_9, 64);
+    vec_u16x32 __cached_32;
+    __cached_32 = row9_10;
+    vec_u16x32::store(__cached_32, &__outs_0[((_fuseiter_65 * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_33;
+    __cached_33 = row10_11;
+    vec_u16x32::store(__cached_33, &__outs_0[(((_fuseiter_65 + 1UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_34;
+    __cached_34 = row11_12;
+    vec_u16x32::store(__cached_34, &__outs_0[(((_fuseiter_65 + 2UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_35;
+    __cached_35 = row12_13;
+    vec_u16x32::store(__cached_35, &__outs_0[(((_fuseiter_65 + 3UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_36;
+    __cached_36 = row13_14;
+    vec_u16x32::store(__cached_36, &__outs_0[(((_fuseiter_65 + 4UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_37;
+    __cached_37 = row14_15;
+    vec_u16x32::store(__cached_37, &__outs_0[(((_fuseiter_65 + 5UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_38;
+    __cached_38 = row15_16;
+    vec_u16x32::store(__cached_38, &__outs_0[(((_fuseiter_65 + 6UL) * 4096UL) + _fuseiter_66)]);
+    vec_u16x32 __cached_39;
+    __cached_39 = row16_17;
+    vec_u16x32::store(__cached_39, &__outs_0[(((_fuseiter_65 + 7UL) * 4096UL) + _fuseiter_66)]);
+  }
+}
+
+static void reorder__260_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__260_closure_5(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__270_closure_6(uint64_t fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner = 0UL; fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner < 8UL; fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner += 1UL) {
+    for (uint64_t _fuseiter_70 = 0UL; _fuseiter_70 < 32UL; _fuseiter_70 += 1UL) {
+      for (uint64_t _fuseiter_71 = 0UL; _fuseiter_71 < 2UL; _fuseiter_71 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_71 + ((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) / 32UL) % 64UL) * 64UL)) * 128UL) + (_fuseiter_70 + ((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) / 2048UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) / 2048UL) * 131072UL) + ((((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) / 32UL) % 64UL) * 2048UL) + (((((fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0outer * 8UL) + fused_0fused_0_fuseiter_67___fuseiter_68_14___fuseiter_69_15_0inner) % 32UL) * 64UL) + ((_fuseiter_70 * 2UL) + _fuseiter_71))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__270_closure_6_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__270_closure_6(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__350_closure_7(uint64_t fused_0m_o__n_o_16, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_3 = *(void**)(__module_data + 8);
+  float* __origouts_150_shr = (float*)sc_thread_aligned_malloc(__stream, 4096UL);
+  dnnl_brgemm_call(__sc_kernel_cache_3, &__ins_0[((fused_0m_o__n_o_16 / 4UL) * 131072UL)], &__ins_1[((fused_0m_o__n_o_16 % 4UL) * 131072UL)], &__origouts_150_shr[0UL], 64, __stream);
+  for (uint64_t _fuseiter74 = 0UL; _fuseiter74 < 32UL; _fuseiter74 += 1UL) {
+    for (uint64_t _fuseiter75 = 0UL; _fuseiter75 < 32UL; _fuseiter75 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_150_shr[((_fuseiter74 * 32UL) + _fuseiter75)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_16 / 4UL) * 4096UL) + ((fused_0m_o__n_o_16 % 4UL) * 1024UL)) + ((_fuseiter74 * 32UL) + _fuseiter75))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_150_shr);
+}
+
+static void matmul_core_cast__350_closure_7_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__350_closure_7(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__280_closure_8(uint64_t fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner = 0UL; fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner < 16UL; fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner += 1UL) {
+    for (uint64_t _fuseiter_80 = 0UL; _fuseiter_80 < 32UL; _fuseiter_80 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 128UL) * 4096UL) + ((((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 32UL) % 4UL) * 1024UL) + (((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) % 32UL) * 32UL) + _fuseiter_80)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_80 + (((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 32UL) % 4UL) * 32UL)) / 64UL) * 16384UL) + (((((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 128UL) * 32UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 128UL) * 32UL)) % 64UL) / 2UL) * 128UL) + ((((_fuseiter_80 + (((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 32UL) % 4UL) * 32UL)) % 64UL) * 2UL) + ((((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0outer * 16UL) + fused_0fused_0_fuseiter_77___fuseiter_78_17___fuseiter_79_18_0inner) / 128UL) * 32UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__280_closure_8_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__280_closure_8(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_select_one_cast_mul__380_closure_9(uint64_t fused_0m_o__n_o_19, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_4 = *(void**)(__module_data + 16);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_160_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_4, &__ins_0[((fused_0m_o__n_o_19 / 8UL) * 16384UL)], &__ins_1[((fused_0m_o__n_o_19 % 8UL) * 16384UL)], &__origouts_160_shr[0UL], 4, __stream);
+  for (uint64_t _fuseiter81 = 0UL; _fuseiter81 < 64UL; _fuseiter81 += 1UL) {
+    for (uint64_t _fuseiter82 = 0UL; _fuseiter82 < 64UL; _fuseiter82 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[((((fused_0m_o__n_o_19 / 8UL) * 32768UL) + ((fused_0m_o__n_o_19 % 8UL) * 64UL)) + ((_fuseiter81 * 512UL) + _fuseiter82))]))) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_1;
+      vec_u16x16 _arg_cache_4 = sc_select((__cached_0 > vec_f32x16(0.f)), vec_u16x16(16256UL), vec_u16x16(0UL));
+      __cached_1 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(_arg_cache_4)) << vec_u32x16(16UL)));
+      vec_f32x16 __cached_2;
+      __cached_2 = vec_f32x16::load(&__origouts_160_shr[((_fuseiter81 * 64UL) + _fuseiter82)]);
+      vec_f32x16 __cached_3;
+      __cached_3 = __cached_2;
+      vec_u16x16 __cached_4;
+      vec_f32x16 _arg_cache_5 = (__cached_3 * __cached_1);
+      __cached_4 = tobf16(_arg_cache_5);
+      vec_u16x16::store(__cached_4, &__outs_0[((((fused_0m_o__n_o_19 / 8UL) * 32768UL) + ((fused_0m_o__n_o_19 % 8UL) * 64UL)) + ((_fuseiter81 * 512UL) + _fuseiter82))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_select_one_cast_mul__380_closure_9_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_select_one_cast_mul__380_closure_9(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_reorder__400_closure_10(uint64_t fused_0m_o__n_o_20, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_5 = *(void**)(__module_data + 24);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 2112UL);
+  float* __origouts_170_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_5, &__ins_0[(fused_0m_o__n_o_20 * 16384UL)], &__ins_1[0UL], &__origouts_170_shr[0UL], 8, __stream);
+  uint16_t* _cast_buf_0_shr = (uint16_t*)&__rescheduled_1[2048UL];
+  for (uint64_t _fuseiter92 = 0UL; _fuseiter92 < 32UL; _fuseiter92 += 1UL) {
+    vec_f32x16 __cached_0;
+    __cached_0 = vec_f32x16::load(&__origouts_170_shr[(_fuseiter92 * 16UL)]);
+    vec_u16x16 __cached_1;
+    __cached_1 = tobf16(__cached_0);
+    vec_u16x16::store(__cached_1, &_cast_buf_0_shr[0UL]);
+    for (uint64_t _fuseiter_98 = 0UL; _fuseiter_98 < 16UL; _fuseiter_98 += 1UL) {
+      if (((_fuseiter_98 < 13UL) && ((_fuseiter92 + (fused_0m_o__n_o_20 * 32UL)) < 4096UL))) {
+        uint16_t __cached_2;
+        __cached_2 = _cast_buf_0_shr[_fuseiter_98];
+        uint16_t __cached_3;
+        __cached_3 = __cached_2;
+        __outs_0[(((_fuseiter92 + (fused_0m_o__n_o_20 * 32UL)) * 13UL) + _fuseiter_98)] = __cached_3;
+      }
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_reorder__400_closure_10_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_reorder__400_closure_10(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__210_closure_11(uint64_t fused_0_fuseiter_101___fuseiter_102_21, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_103 = 0UL; _fuseiter_103 < 32UL; _fuseiter_103 += 1UL) {
+    for (uint64_t _fuseiter_104 = 0UL; _fuseiter_104 < 32UL; _fuseiter_104 += 1UL) {
+      for (uint64_t _fuseiter_105 = 0UL; _fuseiter_105 < 2UL; _fuseiter_105 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_105 + (_fuseiter_103 * 2UL)) + ((fused_0_fuseiter_101___fuseiter_102_21 % 64UL) * 64UL)) * 512UL) + (_fuseiter_104 + ((fused_0_fuseiter_101___fuseiter_102_21 / 64UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((fused_0_fuseiter_101___fuseiter_102_21 / 64UL) * 131072UL) + (((fused_0_fuseiter_101___fuseiter_102_21 % 64UL) * 2048UL) + ((_fuseiter_103 * 64UL) + ((_fuseiter_104 * 2UL) + _fuseiter_105))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__210_closure_11_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__210_closure_11(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__200_closure_12(uint64_t _fuseiter_106_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_106_0inner = 0UL; _fuseiter_106_0inner < 32UL; _fuseiter_106_0inner += 1UL) {
+    for (uint64_t _fuseiter_107 = 0UL; _fuseiter_107 < 13UL; _fuseiter_107 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[((((_fuseiter_106_0outer * 32UL) + _fuseiter_106_0inner) * 13UL) + _fuseiter_107)];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((_fuseiter_107 * 4096UL) + ((_fuseiter_106_0outer * 32UL) + _fuseiter_106_0inner))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__200_closure_12_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__200_closure_12(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__390_closure_13(uint64_t fused_0m_o__n_o_22, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_6 = *(void**)(__module_data + 32);
+  float* __origouts_180_shr = (float*)sc_thread_aligned_malloc(__stream, 1664UL);
+  dnnl_brgemm_call(__sc_kernel_cache_6, &__ins_0[((fused_0m_o__n_o_22 / 16UL) * 53248UL)], &__ins_1[((fused_0m_o__n_o_22 % 16UL) * 131072UL)], &__origouts_180_shr[0UL], 64, __stream);
+  for (uint64_t _fuseiter110 = 0UL; _fuseiter110 < 13UL; _fuseiter110 += 1UL) {
+    for (uint64_t _fuseiter111 = 0UL; _fuseiter111 < 32UL; _fuseiter111 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_180_shr[((_fuseiter110 * 32UL) + _fuseiter111)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_22 / 16UL) * 6656UL) + ((fused_0m_o__n_o_22 % 16UL) * 416UL)) + ((_fuseiter110 * 32UL) + _fuseiter111))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_180_shr);
+}
+
+static void matmul_core_cast__390_closure_13_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__390_closure_13(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__220_closure_14(uint64_t fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner = 0UL; fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner < 256UL; fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner += 1UL) {
+    for (uint64_t _fuseiter_117 = 0UL; _fuseiter_117 < 2UL; _fuseiter_117 += 1UL) {
+      if (((((_fuseiter_117 + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 2UL)) < 16UL) && ((_fuseiter_117 + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 2UL)) < 13UL)) && (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 512UL) * 64UL)) < 512UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_117 + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 2UL)) / 13UL) * 6656UL) + (((((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 512UL) * 64UL)) / 32UL) * 416UL) + ((((_fuseiter_117 + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 2UL)) % 13UL) * 32UL) + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 512UL) * 64UL)) % 32UL))))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) % 64UL) * 2UL) + _fuseiter_117)))] = __cached_1;
+      } else {
+        uint16_t __cached_2;
+        __cached_2 = 0UL;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_113___fuseiter_114_23___fuseiter_115_24___fuseiter_116_25_0inner) % 64UL) * 2UL) + _fuseiter_117)))] = __cached_2;
+      }
+    }
+  }
+}
+
+static void reorder__220_closure_14_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__220_closure_14(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__230_closure_15(uint64_t _fuseiter_118, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_119 = 0UL; _fuseiter_119 < 4096UL; _fuseiter_119 += 32UL) {
+    vec_u16x32 row1_19;
+    vec_u16x32 row2_20;
+    vec_u16x32 row3_21;
+    vec_u16x32 row4_22;
+    vec_u16x32 row5_23;
+    vec_u16x32 row6_24;
+    vec_u16x32 row7_25;
+    vec_u16x32 row8_26;
+    vec_u16x32 row9_27;
+    vec_u16x32 row10_28;
+    vec_u16x32 row11_29;
+    vec_u16x32 row12_30;
+    vec_u16x32 row13_31;
+    vec_u16x32 row14_32;
+    vec_u16x32 row15_33;
+    vec_u16x32 row16_34;
+    vec_u16x8 __cached_0;
+    __cached_0 = vec_u16x8::load(&__ins_0[((_fuseiter_119 * 512UL) + _fuseiter_118)]);
+    row1_19 = vec_u16x32(__cached_0);
+    vec_u16x8 __cached_1;
+    __cached_1 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 8UL) * 512UL) + _fuseiter_118)]);
+    row1_19 = sc_select(65280, vec_u16x32(__cached_1), row1_19);
+    vec_u16x8 __cached_2;
+    __cached_2 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 16UL) * 512UL) + _fuseiter_118)]);
+    row1_19 = sc_select(16711680, vec_u16x32(__cached_2), row1_19);
+    vec_u16x8 __cached_3;
+    __cached_3 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 24UL) * 512UL) + _fuseiter_118)]);
+    row1_19 = sc_select(-16777216, vec_u16x32(__cached_3), row1_19);
+    vec_u16x8 __cached_4;
+    __cached_4 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 1UL) * 512UL) + _fuseiter_118)]);
+    row2_20 = vec_u16x32(__cached_4);
+    vec_u16x8 __cached_5;
+    __cached_5 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 9UL) * 512UL) + _fuseiter_118)]);
+    row2_20 = sc_select(65280, vec_u16x32(__cached_5), row2_20);
+    vec_u16x8 __cached_6;
+    __cached_6 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 17UL) * 512UL) + _fuseiter_118)]);
+    row2_20 = sc_select(16711680, vec_u16x32(__cached_6), row2_20);
+    vec_u16x8 __cached_7;
+    __cached_7 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 25UL) * 512UL) + _fuseiter_118)]);
+    row2_20 = sc_select(-16777216, vec_u16x32(__cached_7), row2_20);
+    vec_u16x8 __cached_8;
+    __cached_8 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 2UL) * 512UL) + _fuseiter_118)]);
+    row3_21 = vec_u16x32(__cached_8);
+    vec_u16x8 __cached_9;
+    __cached_9 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 10UL) * 512UL) + _fuseiter_118)]);
+    row3_21 = sc_select(65280, vec_u16x32(__cached_9), row3_21);
+    vec_u16x8 __cached_10;
+    __cached_10 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 18UL) * 512UL) + _fuseiter_118)]);
+    row3_21 = sc_select(16711680, vec_u16x32(__cached_10), row3_21);
+    vec_u16x8 __cached_11;
+    __cached_11 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 26UL) * 512UL) + _fuseiter_118)]);
+    row3_21 = sc_select(-16777216, vec_u16x32(__cached_11), row3_21);
+    vec_u16x8 __cached_12;
+    __cached_12 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 3UL) * 512UL) + _fuseiter_118)]);
+    row4_22 = vec_u16x32(__cached_12);
+    vec_u16x8 __cached_13;
+    __cached_13 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 11UL) * 512UL) + _fuseiter_118)]);
+    row4_22 = sc_select(65280, vec_u16x32(__cached_13), row4_22);
+    vec_u16x8 __cached_14;
+    __cached_14 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 19UL) * 512UL) + _fuseiter_118)]);
+    row4_22 = sc_select(16711680, vec_u16x32(__cached_14), row4_22);
+    vec_u16x8 __cached_15;
+    __cached_15 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 27UL) * 512UL) + _fuseiter_118)]);
+    row4_22 = sc_select(-16777216, vec_u16x32(__cached_15), row4_22);
+    vec_u16x8 __cached_16;
+    __cached_16 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 4UL) * 512UL) + _fuseiter_118)]);
+    row5_23 = vec_u16x32(__cached_16);
+    vec_u16x8 __cached_17;
+    __cached_17 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 12UL) * 512UL) + _fuseiter_118)]);
+    row5_23 = sc_select(65280, vec_u16x32(__cached_17), row5_23);
+    vec_u16x8 __cached_18;
+    __cached_18 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 20UL) * 512UL) + _fuseiter_118)]);
+    row5_23 = sc_select(16711680, vec_u16x32(__cached_18), row5_23);
+    vec_u16x8 __cached_19;
+    __cached_19 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 28UL) * 512UL) + _fuseiter_118)]);
+    row5_23 = sc_select(-16777216, vec_u16x32(__cached_19), row5_23);
+    vec_u16x8 __cached_20;
+    __cached_20 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 5UL) * 512UL) + _fuseiter_118)]);
+    row6_24 = vec_u16x32(__cached_20);
+    vec_u16x8 __cached_21;
+    __cached_21 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 13UL) * 512UL) + _fuseiter_118)]);
+    row6_24 = sc_select(65280, vec_u16x32(__cached_21), row6_24);
+    vec_u16x8 __cached_22;
+    __cached_22 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 21UL) * 512UL) + _fuseiter_118)]);
+    row6_24 = sc_select(16711680, vec_u16x32(__cached_22), row6_24);
+    vec_u16x8 __cached_23;
+    __cached_23 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 29UL) * 512UL) + _fuseiter_118)]);
+    row6_24 = sc_select(-16777216, vec_u16x32(__cached_23), row6_24);
+    vec_u16x8 __cached_24;
+    __cached_24 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 6UL) * 512UL) + _fuseiter_118)]);
+    row7_25 = vec_u16x32(__cached_24);
+    vec_u16x8 __cached_25;
+    __cached_25 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 14UL) * 512UL) + _fuseiter_118)]);
+    row7_25 = sc_select(65280, vec_u16x32(__cached_25), row7_25);
+    vec_u16x8 __cached_26;
+    __cached_26 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 22UL) * 512UL) + _fuseiter_118)]);
+    row7_25 = sc_select(16711680, vec_u16x32(__cached_26), row7_25);
+    vec_u16x8 __cached_27;
+    __cached_27 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 30UL) * 512UL) + _fuseiter_118)]);
+    row7_25 = sc_select(-16777216, vec_u16x32(__cached_27), row7_25);
+    vec_u16x8 __cached_28;
+    __cached_28 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 7UL) * 512UL) + _fuseiter_118)]);
+    row8_26 = vec_u16x32(__cached_28);
+    vec_u16x8 __cached_29;
+    __cached_29 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 15UL) * 512UL) + _fuseiter_118)]);
+    row8_26 = sc_select(65280, vec_u16x32(__cached_29), row8_26);
+    vec_u16x8 __cached_30;
+    __cached_30 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 23UL) * 512UL) + _fuseiter_118)]);
+    row8_26 = sc_select(16711680, vec_u16x32(__cached_30), row8_26);
+    vec_u16x8 __cached_31;
+    __cached_31 = vec_u16x8::load(&__ins_0[(((_fuseiter_119 + 31UL) * 512UL) + _fuseiter_118)]);
+    row8_26 = sc_select(-16777216, vec_u16x32(__cached_31), row8_26);
+    row9_27 = sc_unpack_low(row1_19, row2_20, 16);
+    row10_28 = sc_unpack_high(row1_19, row2_20, 16);
+    row11_29 = sc_unpack_low(row3_21, row4_22, 16);
+    row12_30 = sc_unpack_high(row3_21, row4_22, 16);
+    row13_31 = sc_unpack_low(row5_23, row6_24, 16);
+    row14_32 = sc_unpack_high(row5_23, row6_24, 16);
+    row15_33 = sc_unpack_low(row7_25, row8_26, 16);
+    row16_34 = sc_unpack_high(row7_25, row8_26, 16);
+    row1_19 = sc_unpack_low(row9_27, row11_29, 32);
+    row2_20 = sc_unpack_high(row9_27, row11_29, 32);
+    row3_21 = sc_unpack_low(row10_28, row12_30, 32);
+    row4_22 = sc_unpack_high(row10_28, row12_30, 32);
+    row5_23 = sc_unpack_low(row13_31, row15_33, 32);
+    row6_24 = sc_unpack_high(row13_31, row15_33, 32);
+    row7_25 = sc_unpack_low(row14_32, row16_34, 32);
+    row8_26 = sc_unpack_high(row14_32, row16_34, 32);
+    row9_27 = sc_unpack_low(row1_19, row5_23, 64);
+    row10_28 = sc_unpack_high(row1_19, row5_23, 64);
+    row11_29 = sc_unpack_low(row2_20, row6_24, 64);
+    row12_30 = sc_unpack_high(row2_20, row6_24, 64);
+    row13_31 = sc_unpack_low(row3_21, row7_25, 64);
+    row14_32 = sc_unpack_high(row3_21, row7_25, 64);
+    row15_33 = sc_unpack_low(row4_22, row8_26, 64);
+    row16_34 = sc_unpack_high(row4_22, row8_26, 64);
+    vec_u16x32 __cached_32;
+    __cached_32 = row9_27;
+    vec_u16x32::store(__cached_32, &__outs_0[((_fuseiter_118 * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_33;
+    __cached_33 = row10_28;
+    vec_u16x32::store(__cached_33, &__outs_0[(((_fuseiter_118 + 1UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_34;
+    __cached_34 = row11_29;
+    vec_u16x32::store(__cached_34, &__outs_0[(((_fuseiter_118 + 2UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_35;
+    __cached_35 = row12_30;
+    vec_u16x32::store(__cached_35, &__outs_0[(((_fuseiter_118 + 3UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_36;
+    __cached_36 = row13_31;
+    vec_u16x32::store(__cached_36, &__outs_0[(((_fuseiter_118 + 4UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_37;
+    __cached_37 = row14_32;
+    vec_u16x32::store(__cached_37, &__outs_0[(((_fuseiter_118 + 5UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_38;
+    __cached_38 = row15_33;
+    vec_u16x32::store(__cached_38, &__outs_0[(((_fuseiter_118 + 6UL) * 4096UL) + _fuseiter_119)]);
+    vec_u16x32 __cached_39;
+    __cached_39 = row16_34;
+    vec_u16x32::store(__cached_39, &__outs_0[(((_fuseiter_118 + 7UL) * 4096UL) + _fuseiter_119)]);
+  }
+}
+
+static void reorder__230_closure_15_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__230_closure_15(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__240_closure_16(uint64_t fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner = 0UL; fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner < 8UL; fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner += 1UL) {
+    for (uint64_t _fuseiter_123 = 0UL; _fuseiter_123 < 32UL; _fuseiter_123 += 1UL) {
+      for (uint64_t _fuseiter_124 = 0UL; _fuseiter_124 < 2UL; _fuseiter_124 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_124 + ((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) / 32UL) % 64UL) * 64UL)) * 256UL) + (_fuseiter_123 + ((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) / 2048UL) * 32UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) / 2048UL) * 131072UL) + ((((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) / 32UL) % 64UL) * 2048UL) + (((((fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0outer * 8UL) + fused_0fused_0_fuseiter_120___fuseiter_121_26___fuseiter_122_27_0inner) % 32UL) * 64UL) + ((_fuseiter_123 * 2UL) + _fuseiter_124))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__240_closure_16_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__240_closure_16(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast__370_closure_17(uint64_t fused_0m_o__n_o_28, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_3 = *(void**)(__module_data + 8);
+  float* __origouts_190_shr = (float*)sc_thread_aligned_malloc(__stream, 4096UL);
+  dnnl_brgemm_call(__sc_kernel_cache_3, &__ins_0[((fused_0m_o__n_o_28 / 8UL) * 131072UL)], &__ins_1[((fused_0m_o__n_o_28 % 8UL) * 131072UL)], &__origouts_190_shr[0UL], 64, __stream);
+  for (uint64_t _fuseiter127 = 0UL; _fuseiter127 < 32UL; _fuseiter127 += 1UL) {
+    for (uint64_t _fuseiter128 = 0UL; _fuseiter128 < 32UL; _fuseiter128 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_190_shr[((_fuseiter127 * 32UL) + _fuseiter128)]);
+      vec_u16x16 __cached_1;
+      __cached_1 = tobf16(__cached_0);
+      vec_u16x16::store(__cached_1, &__outs_0[((((fused_0m_o__n_o_28 / 8UL) * 8192UL) + ((fused_0m_o__n_o_28 % 8UL) * 1024UL)) + ((_fuseiter127 * 32UL) + _fuseiter128))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __origouts_190_shr);
+}
+
+static void matmul_core_cast__370_closure_17_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast__370_closure_17(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr));
+}
+
+static void reorder__250_closure_18(uint64_t fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner = 0UL; fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner < 16UL; fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner += 1UL) {
+    for (uint64_t _fuseiter_133 = 0UL; _fuseiter_133 < 32UL; _fuseiter_133 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 256UL) * 8192UL) + ((((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 32UL) % 8UL) * 1024UL) + (((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) % 32UL) * 32UL) + _fuseiter_133)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_133 + (((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 32UL) % 8UL) * 32UL)) / 64UL) * 32768UL) + (((((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 256UL) * 32UL)) / 64UL) * 4096UL) + ((((((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 256UL) * 32UL)) % 64UL) / 2UL) * 128UL) + ((((_fuseiter_133 + (((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 32UL) % 8UL) * 32UL)) % 64UL) * 2UL) + ((((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) % 32UL) + ((((fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0outer * 16UL) + fused_0fused_0_fuseiter_130___fuseiter_131_29___fuseiter_132_30_0inner) / 256UL) * 32UL)) % 64UL) % 2UL)))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__250_closure_18_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__250_closure_18(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data128k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data128k.cpp
new file mode 100644
index 000000000..bf01766d9
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data128k.cpp
@@ -0,0 +1,3 @@
+#include <stdint.h>
+alignas(64) uint64_t mlp_training_backward_128k_data[]={
+0x7f82161e8c28,0x2aea260,0x2b1ab10,0xa1,0x2aea280,};
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data4k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data4k.cpp
new file mode 100644
index 000000000..a1f66e25d
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/bwd_data4k.cpp
@@ -0,0 +1,3 @@
+#include <stdint.h>
+alignas(64) uint64_t mlp_training_backward_4k_data[]={
+0x2b72550,0x100000002,0x13,0x0,0x7f82147f51c0,};
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd128k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd128k.cpp
new file mode 100644
index 000000000..cc55284fe
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd128k.cpp
@@ -0,0 +1,181 @@
+
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+
+extern int8_t mlp_training_forward_128k_data[64];
+static constexpr int8_t* __module_data = mlp_training_forward_128k_data;
+alignas(64) static int8_t __uninitialized_data[0UL];
+
+static bool reorder__13(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast_add_relu__14(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_add_relu__15(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_add_relu__16(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static void reorder__130_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__140_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__150_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__160_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__130_closure_0(uint64_t _fuseiter_134, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__140_closure_1(uint64_t fused_0m_o__n_o_31, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__150_closure_2(uint64_t fused_0m_o__n_o_32, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__160_closure_3(uint64_t fused_0m_o__n_o_33, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+
+
+extern "C" void mlp_training_forward_128k(uint16_t* relu_out0, uint16_t* relu_out1, uint16_t* relu_out2, uint16_t* input, uint16_t* weight0, uint16_t* bias0, uint16_t* weight1, uint16_t* bias1, uint16_t* weight2, uint16_t* bias2){
+  uint16_t* buffer_7 = (uint16_t*)sc_aligned_malloc(__stream, 4194304UL);
+  reorder__13(buffer_7, input);
+  matmul_core_cast_add_relu__14(relu_out0, buffer_7, weight0, &bias0[0]);
+  matmul_core_cast_add_relu__15(relu_out1, relu_out0, weight1, &bias1[0]);
+  matmul_core_cast_add_relu__16(relu_out2, relu_out1, weight2, &bias2[0]);
+  sc_aligned_free(__stream, buffer_7);
+}
+
+static bool reorder__13(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs0[2UL];
+  __tempargs0[0UL] = __ins_0;
+  __tempargs0[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__130_closure_0_0wrapper, __stream, __module_data, 0UL, 2048UL, 1UL, __tempargs0);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__14(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs1[4UL];
+  __tempargs1[0UL] = __ins_0;
+  __tempargs1[1UL] = __ins_1;
+  __tempargs1[2UL] = __ins_2;
+  __tempargs1[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__140_closure_1_0wrapper, __stream, __module_data, 0UL, 16384UL, 1UL, __tempargs1);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__15(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs2[4UL];
+  __tempargs2[0UL] = __ins_0;
+  __tempargs2[1UL] = __ins_1;
+  __tempargs2[2UL] = __ins_2;
+  __tempargs2[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__150_closure_2_0wrapper, __stream, __module_data, 0UL, 8192UL, 1UL, __tempargs2);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__16(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs3[4UL];
+  __tempargs3[0UL] = __ins_0;
+  __tempargs3[1UL] = __ins_1;
+  __tempargs3[2UL] = __ins_2;
+  __tempargs3[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__160_closure_3_0wrapper, __stream, __module_data, 0UL, 4096UL, 1UL, __tempargs3);
+  return true;
+}
+
+extern "C" void sc_init_mlp_training_forward_128k() {
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  void*& __sc_kernel_cache_7 = *(void**)(__module_data + 8);
+  void*& __sc_kernel_cache_8 = *(void**)(__module_data + 16);
+  __sc_kernel_cache = dnnl_brgemm_func(64, 64, 16, 16, 64, 64, 1024, 1024, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_7 = dnnl_brgemm_func(64, 64, 64, 512, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_8 = dnnl_brgemm_func(64, 64, 64, 256, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+}
+
+static void reorder__130_closure_0(uint64_t _fuseiter_134, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t _fuseiter_136 = 0UL; _fuseiter_136 < 64UL; _fuseiter_136 += 1UL) {
+    for (uint64_t _fuseiter_137 = 0UL; _fuseiter_137 < 16UL; _fuseiter_137 += 1UL) {
+      if (((_fuseiter_137 < 13UL) && ((_fuseiter_136 + (_fuseiter_134 * 64UL)) < 131072UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((_fuseiter_136 + (_fuseiter_134 * 64UL)) * 13UL) + _fuseiter_137)];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[((_fuseiter_134 * 1024UL) + ((_fuseiter_136 * 16UL) + _fuseiter_137))] = __cached_1;
+      } else {
+        uint16_t __cached_2;
+        __cached_2 = 0UL;
+        __outs_0[((_fuseiter_134 * 1024UL) + ((_fuseiter_136 * 16UL) + _fuseiter_137))] = __cached_2;
+      }
+    }
+  }
+}
+
+static void reorder__130_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__130_closure_0(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__140_closure_1(uint64_t fused_0m_o__n_o_31, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_230_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache, &__ins_0[((fused_0m_o__n_o_31 / 8UL) * 1024UL)], &__ins_1[((fused_0m_o__n_o_31 % 8UL) * 1024UL)], &__origouts_230_shr[0UL], 1, __stream);
+  for (uint64_t _fuseiter138 = 0UL; _fuseiter138 < 64UL; _fuseiter138 += 1UL) {
+    for (uint64_t _fuseiter139 = 0UL; _fuseiter139 < 64UL; _fuseiter139 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_230_shr[((_fuseiter138 * 64UL) + _fuseiter139)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_31 % 8UL) * 64UL) + _fuseiter139)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_0 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_0);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_31 / 8UL) * 32768UL) + ((fused_0m_o__n_o_31 % 8UL) * 64UL)) + ((_fuseiter138 * 512UL) + _fuseiter139))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__140_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__140_closure_1(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__150_closure_2(uint64_t fused_0m_o__n_o_32, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_7 = *(void**)(__module_data + 8);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_240_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_7, &__ins_0[((fused_0m_o__n_o_32 / 4UL) * 32768UL)], &__ins_1[((fused_0m_o__n_o_32 % 4UL) * 32768UL)], &__origouts_240_shr[0UL], 8, __stream);
+  for (uint64_t _fuseiter147 = 0UL; _fuseiter147 < 64UL; _fuseiter147 += 1UL) {
+    for (uint64_t _fuseiter148 = 0UL; _fuseiter148 < 64UL; _fuseiter148 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_240_shr[((_fuseiter147 * 64UL) + _fuseiter148)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_32 % 4UL) * 64UL) + _fuseiter148)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_1 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_1);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_32 / 4UL) * 16384UL) + ((fused_0m_o__n_o_32 % 4UL) * 64UL)) + ((_fuseiter147 * 256UL) + _fuseiter148))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__150_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__150_closure_2(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__160_closure_3(uint64_t fused_0m_o__n_o_33, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_8 = *(void**)(__module_data + 16);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_250_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_8, &__ins_0[((fused_0m_o__n_o_33 / 2UL) * 16384UL)], &__ins_1[((fused_0m_o__n_o_33 % 2UL) * 16384UL)], &__origouts_250_shr[0UL], 4, __stream);
+  for (uint64_t _fuseiter156 = 0UL; _fuseiter156 < 64UL; _fuseiter156 += 1UL) {
+    for (uint64_t _fuseiter157 = 0UL; _fuseiter157 < 64UL; _fuseiter157 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_250_shr[((_fuseiter156 * 64UL) + _fuseiter157)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_33 % 2UL) * 64UL) + _fuseiter157)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_2 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_2);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_33 / 2UL) * 8192UL) + ((fused_0m_o__n_o_33 % 2UL) * 64UL)) + ((_fuseiter156 * 128UL) + _fuseiter157))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__160_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__160_closure_3(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd4k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd4k.cpp
new file mode 100644
index 000000000..89bdb7af2
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd4k.cpp
@@ -0,0 +1,181 @@
+
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+
+extern int8_t mlp_training_forward_4k_data[64];
+static constexpr int8_t* __module_data = mlp_training_forward_4k_data;
+alignas(64) static int8_t __uninitialized_data[0UL];
+
+static bool reorder__13(uint16_t* __outs_0, uint16_t* __ins_0);
+static bool matmul_core_cast_add_relu__14(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_add_relu__15(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static bool matmul_core_cast_add_relu__16(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2);
+static void reorder__130_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__140_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__150_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void matmul_core_cast_add_relu__160_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__130_closure_0(uint64_t fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__140_closure_1(uint64_t fused_0m_o__n_o_2, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__150_closure_2(uint64_t fused_0m_o__n_o_3, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+static void matmul_core_cast_add_relu__160_closure_3(uint64_t fused_0m_o__n_o_4, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0);
+
+
+extern "C" void mlp_training_forward_4k(uint16_t* relu_out0, uint16_t* relu_out1, uint16_t* relu_out2, uint16_t* input, uint16_t* weight0, uint16_t* bias0, uint16_t* weight1, uint16_t* bias1, uint16_t* weight2, uint16_t* bias2){
+  uint16_t* buffer_7 = (uint16_t*)sc_aligned_malloc(__stream, 131072UL);
+  reorder__13(buffer_7, input);
+  matmul_core_cast_add_relu__14(relu_out0, buffer_7, weight0, &bias0[0]);
+  matmul_core_cast_add_relu__15(relu_out1, relu_out0, weight1, &bias1[0]);
+  matmul_core_cast_add_relu__16(relu_out2, relu_out1, weight2, &bias2[0]);
+  sc_aligned_free(__stream, buffer_7);
+}
+
+static bool reorder__13(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs0[2UL];
+  __tempargs0[0UL] = __ins_0;
+  __tempargs0[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__130_closure_0_0wrapper, __stream, __module_data, 0UL, 128UL, 1UL, __tempargs0);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__14(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs1[4UL];
+  __tempargs1[0UL] = __ins_0;
+  __tempargs1[1UL] = __ins_1;
+  __tempargs1[2UL] = __ins_2;
+  __tempargs1[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__140_closure_1_0wrapper, __stream, __module_data, 0UL, 512UL, 1UL, __tempargs1);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__15(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs2[4UL];
+  __tempargs2[0UL] = __ins_0;
+  __tempargs2[1UL] = __ins_1;
+  __tempargs2[2UL] = __ins_2;
+  __tempargs2[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__150_closure_2_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs2);
+  return true;
+}
+
+static bool matmul_core_cast_add_relu__16(uint16_t* __outs_0, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2){
+  generic_val __tempargs3[4UL];
+  __tempargs3[0UL] = __ins_0;
+  __tempargs3[1UL] = __ins_1;
+  __tempargs3[2UL] = __ins_2;
+  __tempargs3[3UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&matmul_core_cast_add_relu__160_closure_3_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs3);
+  return true;
+}
+
+extern "C" void sc_init_mlp_training_forward_4k() {
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  void*& __sc_kernel_cache_1 = *(void**)(__module_data + 8);
+  void*& __sc_kernel_cache_2 = *(void**)(__module_data + 16);
+  __sc_kernel_cache = dnnl_brgemm_func(64, 64, 16, 16, 64, 64, 1024, 1024, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_1 = dnnl_brgemm_func(64, 64, 64, 512, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+  __sc_kernel_cache_2 = dnnl_brgemm_func(32, 64, 64, 256, 64, 64, 64, 4096, 0.f, 2, 2, ((void*)0), ((void*)0), ((void*)0));
+}
+
+static void reorder__130_closure_0(uint64_t fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner = 0UL; fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner < 32UL; fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner += 1UL) {
+    for (uint64_t _fuseiter_3 = 0UL; _fuseiter_3 < 16UL; _fuseiter_3 += 1UL) {
+      if (((_fuseiter_3 < 13UL) && (((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) % 64UL) + ((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) / 64UL) * 64UL)) < 4096UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) % 64UL) + ((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) / 64UL) * 64UL)) * 13UL) + _fuseiter_3)];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) / 64UL) * 1024UL) + (((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) % 64UL) * 16UL) + _fuseiter_3))] = __cached_1;
+      } else {
+        uint16_t __cached_2;
+        __cached_2 = 0UL;
+        __outs_0[(((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) / 64UL) * 1024UL) + (((((fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0outer * 32UL) + fused_0fused_0_fuseiter_0___fuseiter_1_0___fuseiter_2_1_0inner) % 64UL) * 16UL) + _fuseiter_3))] = __cached_2;
+      }
+    }
+  }
+}
+
+static void reorder__130_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__130_closure_0(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__140_closure_1(uint64_t fused_0m_o__n_o_2, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache = *(void**)(__module_data + 0);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_30_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache, &__ins_0[((fused_0m_o__n_o_2 / 8UL) * 1024UL)], &__ins_1[((fused_0m_o__n_o_2 % 8UL) * 1024UL)], &__origouts_30_shr[0UL], 1, __stream);
+  for (uint64_t _fuseiter4 = 0UL; _fuseiter4 < 64UL; _fuseiter4 += 1UL) {
+    for (uint64_t _fuseiter5 = 0UL; _fuseiter5 < 64UL; _fuseiter5 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_30_shr[((_fuseiter4 * 64UL) + _fuseiter5)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_2 % 8UL) * 64UL) + _fuseiter5)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_0 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_0);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_2 / 8UL) * 32768UL) + ((fused_0m_o__n_o_2 % 8UL) * 64UL)) + ((_fuseiter4 * 512UL) + _fuseiter5))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__140_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__140_closure_1(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__150_closure_2(uint64_t fused_0m_o__n_o_3, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_1 = *(void**)(__module_data + 8);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 16384UL);
+  float* __origouts_40_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_1, &__ins_0[((fused_0m_o__n_o_3 / 4UL) * 32768UL)], &__ins_1[((fused_0m_o__n_o_3 % 4UL) * 32768UL)], &__origouts_40_shr[0UL], 8, __stream);
+  for (uint64_t _fuseiter13 = 0UL; _fuseiter13 < 64UL; _fuseiter13 += 1UL) {
+    for (uint64_t _fuseiter14 = 0UL; _fuseiter14 < 64UL; _fuseiter14 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_40_shr[((_fuseiter13 * 64UL) + _fuseiter14)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_3 % 4UL) * 64UL) + _fuseiter14)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_1 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_1);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_3 / 4UL) * 16384UL) + ((fused_0m_o__n_o_3 % 4UL) * 64UL)) + ((_fuseiter13 * 256UL) + _fuseiter14))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__150_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__150_closure_2(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
+static void matmul_core_cast_add_relu__160_closure_3(uint64_t fused_0m_o__n_o_4, uint16_t* __ins_0, uint16_t* __ins_1, uint16_t* __ins_2, uint16_t* __outs_0){
+  void*& __sc_kernel_cache_2 = *(void**)(__module_data + 16);
+  int8_t* __rescheduled_1 = (int8_t*)sc_thread_aligned_malloc(__stream, 8192UL);
+  float* __origouts_50_shr = (float*)&__rescheduled_1[0UL];
+  dnnl_brgemm_call(__sc_kernel_cache_2, &__ins_0[((fused_0m_o__n_o_4 / 2UL) * 8192UL)], &__ins_1[((fused_0m_o__n_o_4 % 2UL) * 16384UL)], &__origouts_50_shr[0UL], 4, __stream);
+  for (uint64_t _fuseiter22 = 0UL; _fuseiter22 < 32UL; _fuseiter22 += 1UL) {
+    for (uint64_t _fuseiter23 = 0UL; _fuseiter23 < 64UL; _fuseiter23 += 16UL) {
+      vec_f32x16 __cached_0;
+      __cached_0 = vec_f32x16::load(&__origouts_50_shr[((_fuseiter22 * 64UL) + _fuseiter23)]);
+      vec_f32x16 __cached_1;
+      __cached_1 = __cached_0;
+      vec_f32x16 __cached_2;
+      __cached_2 = sc_reinterpret<vec_f32x16>(((vec_u32x16)(sc_reinterpret<vec_u16x16>(vec_u16x16::load(&__ins_2[(((fused_0m_o__n_o_4 % 2UL) * 64UL) + _fuseiter23)]))) << vec_u32x16(16UL)));
+      __cached_1 = (__cached_1 + __cached_2);
+      vec_u16x16 __cached_3;
+      vec_f32x16 _arg_cache_2 = sc_max(__cached_1, vec_f32x16(0.f));
+      __cached_3 = tobf16(_arg_cache_2);
+      vec_u16x16::store(__cached_3, &__outs_0[((((fused_0m_o__n_o_4 / 2UL) * 4096UL) + ((fused_0m_o__n_o_4 % 2UL) * 64UL)) + ((_fuseiter22 * 128UL) + _fuseiter23))]);
+    }
+  }
+  sc_thread_aligned_free(__stream, __rescheduled_1);
+}
+
+static void matmul_core_cast_add_relu__160_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  matmul_core_cast_add_relu__160_closure_3(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr), (uint16_t*)(args[2UL].v_ptr), (uint16_t*)(args[3UL].v_ptr));
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data128k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data128k.cpp
new file mode 100644
index 000000000..edc0ae0c1
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data128k.cpp
@@ -0,0 +1,3 @@
+#include <stdint.h>
+alignas(64) uint64_t mlp_training_forward_128k_data[]={
+0x29fe390,0x29fe380,0x29e93c0,};
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data4k.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data4k.cpp
new file mode 100644
index 000000000..76a78bf13
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/fwd_data4k.cpp
@@ -0,0 +1,3 @@
+#include <stdint.h>
+alignas(64) uint64_t mlp_training_forward_4k_data[]={
+0x2a1f1e0,0x2a1f1d0,0x2a12bb0,};
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/kernel_includes.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/kernel_includes.hpp
new file mode 100644
index 000000000..e6c61296c
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/kernel_includes.hpp
@@ -0,0 +1,43 @@
+#include <runtime/kernel_include/cpu_include.hpp>
+#include <runtime/config.hpp>
+
+extern "C"
+{
+    void *sc_aligned_malloc(void *stream, uint64_t size);
+    void sc_aligned_free(void *stream, void *ptr);
+    void sc_parallel_call_cpu_with_env(void *func, void *stream, int8_t *env,
+                                       uint64_t begin, uint64_t end, uint64_t step, generic_val *args);
+
+    void *sc_thread_aligned_malloc(void *stream, uint64_t size);
+    int32_t sc_brgemm_init_update(void *A, void *B, void *C, int32_t num, int32_t M,
+                                  int32_t N, int32_t K, int32_t LDA, int32_t LDB, int32_t LDC,
+                                  int32_t stride_a, int32_t stride_b, int32_t dtypeA, int32_t dtypeB,
+                                  void *brg_attrs, void *bd_mask, void *postops_setting,
+                                  void *postops_data, void *c_buf, void *stream);
+    void sc_thread_aligned_free(void *stream, void *ptr);
+
+    void dnnl_brgemm_list_call(void *brg_desc, void *A_list, void *B_list, void *C, int len, int num,
+                               int stride_a, int stride_b, int dtypeA, int dtypeB, void *stream);
+    void dnnl_brgemm_list_call_postops(void *brg_desc, void *A_list, void *B_list, void *C, int len, int num,
+                                       int stride_a, int stride_b, int dtypeA, int dtypeB,
+                                       void *postops_data, void *c_buf, void *stream);
+    void *dnnl_brgemm_func(int M, int N, int K, int LDA, int LDB, int LDC,
+                           int stride_a, int stride_b, float beta, int dtypeA, int dtypeB,
+                           const void *brg_attrs, void *bd_mask, const void *postops_setting);
+    void dnnl_brgemm_call(void *brg_desc, void *A, void *B, void *C, int num, void *stream);
+    void dnnl_brgemm_call_postops(void *brg_desc, void *A, void *B, void *C, int num,
+                                  void *postops_data, void *c_buf, void *stream);
+    void dnnl_brgemm_postops_data_init(void *dnnl_data, void *bias, void *scales,
+                                       void *binary_post_ops_rhs, uint64_t oc_logical_off,
+                                       uint64_t dst_row_logical_off, void *data_C_ptr_,
+                                       uint64_t first_mb_matrix_addr_off, void *a_zp_compensations,
+                                       void *b_zp_compensations, void *c_zp_values, bool skip_accumulation);
+}
+
+namespace sc
+{
+    namespace runtime
+    {
+        extern char default_stream;
+    }
+} // namespace sc
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/mlp.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/mlp.hpp
new file mode 100644
index 000000000..2d6e71ade
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/mlp.hpp
@@ -0,0 +1,81 @@
+#pragma once
+#include <stdint.h>
+
+
+/**
+ * mlp_training_forward_4k
+ * @param relu_out0 output tensor, [bf16 [4096, 512] @ AB]
+ * @param relu_out1 output tensor, [bf16 [4096, 256] @ AB]
+ * @param relu_out2 output tensor, [bf16 [4096, 128] @ AB]
+ * @param input input tensor, [bf16 [4096, 13] @ AB]
+ * @param weight0 input tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+ * @param bias0 input tensor, [bf16 [512] @ A]
+ * @param weight1 input tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param bias1 input tensor, [bf16 [256] @ A]
+ * @param weight2 input tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param bias2 input tensor, [bf16 [128] @ A]
+**/
+extern "C" void mlp_training_forward_4k(uint16_t* relu_out0, uint16_t* relu_out1, uint16_t* relu_out2, uint16_t* input, uint16_t* weight0, uint16_t* bias0, uint16_t* weight1, uint16_t* bias1, uint16_t* weight2, uint16_t* bias2);
+
+extern "C" void sc_init_mlp_training_forward_4k();
+
+/**
+ * mlp_training_backward_4k
+ * @param out_grad_bias2 output tensor, [bf16 [128] @ A]
+ * @param out_grad_weight2 output tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param out_grad_bias1 output tensor, [bf16 [256] @ A]
+ * @param out_grad_weight1 output tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param out_grad_bias0 output tensor, [bf16 [512] @ A]
+ * @param out_grad_weight0 output tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+ * @param out_grad_input0 output tensor, [bf16 [4096, 13] @ AB]
+ * @param gradient input tensor, [bf16 [4096, 128] @ AB]
+ * @param in_relu_output input tensor, [bf16 [4096, 128] @ AB]
+ * @param data_input2 input tensor, [bf16 [4096, 256] @ AB]
+ * @param weight_input2 input tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param data_input1 input tensor, [bf16 [4096, 512] @ AB]
+ * @param weight_input1 input tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param data_input0 input tensor, [bf16 [4096, 13] @ AB]
+ * @param weight_input0 input tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+**/
+extern "C" void mlp_training_backward_4k(uint16_t* out_grad_bias2, uint16_t* out_grad_weight2, uint16_t* out_grad_bias1, uint16_t* out_grad_weight1, uint16_t* out_grad_bias0, uint16_t* out_grad_weight0, uint16_t* out_grad_input0, uint16_t* gradient, uint16_t* in_relu_output, uint16_t* data_input2, uint16_t* weight_input2, uint16_t* data_input1, uint16_t* weight_input1, uint16_t* data_input0, uint16_t* weight_input0);
+
+extern "C" void sc_init_mlp_training_backward_4k();
+
+/**
+ * mlp_training_forward_128k
+ * @param relu_out0 output tensor, [bf16 [131072, 512] @ AB]
+ * @param relu_out1 output tensor, [bf16 [131072, 256] @ AB]
+ * @param relu_out2 output tensor, [bf16 [131072, 128] @ AB]
+ * @param input input tensor, [bf16 [131072, 13] @ AB]
+ * @param weight0 input tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+ * @param bias0 input tensor, [bf16 [512] @ A]
+ * @param weight1 input tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param bias1 input tensor, [bf16 [256] @ A]
+ * @param weight2 input tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param bias2 input tensor, [bf16 [128] @ A]
+**/
+extern "C" void mlp_training_forward_128k(uint16_t* relu_out0, uint16_t* relu_out1, uint16_t* relu_out2, uint16_t* input, uint16_t* weight0, uint16_t* bias0, uint16_t* weight1, uint16_t* bias1, uint16_t* weight2, uint16_t* bias2);
+
+extern "C" void sc_init_mlp_training_forward_128k();
+
+/**
+ * mlp_training_backward_128k
+ * @param out_grad_bias2 output tensor, [bf16 [128] @ A]
+ * @param out_grad_weight2 output tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param out_grad_bias1 output tensor, [bf16 [256] @ A]
+ * @param out_grad_weight1 output tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param out_grad_bias0 output tensor, [bf16 [512] @ A]
+ * @param out_grad_weight0 output tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+ * @param out_grad_input0 output tensor, [bf16 [131072, 13] @ AB]
+ * @param gradient input tensor, [bf16 [131072, 128] @ AB]
+ * @param in_relu_output input tensor, [bf16 [131072, 128] @ AB]
+ * @param data_input2 input tensor, [bf16 [131072, 256] @ AB]
+ * @param weight_input2 input tensor, [bf16 [256, 128] @ BA64a64b2a], real dims is [2, 4, 32, 64, 2]
+ * @param data_input1 input tensor, [bf16 [131072, 512] @ AB]
+ * @param weight_input1 input tensor, [bf16 [512, 256] @ BA64a64b2a], real dims is [4, 8, 32, 64, 2]
+ * @param data_input0 input tensor, [bf16 [131072, 13] @ AB]
+ * @param weight_input0 input tensor, [bf16 [13, 512] @ BA16a64b2a], real dims is [8, 1, 8, 64, 2]
+**/
+extern "C" void mlp_training_backward_128k(uint16_t* out_grad_bias2, uint16_t* out_grad_weight2, uint16_t* out_grad_bias1, uint16_t* out_grad_weight1, uint16_t* out_grad_bias0, uint16_t* out_grad_weight0, uint16_t* out_grad_input0, uint16_t* gradient, uint16_t* in_relu_output, uint16_t* data_input2, uint16_t* weight_input2, uint16_t* data_input1, uint16_t* weight_input1, uint16_t* data_input0, uint16_t* weight_input0);
+
+extern "C" void sc_init_mlp_training_backward_128k();
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/pack.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/pack.hpp
new file mode 100644
index 000000000..2969a9a3b
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/pack.hpp
@@ -0,0 +1,385 @@
+#pragma once
+#include "reorder.hpp"
+#include <string.h>
+
+namespace mlp_fwd_4k_shape {
+inline void pack_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void unpack_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void pack_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void unpack_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void pack_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void unpack_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void pack_relu_out0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 2097152);
+}
+
+inline void unpack_relu_out0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 2097152);
+}
+
+inline void pack_relu_out1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1048576);
+}
+
+inline void unpack_relu_out1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1048576);
+}
+
+inline void pack_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+}
+
+namespace mlp_bwd_4k_shape {
+inline void pack_data_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 53248);
+}
+
+inline void unpack_data_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 53248);
+}
+
+inline void pack_data_input1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 2097152);
+}
+
+inline void unpack_data_input1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 2097152);
+}
+
+inline void pack_data_input2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1048576);
+}
+
+inline void unpack_data_input2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1048576);
+}
+
+inline void pack_gradient(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 524288);
+}
+
+inline void unpack_gradient(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 524288);
+}
+
+inline void pack_in_relu_output(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 524288);
+}
+
+inline void unpack_in_relu_output(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 524288);
+}
+
+inline void pack_out_grad_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void unpack_out_grad_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void pack_out_grad_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void unpack_out_grad_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void pack_out_grad_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void unpack_out_grad_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void pack_out_grad_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 53248);
+}
+
+inline void unpack_out_grad_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 53248);
+}
+
+inline void pack_out_grad_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_out_grad_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_out_grad_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_weight_input0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight_input1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight_input2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+}
+
+
+namespace mlp_fwd_128k_shape {
+inline void pack_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void unpack_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void pack_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void unpack_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void pack_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void unpack_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void pack_relu_out0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 67108864);
+}
+
+inline void unpack_relu_out0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 67108864);
+}
+
+inline void pack_relu_out1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 33554432);
+}
+
+inline void unpack_relu_out1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 33554432);
+}
+
+inline void pack_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+}
+
+namespace mlp_bwd_128k_shape {
+inline void pack_data_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1703936);
+}
+
+inline void unpack_data_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1703936);
+}
+
+inline void pack_data_input1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 67108864);
+}
+
+inline void unpack_data_input1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 67108864);
+}
+
+inline void pack_data_input2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 33554432);
+}
+
+inline void unpack_data_input2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 33554432);
+}
+
+inline void pack_gradient(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 16777216);
+}
+
+inline void unpack_gradient(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 16777216);
+}
+
+inline void pack_in_relu_output(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 16777216);
+}
+
+inline void unpack_in_relu_output(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 16777216);
+}
+
+inline void pack_out_grad_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void unpack_out_grad_bias0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 512);
+}
+
+inline void pack_out_grad_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void unpack_out_grad_bias1(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 256);
+}
+
+inline void pack_out_grad_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void unpack_out_grad_bias2(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 128);
+}
+
+inline void pack_out_grad_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1703936);
+}
+
+inline void unpack_out_grad_input0(uint16_t* out, uint16_t* in) {
+    memcpy(out, in, sizeof(uint16_t) * 1703936);
+}
+
+inline void pack_out_grad_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_out_grad_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_out_grad_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_out_grad_weight2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_AB_BA16a64b2a(out, in);
+}
+
+inline void unpack_weight_input0(uint16_t* out, uint16_t* in) {
+    reorder_13x512_BA16a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight_input1(uint16_t* out, uint16_t* in) {
+    reorder_512x256_BA64a64b2a_AB(out, in);
+}
+
+inline void pack_weight_input2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_AB_BA64a64b2a(out, in);
+}
+
+inline void unpack_weight_input2(uint16_t* out, uint16_t* in) {
+    reorder_256x128_BA64a64b2a_AB(out, in);
+}
+
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.cpp
new file mode 100644
index 000000000..4bd53f414
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.cpp
@@ -0,0 +1,193 @@
+
+#include <kernel/kernel_includes.hpp>
+static constexpr void *__stream = &sc::runtime::default_stream;
+
+extern int8_t reorder_data[0];
+static constexpr int8_t* __module_data = reorder_data;
+alignas(64) static int8_t __uninitialized_data[0UL];
+
+extern "C" bool reorder_512x256_BA64a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0);
+extern "C" bool reorder_512x256_AB_BA64a64b2a(uint16_t* __outs_0, uint16_t* __ins_0);
+extern "C" bool reorder_256x128_BA64a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0);
+extern "C" bool reorder_256x128_AB_BA64a64b2a(uint16_t* __outs_0, uint16_t* __ins_0);
+extern "C" bool reorder_13x512_BA16a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0);
+extern "C" bool reorder_13x512_AB_BA16a64b2a(uint16_t* __outs_0, uint16_t* __ins_0);
+static void reorder__60_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__50_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__40_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__30_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__20_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__10_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args);
+static void reorder__60_closure_0(uint64_t fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__50_closure_1(uint64_t fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__40_closure_2(uint64_t fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__30_closure_3(uint64_t fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__20_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+static void reorder__10_closure_5(uint64_t fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer, uint16_t* __ins_0, uint16_t* __outs_0);
+
+
+static void main_entry(uint16_t* buffer_0, uint16_t* buffer_1, uint16_t* buffer_2, uint16_t* buffer_3, uint16_t* buffer_4, uint16_t* buffer_5, uint16_t* buffer_11, uint16_t* buffer_10, uint16_t* buffer_9, uint16_t* buffer_8, uint16_t* buffer_7, uint16_t* buffer_6){
+  reorder_512x256_BA64a64b2a_AB(buffer_6, buffer_5);
+  reorder_512x256_AB_BA64a64b2a(buffer_7, buffer_4);
+  reorder_256x128_BA64a64b2a_AB(buffer_8, buffer_3);
+  reorder_256x128_AB_BA64a64b2a(buffer_9, buffer_2);
+  reorder_13x512_BA16a64b2a_AB(buffer_10, buffer_1);
+  reorder_13x512_AB_BA16a64b2a(buffer_11, buffer_0);
+}
+
+extern "C" bool reorder_512x256_BA64a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs0[2UL];
+  __tempargs0[0UL] = __ins_0;
+  __tempargs0[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__60_closure_0_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs0);
+  return true;
+}
+
+extern "C" bool reorder_512x256_AB_BA64a64b2a(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs1[2UL];
+  __tempargs1[0UL] = __ins_0;
+  __tempargs1[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__50_closure_1_0wrapper, __stream, __module_data, 0UL, 256UL, 1UL, __tempargs1);
+  return true;
+}
+
+extern "C" bool reorder_256x128_BA64a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs2[2UL];
+  __tempargs2[0UL] = __ins_0;
+  __tempargs2[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__40_closure_2_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs2);
+  return true;
+}
+
+extern "C" bool reorder_256x128_AB_BA64a64b2a(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs3[2UL];
+  __tempargs3[0UL] = __ins_0;
+  __tempargs3[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__30_closure_3_0wrapper, __stream, __module_data, 0UL, 64UL, 1UL, __tempargs3);
+  return true;
+}
+
+extern "C" bool reorder_13x512_BA16a64b2a_AB(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs4[2UL];
+  __tempargs4[0UL] = __ins_0;
+  __tempargs4[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__20_closure_4_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs4);
+  return true;
+}
+
+extern "C" bool reorder_13x512_AB_BA16a64b2a(uint16_t* __outs_0, uint16_t* __ins_0){
+  generic_val __tempargs5[2UL];
+  __tempargs5[0UL] = __ins_0;
+  __tempargs5[1UL] = __outs_0;
+  sc_parallel_call_cpu_with_env((void*)&reorder__10_closure_5_0wrapper, __stream, __module_data, 0UL, 16UL, 1UL, __tempargs5);
+  return true;
+}
+
+static void reorder__60_closure_0(uint64_t fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner = 0UL; fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner < 4UL; fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner += 1UL) {
+    for (uint64_t _fuseiter_271 = 0UL; _fuseiter_271 < 64UL; _fuseiter_271 += 1UL) {
+      for (uint64_t _fuseiter_272 = 0UL; _fuseiter_272 < 2UL; _fuseiter_272 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) / 256UL) * 32768UL) + ((((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) / 32UL) % 8UL) * 4096UL) + (((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) % 32UL) * 128UL) + ((_fuseiter_271 * 2UL) + _fuseiter_272))))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[((((_fuseiter_272 + ((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) / 32UL) % 8UL) * 64UL)) * 256UL) + (_fuseiter_271 + ((((fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0outer * 4UL) + fused_0fused_0_fuseiter_268___fuseiter_269_58___fuseiter_270_59_0inner) / 256UL) * 64UL)))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__60_closure_0_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__60_closure_0(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__50_closure_1(uint64_t fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner = 0UL; fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner < 4UL; fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner += 1UL) {
+    for (uint64_t _fuseiter_276 = 0UL; _fuseiter_276 < 64UL; _fuseiter_276 += 1UL) {
+      for (uint64_t _fuseiter_277 = 0UL; _fuseiter_277 < 2UL; _fuseiter_277 += 1UL) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[((((_fuseiter_277 + ((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) % 32UL) * 2UL)) + (((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) / 32UL) % 8UL) * 64UL)) * 256UL) + (_fuseiter_276 + ((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) / 256UL) * 64UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) / 256UL) * 32768UL) + ((((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) / 32UL) % 8UL) * 4096UL) + (((((fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0outer * 4UL) + fused_0fused_0_fuseiter_273___fuseiter_274_60___fuseiter_275_61_0inner) % 32UL) * 128UL) + ((_fuseiter_276 * 2UL) + _fuseiter_277))))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__50_closure_1_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__50_closure_1(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__40_closure_2(uint64_t fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner = 0UL; fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner < 256UL; fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner += 1UL) {
+    for (uint64_t _fuseiter_282 = 0UL; _fuseiter_282 < 2UL; _fuseiter_282 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 8192UL) * 16384UL) + ((((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 2048UL) % 4UL) * 4096UL) + ((((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 64UL) % 32UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) % 64UL) * 2UL) + _fuseiter_282))))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[((((_fuseiter_282 + (((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 2048UL) % 4UL) * 64UL)) * 128UL) + ((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_278___fuseiter_279_62___fuseiter_280_63___fuseiter_281_64_0inner) / 8192UL) * 64UL)))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__40_closure_2_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__40_closure_2(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__30_closure_3(uint64_t fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner = 0UL; fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner < 256UL; fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner += 1UL) {
+    for (uint64_t _fuseiter_287 = 0UL; _fuseiter_287 < 2UL; _fuseiter_287 += 1UL) {
+      uint16_t __cached_0;
+      __cached_0 = __ins_0[((((_fuseiter_287 + (((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 64UL) % 32UL) * 2UL)) + (((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 2048UL) % 4UL) * 64UL)) * 128UL) + ((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 8192UL) * 64UL)))];
+      uint16_t __cached_1;
+      __cached_1 = __cached_0;
+      __outs_0[(((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 8192UL) * 16384UL) + ((((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 2048UL) % 4UL) * 4096UL) + ((((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) / 64UL) % 32UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_283___fuseiter_284_65___fuseiter_285_66___fuseiter_286_67_0inner) % 64UL) * 2UL) + _fuseiter_287))))] = __cached_1;
+    }
+  }
+}
+
+static void reorder__30_closure_3_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__30_closure_3(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__20_closure_4(uint64_t fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner = 0UL; fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner < 256UL; fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner += 1UL) {
+    for (uint64_t _fuseiter_292 = 0UL; _fuseiter_292 < 2UL; _fuseiter_292 += 1UL) {
+      if (((((_fuseiter_292 + (((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 64UL) % 8UL) * 2UL)) < 16UL) && ((_fuseiter_292 + (((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 64UL) % 8UL) * 2UL)) < 13UL)) && (((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 512UL) * 64UL)) < 512UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) % 64UL) * 2UL) + _fuseiter_292)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((_fuseiter_292 + (((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 64UL) % 8UL) * 2UL)) * 512UL) + ((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_288___fuseiter_289_68___fuseiter_290_69___fuseiter_291_70_0inner) / 512UL) * 64UL)))] = __cached_1;
+      }
+    }
+  }
+}
+
+static void reorder__20_closure_4_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__20_closure_4(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
+static void reorder__10_closure_5(uint64_t fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer, uint16_t* __ins_0, uint16_t* __outs_0){
+  for (uint64_t fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner = 0UL; fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner < 256UL; fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner += 1UL) {
+    for (uint64_t _fuseiter_297 = 0UL; _fuseiter_297 < 2UL; _fuseiter_297 += 1UL) {
+      if (((((_fuseiter_297 + (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 64UL) % 8UL) * 2UL)) < 16UL) && ((_fuseiter_297 + (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 64UL) % 8UL) * 2UL)) < 13UL)) && (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 512UL) * 64UL)) < 512UL))) {
+        uint16_t __cached_0;
+        __cached_0 = __ins_0[(((_fuseiter_297 + (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 64UL) % 8UL) * 2UL)) * 512UL) + ((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) % 64UL) + ((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 512UL) * 64UL)))];
+        uint16_t __cached_1;
+        __cached_1 = __cached_0;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) % 64UL) * 2UL) + _fuseiter_297)))] = __cached_1;
+      } else {
+        uint16_t __cached_2;
+        __cached_2 = 0UL;
+        __outs_0[(((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 512UL) * 1024UL) + ((((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) / 64UL) % 8UL) * 128UL) + (((((fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0outer * 256UL) + fused_0fused_0fused_0_fuseiter_293___fuseiter_294_71___fuseiter_295_72___fuseiter_296_73_0inner) % 64UL) * 2UL) + _fuseiter_297)))] = __cached_2;
+      }
+    }
+  }
+}
+
+static void reorder__10_closure_5_0wrapper(void* __stream, int8_t* __module_data, uint64_t i, generic_val* args){
+  reorder__10_closure_5(i, (uint16_t*)(args[0UL].v_ptr), (uint16_t*)(args[1UL].v_ptr));
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.hpp
new file mode 100644
index 000000000..4708a3837
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder.hpp
@@ -0,0 +1,38 @@
+#pragma once
+#include <stdint.h>
+
+
+/**
+ * Do reorder from AB format to BA16a64b2a format. Plain dims is 13x512
+**/
+extern "C" bool reorder_13x512_AB_BA16a64b2a(uint16_t* out, uint16_t* in);
+
+
+/**
+ * Do reorder from BA16a64b2a format to AB format. Plain dims is 13x512
+**/
+extern "C" bool reorder_13x512_BA16a64b2a_AB(uint16_t* out, uint16_t* in);
+
+
+/**
+ * Do reorder from AB format to BA64a64b2a format. Plain dims is 256x128
+**/
+extern "C" bool reorder_256x128_AB_BA64a64b2a(uint16_t* out, uint16_t* in);
+
+
+/**
+ * Do reorder from BA64a64b2a format to AB format. Plain dims is 256x128
+**/
+extern "C" bool reorder_256x128_BA64a64b2a_AB(uint16_t* out, uint16_t* in);
+
+
+/**
+ * Do reorder from AB format to BA64a64b2a format. Plain dims is 512x256
+**/
+extern "C" bool reorder_512x256_AB_BA64a64b2a(uint16_t* out, uint16_t* in);
+
+
+/**
+ * Do reorder from BA64a64b2a format to AB format. Plain dims is 512x256
+**/
+extern "C" bool reorder_512x256_BA64a64b2a_AB(uint16_t* out, uint16_t* in);
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder_data.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder_data.cpp
new file mode 100644
index 000000000..423c0b24c
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/reorder_data.cpp
@@ -0,0 +1,3 @@
+#include <stdint.h>
+alignas(64) uint64_t reorder_data[]={
+};
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/shape.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/shape.hpp
new file mode 100644
index 000000000..cce5f1af4
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/src/kernel_mlp/shape.hpp
@@ -0,0 +1,266 @@
+#pragma once
+#include <array>
+
+namespace mlp_fwd_4k_shape {
+inline const std::array<int, 1>& bias0() {
+    static const std::array<int, 1> shape = {512};
+    return shape;
+}
+
+inline const std::array<int, 1>& bias1() {
+    static const std::array<int, 1> shape = {256};
+    return shape;
+}
+
+inline const std::array<int, 1>& bias2() {
+    static const std::array<int, 1> shape = {128};
+    return shape;
+}
+
+inline const std::array<int, 2>& input() {
+    static const std::array<int, 2> shape = {4096,13};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out0() {
+    static const std::array<int, 2> shape = {4096,512};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out1() {
+    static const std::array<int, 2> shape = {4096,256};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out2() {
+    static const std::array<int, 2> shape = {4096,128};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+}
+
+namespace mlp_bwd_4k_shape {
+inline const std::array<int, 2>& data_input0() {
+    static const std::array<int, 2> shape = {4096,13};
+    return shape;
+}
+
+inline const std::array<int, 2>& data_input1() {
+    static const std::array<int, 2> shape = {4096,512};
+    return shape;
+}
+
+inline const std::array<int, 2>& data_input2() {
+    static const std::array<int, 2> shape = {4096,256};
+    return shape;
+}
+
+inline const std::array<int, 2>& gradient() {
+    static const std::array<int, 2> shape = {4096,128};
+    return shape;
+}
+
+inline const std::array<int, 2>& in_relu_output() {
+    static const std::array<int, 2> shape = {4096,128};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias0() {
+    static const std::array<int, 1> shape = {512};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias1() {
+    static const std::array<int, 1> shape = {256};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias2() {
+    static const std::array<int, 1> shape = {128};
+    return shape;
+}
+
+inline const std::array<int, 2>& out_grad_input0() {
+    static const std::array<int, 2> shape = {4096,13};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+}
+
+
+namespace mlp_fwd_128k_shape {
+inline const std::array<int, 1>& bias0() {
+    static const std::array<int, 1> shape = {512};
+    return shape;
+}
+
+inline const std::array<int, 1>& bias1() {
+    static const std::array<int, 1> shape = {256};
+    return shape;
+}
+
+inline const std::array<int, 1>& bias2() {
+    static const std::array<int, 1> shape = {128};
+    return shape;
+}
+
+inline const std::array<int, 2>& input() {
+    static const std::array<int, 2> shape = {131072,13};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out0() {
+    static const std::array<int, 2> shape = {131072,512};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out1() {
+    static const std::array<int, 2> shape = {131072,256};
+    return shape;
+}
+
+inline const std::array<int, 2>& relu_out2() {
+    static const std::array<int, 2> shape = {131072,128};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+}
+
+namespace mlp_bwd_128k_shape {
+inline const std::array<int, 2>& data_input0() {
+    static const std::array<int, 2> shape = {131072,13};
+    return shape;
+}
+
+inline const std::array<int, 2>& data_input1() {
+    static const std::array<int, 2> shape = {131072,512};
+    return shape;
+}
+
+inline const std::array<int, 2>& data_input2() {
+    static const std::array<int, 2> shape = {131072,256};
+    return shape;
+}
+
+inline const std::array<int, 2>& gradient() {
+    static const std::array<int, 2> shape = {131072,128};
+    return shape;
+}
+
+inline const std::array<int, 2>& in_relu_output() {
+    static const std::array<int, 2> shape = {131072,128};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias0() {
+    static const std::array<int, 1> shape = {512};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias1() {
+    static const std::array<int, 1> shape = {256};
+    return shape;
+}
+
+inline const std::array<int, 1>& out_grad_bias2() {
+    static const std::array<int, 1> shape = {128};
+    return shape;
+}
+
+inline const std::array<int, 2>& out_grad_input0() {
+    static const std::array<int, 2> shape = {131072,13};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& out_grad_weight2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input0() {
+    static const std::array<int, 5> shape = {8,1,8,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input1() {
+    static const std::array<int, 5> shape = {4,8,32,64,2};
+    return shape;
+}
+
+inline const std::array<int, 5>& weight_input2() {
+    static const std::array<int, 5> shape = {2,4,32,64,2};
+    return shape;
+}
+
+}
+
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/mlpkerneltest.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/mlpkerneltest.cpp
new file mode 100644
index 000000000..6a7ae13c2
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/mlpkerneltest.cpp
@@ -0,0 +1,118 @@
+#include <chrono>
+#include <kernel_mlp/mlp.hpp>
+#include <kernel_mlp/pack.hpp>
+#include <kernel_mlp/shape.hpp>
+#include <stdint.h>
+#include <stdio.h>
+#include <vector>
+
+template <typename T, size_t N> size_t product(const std::array<T, N> &v) {
+  size_t ret = 1;
+  for (auto a : v) {
+    ret *= a;
+  }
+  return ret;
+}
+
+int main() {
+  // plain inputs
+  std::vector<uint16_t> plain_relu_out0(
+      product(mlp_fwd_4k_shape::relu_out0())); // 128 * 512
+  std::vector<uint16_t> plain_relu_out1(
+      product(mlp_fwd_4k_shape::relu_out1())); // 128 * 256
+  std::vector<uint16_t> plain_relu_out2(
+      product(mlp_fwd_4k_shape::relu_out2())); // 128 * 256
+  std::vector<uint16_t> plain_input(product(mlp_fwd_4k_shape::input()));
+  std::vector<uint16_t> plain_weight0(product(mlp_fwd_4k_shape::weight0()));
+  std::vector<uint16_t> plain_bias0(product(mlp_fwd_4k_shape::bias0()));
+  std::vector<uint16_t> plain_weight1(product(mlp_fwd_4k_shape::weight1()));
+  std::vector<uint16_t> plain_bias1(product(mlp_fwd_4k_shape::bias1()));
+  std::vector<uint16_t> plain_weight2(product(mlp_fwd_4k_shape::weight2()));
+  std::vector<uint16_t> plain_bias2(product(mlp_fwd_4k_shape::bias2()));
+
+  // pack data
+  std::vector<uint16_t> relu_out0(
+      product(mlp_fwd_4k_shape::relu_out0())); // 128 * 512
+  mlp_fwd_4k_shape::pack_relu_out0(relu_out0.data(), plain_relu_out0.data());
+  std::vector<uint16_t> relu_out1(
+      product(mlp_fwd_4k_shape::relu_out1())); // 128 * 256
+  mlp_fwd_4k_shape::pack_relu_out1(relu_out1.data(), plain_relu_out1.data());
+  std::vector<uint16_t> weight0(product(mlp_fwd_4k_shape::weight0()));
+  mlp_fwd_4k_shape::pack_weight0(weight0.data(), plain_weight0.data());
+  std::vector<uint16_t> bias0(product(mlp_fwd_4k_shape::bias0()));
+  mlp_fwd_4k_shape::pack_bias0(bias0.data(), plain_bias0.data());
+  std::vector<uint16_t> weight1(product(mlp_fwd_4k_shape::weight1()));
+  mlp_fwd_4k_shape::pack_weight1(weight1.data(), plain_weight1.data());
+  std::vector<uint16_t> bias1(product(mlp_fwd_4k_shape::bias1()));
+  mlp_fwd_4k_shape::pack_bias1(bias1.data(), plain_bias1.data());
+  std::vector<uint16_t> weight2(product(mlp_fwd_4k_shape::weight2()));
+  mlp_fwd_4k_shape::pack_weight2(weight2.data(), plain_weight2.data());
+  std::vector<uint16_t> bias2(product(mlp_fwd_4k_shape::bias2()));
+  mlp_fwd_4k_shape::pack_bias2(bias2.data(), plain_bias2.data());
+
+  // grad outputs
+  std::vector<uint16_t> g_weight0(
+      product(mlp_bwd_4k_shape::out_grad_weight0()));
+  std::vector<uint16_t> g_bias0(product(mlp_bwd_4k_shape::out_grad_bias0()));
+  std::vector<uint16_t> g_weight1(
+      product(mlp_bwd_4k_shape::out_grad_weight1()));
+  std::vector<uint16_t> g_bias1(product(mlp_bwd_4k_shape::out_grad_bias1()));
+  std::vector<uint16_t> g_weight2(
+      product(mlp_bwd_4k_shape::out_grad_weight2()));
+  std::vector<uint16_t> g_bias2(product(mlp_bwd_4k_shape::out_grad_bias2()));
+  std::vector<uint16_t> g_input(product(mlp_bwd_4k_shape::out_grad_input0()));
+  std::vector<uint16_t> gradient(product(mlp_bwd_4k_shape::gradient()));
+
+  // init kernel
+  sc_init_mlp_training_backward_4k();
+  sc_init_mlp_training_forward_4k();
+
+  using namespace std::chrono;
+  auto start_time = steady_clock::now();
+  const int times = 100;
+  for (int i = 0; i < times; i++) {
+    mlp_training_forward_4k(relu_out0.data(), relu_out1.data(),
+                            plain_relu_out2.data(), plain_input.data(),
+                            weight0.data(), bias0.data(), weight1.data(),
+                            bias1.data(), weight2.data(), bias2.data());
+
+    mlp_training_backward_4k(
+        g_bias2.data(), g_weight2.data(), g_bias1.data(), g_weight1.data(),
+        g_bias0.data(), g_weight0.data(), g_input.data(), gradient.data(),
+        plain_relu_out2.data(), relu_out1.data(), weight2.data(),
+        relu_out0.data(), weight1.data(), plain_input.data(), weight0.data());
+  }
+  printf("Done FWD+BWD %d times in %ld us\n", times,
+         duration_cast<microseconds>(steady_clock::now() - start_time).count());
+
+  // unpack data
+  std::vector<uint16_t> plain_g_weight0(
+      product(mlp_bwd_4k_shape::out_grad_weight0()));
+  mlp_bwd_4k_shape::unpack_out_grad_weight0(plain_g_weight0.data(),
+                                            g_weight0.data());
+  std::vector<uint16_t> plain_g_bias0(
+      product(mlp_bwd_4k_shape::out_grad_bias0()));
+  mlp_bwd_4k_shape::unpack_out_grad_bias0(plain_g_bias0.data(), g_bias0.data());
+  std::vector<uint16_t> plain_g_weight1(
+      product(mlp_bwd_4k_shape::out_grad_weight1()));
+  mlp_bwd_4k_shape::unpack_out_grad_weight1(plain_g_weight1.data(),
+                                            g_weight1.data());
+  std::vector<uint16_t> plain_g_bias1(
+      product(mlp_bwd_4k_shape::out_grad_bias1()));
+  mlp_bwd_4k_shape::unpack_out_grad_bias1(plain_g_bias1.data(), g_bias1.data());
+  std::vector<uint16_t> plain_g_weight2(
+      product(mlp_bwd_4k_shape::out_grad_weight2()));
+  mlp_bwd_4k_shape::unpack_out_grad_weight2(plain_g_weight2.data(),
+                                            g_weight2.data());
+  std::vector<uint16_t> plain_g_bias2(
+      product(mlp_bwd_4k_shape::out_grad_bias2()));
+  mlp_bwd_4k_shape::unpack_out_grad_bias2(plain_g_bias2.data(), g_bias2.data());
+  std::vector<uint16_t> plain_g_input(
+      product(mlp_bwd_4k_shape::out_grad_input0()));
+  mlp_bwd_4k_shape::unpack_out_grad_input0(plain_g_input.data(),
+                                           g_input.data());
+  std::vector<uint16_t> plain_gradient(product(mlp_bwd_4k_shape::gradient()));
+  mlp_bwd_4k_shape::unpack_gradient(plain_gradient.data(), gradient.data());
+
+  return 0;
+}
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/qinfo_data_check.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/qinfo_data_check.cpp
new file mode 100644
index 000000000..bbdc8784f
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/qinfo_data_check.cpp
@@ -0,0 +1,59 @@
+#include <chrono>
+#include <iostream>
+#include <stdint.h>
+#include <stdio.h>
+#include <vector>
+
+using namespace std;
+
+// 222400 / 8
+extern uint64_t rn50_backbone_bs9_data[27800];
+extern uint64_t qinfos_data[26760];
+
+int main() {
+  size_t full_data_size = sizeof(rn50_backbone_bs9_data);
+  size_t qinfos_data_size = sizeof(qinfos_data);
+
+  size_t full_data_elems = full_data_size / sizeof(uint64_t);
+  size_t qinfos_data_elems = qinfos_data_size / sizeof(uint64_t);
+
+  std::cout << "full_data_size=" << full_data_size
+            << ", qinfos_data_size=" << qinfos_data_size << std::endl;
+
+  size_t offset = full_data_elems - qinfos_data_elems;
+#define OFFSET 26760
+  //#define OFFSET 13930
+  //#define OFFSET 13420 //includes last two dequantize
+  //#define OFFSET 13248
+  // weight 13248
+  size_t off1 = full_data_elems - OFFSET;
+  size_t off2 = qinfos_data_elems - OFFSET;
+
+  // check by uint64_t element
+  bool pass = true;
+  size_t fail_cnt = 0;
+  for (size_t i = 0; i < OFFSET; ++i) {
+    auto src1 = rn50_backbone_bs9_data[off1 + i];
+    auto src2 = qinfos_data[off2 + i];
+
+    if (src1 != src2) {
+      //   std::cout << "ERROR: [" << i << "], src1=" << src1 << ", src2=" <<
+      //   src2
+      //             << std::endl;
+      printf("ERROR: [%d], src1=0x%lx, src2=0x%lx\n", (int)i, src1, src2);
+      pass = false;
+      fail_cnt++;
+    } else {
+      if (i < 256)
+        printf("VALID: [%d], src1=0x%lx, src2=0x%lx\n", (int)i, src1, src2);
+    }
+  }
+
+  if (!pass) {
+    std::cout << "FAILED in data conversion!" << fail_cnt << "/" << OFFSET
+              << "\n";
+  } else {
+    std::cout << "PASSED in data conversion for " << OFFSET << "!\n";
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs256.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs256.cpp
new file mode 100644
index 000000000..3ec652208
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs256.cpp
@@ -0,0 +1,324 @@
+#include "utils.hpp"
+
+#define NUM_THREADS 56
+#define BUFFER_NUM_PER_INSTANCE 2
+
+#define BACKBONE_SHAPE backbone_256_shape
+#define SC_INIT_RN50_BACKBONE sc_init_rn50_backbone_bs256
+#define RN50_BACKBONE rn50_backbone_bs256
+
+#define TENSOR(NAME) \
+    aligned_vector<float> NAME(product(BACKBONE_SHAPE::NAME()));
+
+#define FILL_TENSOR(NAME) \
+    uniform(-1.f, 1.f, product(BACKBONE_SHAPE::NAME()), \
+            static_cast<float *>(NAME.data()));
+
+// cat ../src/kernel_rn50/shape.hpp | grep "inline const" | awk -F"&" '{print
+// $2}' | awk -F"(" '{print "TENSOR("$1 ");"}'
+// plain inputs
+std::vector<aligned_vector<int8_t>> backbone_input;
+std::vector<aligned_vector<int8_t>> backbone_output;
+TENSOR(res2a_bias_0);
+TENSOR(res2a_bias_1);
+TENSOR(res2a_bias_2);
+TENSOR(res2a_bias_b);
+TENSOR(res2a_weight_0);
+TENSOR(res2a_weight_1);
+TENSOR(res2a_weight_2);
+TENSOR(res2a_weight_b);
+TENSOR(res2b_bias_0);
+TENSOR(res2b_bias_1);
+TENSOR(res2b_bias_2);
+TENSOR(res2b_weight_0);
+TENSOR(res2b_weight_1);
+TENSOR(res2b_weight_2);
+TENSOR(res2c_bias_0);
+TENSOR(res2c_bias_1);
+TENSOR(res2c_bias_2);
+TENSOR(res2c_weight_0);
+TENSOR(res2c_weight_1);
+TENSOR(res2c_weight_2);
+TENSOR(res3a_bias_0);
+TENSOR(res3a_bias_1);
+TENSOR(res3a_bias_2);
+TENSOR(res3a_bias_b);
+TENSOR(res3a_weight_0);
+TENSOR(res3a_weight_1);
+TENSOR(res3a_weight_2);
+TENSOR(res3a_weight_b);
+TENSOR(res3b_bias_0);
+TENSOR(res3b_bias_1);
+TENSOR(res3b_bias_2);
+TENSOR(res3b_weight_0);
+TENSOR(res3b_weight_1);
+TENSOR(res3b_weight_2);
+TENSOR(res3c_bias_0);
+TENSOR(res3c_bias_1);
+TENSOR(res3c_bias_2);
+TENSOR(res3c_weight_0);
+TENSOR(res3c_weight_1);
+TENSOR(res3c_weight_2);
+TENSOR(res3d_bias_0);
+TENSOR(res3d_bias_1);
+TENSOR(res3d_bias_2);
+TENSOR(res3d_weight_0);
+TENSOR(res3d_weight_1);
+TENSOR(res3d_weight_2);
+TENSOR(res4a_bias_0);
+TENSOR(res4a_bias_1);
+TENSOR(res4a_bias_2);
+TENSOR(res4a_bias_b);
+TENSOR(res4a_weight_0);
+TENSOR(res4a_weight_1);
+TENSOR(res4a_weight_2);
+TENSOR(res4a_weight_b);
+TENSOR(res4b_bias_0);
+TENSOR(res4b_bias_1);
+TENSOR(res4b_bias_2);
+TENSOR(res4b_weight_0);
+TENSOR(res4b_weight_1);
+TENSOR(res4b_weight_2);
+TENSOR(res4c_bias_0);
+TENSOR(res4c_bias_1);
+TENSOR(res4c_bias_2);
+TENSOR(res4c_weight_0);
+TENSOR(res4c_weight_1);
+TENSOR(res4c_weight_2);
+TENSOR(res4d_bias_0);
+TENSOR(res4d_bias_1);
+TENSOR(res4d_bias_2);
+TENSOR(res4d_weight_0);
+TENSOR(res4d_weight_1);
+TENSOR(res4d_weight_2);
+TENSOR(res4e_bias_0);
+TENSOR(res4e_bias_1);
+TENSOR(res4e_bias_2);
+TENSOR(res4e_weight_0);
+TENSOR(res4e_weight_1);
+TENSOR(res4e_weight_2);
+TENSOR(res4f_bias_0);
+TENSOR(res4f_bias_1);
+TENSOR(res4f_bias_2);
+TENSOR(res4f_weight_0);
+TENSOR(res4f_weight_1);
+TENSOR(res4f_weight_2);
+TENSOR(res5a_bias_0);
+TENSOR(res5a_bias_1);
+TENSOR(res5a_bias_2);
+TENSOR(res5a_bias_b);
+TENSOR(res5a_weight_0);
+TENSOR(res5a_weight_1);
+TENSOR(res5a_weight_2);
+TENSOR(res5a_weight_b);
+TENSOR(res5b_bias_0);
+TENSOR(res5b_bias_1);
+TENSOR(res5b_bias_2);
+TENSOR(res5b_weight_0);
+TENSOR(res5b_weight_1);
+TENSOR(res5b_weight_2);
+TENSOR(res5c_bias_0);
+TENSOR(res5c_bias_1);
+TENSOR(res5c_bias_2);
+TENSOR(res5c_weight_0);
+TENSOR(res5c_weight_1);
+TENSOR(res5c_weight_2);
+
+static inline void run_with_single_instance(
+        const int dst_idx = 0, const int src_idx = 0) {
+    RN50_BACKBONE(backbone_output[dst_idx].data(),
+            backbone_input[src_idx].data(), res2a_weight_b.data(),
+            res2a_bias_b.data(), res2a_weight_0.data(), res2a_bias_0.data(),
+            res2a_weight_1.data(), res2a_bias_1.data(), res2a_weight_2.data(),
+            res2a_bias_2.data(), res2b_weight_0.data(), res2b_bias_0.data(),
+            res2b_weight_1.data(), res2b_bias_1.data(), res2b_weight_2.data(),
+            res2b_bias_2.data(), res2c_weight_0.data(), res2c_bias_0.data(),
+            res2c_weight_1.data(), res2c_bias_1.data(), res2c_weight_2.data(),
+            res2c_bias_2.data(), res3a_weight_b.data(), res3a_bias_b.data(),
+            res3a_weight_0.data(), res3a_bias_0.data(), res3a_weight_1.data(),
+            res3a_bias_1.data(), res3a_weight_2.data(), res3a_bias_2.data(),
+            res3b_weight_0.data(), res3b_bias_0.data(), res3b_weight_1.data(),
+            res3b_bias_1.data(), res3b_weight_2.data(), res3b_bias_2.data(),
+            res3c_weight_0.data(), res3c_bias_0.data(), res3c_weight_1.data(),
+            res3c_bias_1.data(), res3c_weight_2.data(), res3c_bias_2.data(),
+            res3d_weight_0.data(), res3d_bias_0.data(), res3d_weight_1.data(),
+            res3d_bias_1.data(), res3d_weight_2.data(), res3d_bias_2.data(),
+            res4a_weight_b.data(), res4a_bias_b.data(), res4a_weight_0.data(),
+            res4a_bias_0.data(), res4a_weight_1.data(), res4a_bias_1.data(),
+            res4a_weight_2.data(), res4a_bias_2.data(), res4b_weight_0.data(),
+            res4b_bias_0.data(), res4b_weight_1.data(), res4b_bias_1.data(),
+            res4b_weight_2.data(), res4b_bias_2.data(), res4c_weight_0.data(),
+            res4c_bias_0.data(), res4c_weight_1.data(), res4c_bias_1.data(),
+            res4c_weight_2.data(), res4c_bias_2.data(), res4d_weight_0.data(),
+            res4d_bias_0.data(), res4d_weight_1.data(), res4d_bias_1.data(),
+            res4d_weight_2.data(), res4d_bias_2.data(), res4e_weight_0.data(),
+            res4e_bias_0.data(), res4e_weight_1.data(), res4e_bias_1.data(),
+            res4e_weight_2.data(), res4e_bias_2.data(), res4f_weight_0.data(),
+            res4f_bias_0.data(), res4f_weight_1.data(), res4f_bias_1.data(),
+            res4f_weight_2.data(), res4f_bias_2.data(), res5a_weight_b.data(),
+            res5a_bias_b.data(), res5a_weight_0.data(), res5a_bias_0.data(),
+            res5a_weight_1.data(), res5a_bias_1.data(), res5a_weight_2.data(),
+            res5a_bias_2.data(), res5b_weight_0.data(), res5b_bias_0.data(),
+            res5b_weight_1.data(), res5b_bias_1.data(), res5b_weight_2.data(),
+            res5b_bias_2.data(), res5c_weight_0.data(), res5c_bias_0.data(),
+            res5c_weight_1.data(), res5c_bias_1.data(), res5c_weight_2.data(),
+            res5c_bias_2.data());
+}
+
+static float run_with_multiple_instances(const int times) {
+    using namespace std::chrono;
+    std::vector<float> elapsed(NUM_THREADS);
+#pragma omp parallel for num_threads(NUM_THREADS)
+    for (int tid = 0; tid < NUM_THREADS; ++tid) {
+        auto start_time = steady_clock::now();
+        for (int i = 0; i < times; i++) {
+            run_with_single_instance(tid, tid);
+            // tid, tid * BUFFER_NUM_PER_INSTANCE + i % 2);
+        }
+        elapsed[tid] = 1.f
+                * duration_cast<microseconds>(steady_clock::now() - start_time)
+                          .count()
+                / (1000 * times);
+    }
+    float sum = 0.f;
+    for (int tid = 0; tid < NUM_THREADS; ++tid) {
+        sum += elapsed[tid];
+    }
+    return sum / NUM_THREADS;
+}
+
+int main(int argc, char **argv) {
+    int times = 20;
+    if (argc > 1) { times = std::stoi(argv[1]); }
+
+    // allocate in & out buffer for multi-instance scenario
+    for (int tid = 0; tid < NUM_THREADS; ++tid) {
+        for (int i = 0; i < BUFFER_NUM_PER_INSTANCE; ++i) {
+            backbone_input.emplace_back(aligned_vector<int8_t>(
+                    product(BACKBONE_SHAPE::backbone_input()), 1.f));
+        }
+        backbone_output.emplace_back(aligned_vector<int8_t>(
+                product(BACKBONE_SHAPE::backbone_output())));
+    }
+
+    // fill weights
+    FILL_TENSOR(res2a_bias_0);
+    FILL_TENSOR(res2a_bias_1);
+    FILL_TENSOR(res2a_bias_2);
+    FILL_TENSOR(res2a_bias_b);
+    FILL_TENSOR(res2a_weight_0);
+    FILL_TENSOR(res2a_weight_1);
+    FILL_TENSOR(res2a_weight_2);
+    FILL_TENSOR(res2a_weight_b);
+    FILL_TENSOR(res2b_bias_0);
+    FILL_TENSOR(res2b_bias_1);
+    FILL_TENSOR(res2b_bias_2);
+    FILL_TENSOR(res2b_weight_0);
+    FILL_TENSOR(res2b_weight_1);
+    FILL_TENSOR(res2b_weight_2);
+    FILL_TENSOR(res2c_bias_0);
+    FILL_TENSOR(res2c_bias_1);
+    FILL_TENSOR(res2c_bias_2);
+    FILL_TENSOR(res2c_weight_0);
+    FILL_TENSOR(res2c_weight_1);
+    FILL_TENSOR(res2c_weight_2);
+    FILL_TENSOR(res3a_bias_0);
+    FILL_TENSOR(res3a_bias_1);
+    FILL_TENSOR(res3a_bias_2);
+    FILL_TENSOR(res3a_bias_b);
+    FILL_TENSOR(res3a_weight_0);
+    FILL_TENSOR(res3a_weight_1);
+    FILL_TENSOR(res3a_weight_2);
+    FILL_TENSOR(res3a_weight_b);
+    FILL_TENSOR(res3b_bias_0);
+    FILL_TENSOR(res3b_bias_1);
+    FILL_TENSOR(res3b_bias_2);
+    FILL_TENSOR(res3b_weight_0);
+    FILL_TENSOR(res3b_weight_1);
+    FILL_TENSOR(res3b_weight_2);
+    FILL_TENSOR(res3c_bias_0);
+    FILL_TENSOR(res3c_bias_1);
+    FILL_TENSOR(res3c_bias_2);
+    FILL_TENSOR(res3c_weight_0);
+    FILL_TENSOR(res3c_weight_1);
+    FILL_TENSOR(res3c_weight_2);
+    FILL_TENSOR(res3d_bias_0);
+    FILL_TENSOR(res3d_bias_1);
+    FILL_TENSOR(res3d_bias_2);
+    FILL_TENSOR(res3d_weight_0);
+    FILL_TENSOR(res3d_weight_1);
+    FILL_TENSOR(res3d_weight_2);
+    FILL_TENSOR(res4a_bias_0);
+    FILL_TENSOR(res4a_bias_1);
+    FILL_TENSOR(res4a_bias_2);
+    FILL_TENSOR(res4a_bias_b);
+    FILL_TENSOR(res4a_weight_0);
+    FILL_TENSOR(res4a_weight_1);
+    FILL_TENSOR(res4a_weight_2);
+    FILL_TENSOR(res4a_weight_b);
+    FILL_TENSOR(res4b_bias_0);
+    FILL_TENSOR(res4b_bias_1);
+    FILL_TENSOR(res4b_bias_2);
+    FILL_TENSOR(res4b_weight_0);
+    FILL_TENSOR(res4b_weight_1);
+    FILL_TENSOR(res4b_weight_2);
+    FILL_TENSOR(res4c_bias_0);
+    FILL_TENSOR(res4c_bias_1);
+    FILL_TENSOR(res4c_bias_2);
+    FILL_TENSOR(res4c_weight_0);
+    FILL_TENSOR(res4c_weight_1);
+    FILL_TENSOR(res4c_weight_2);
+    FILL_TENSOR(res4d_bias_0);
+    FILL_TENSOR(res4d_bias_1);
+    FILL_TENSOR(res4d_bias_2);
+    FILL_TENSOR(res4d_weight_0);
+    FILL_TENSOR(res4d_weight_1);
+    FILL_TENSOR(res4d_weight_2);
+    FILL_TENSOR(res4e_bias_0);
+    FILL_TENSOR(res4e_bias_1);
+    FILL_TENSOR(res4e_bias_2);
+    FILL_TENSOR(res4e_weight_0);
+    FILL_TENSOR(res4e_weight_1);
+    FILL_TENSOR(res4e_weight_2);
+    FILL_TENSOR(res4f_bias_0);
+    FILL_TENSOR(res4f_bias_1);
+    FILL_TENSOR(res4f_bias_2);
+    FILL_TENSOR(res4f_weight_0);
+    FILL_TENSOR(res4f_weight_1);
+    FILL_TENSOR(res4f_weight_2);
+    FILL_TENSOR(res5a_bias_0);
+    FILL_TENSOR(res5a_bias_1);
+    FILL_TENSOR(res5a_bias_2);
+    FILL_TENSOR(res5a_bias_b);
+    FILL_TENSOR(res5a_weight_0);
+    FILL_TENSOR(res5a_weight_1);
+    FILL_TENSOR(res5a_weight_2);
+    FILL_TENSOR(res5a_weight_b);
+    FILL_TENSOR(res5b_bias_0);
+    FILL_TENSOR(res5b_bias_1);
+    FILL_TENSOR(res5b_bias_2);
+    FILL_TENSOR(res5b_weight_0);
+    FILL_TENSOR(res5b_weight_1);
+    FILL_TENSOR(res5b_weight_2);
+    FILL_TENSOR(res5c_bias_0);
+    FILL_TENSOR(res5c_bias_1);
+    FILL_TENSOR(res5c_bias_2);
+    FILL_TENSOR(res5c_weight_0);
+    FILL_TENSOR(res5c_weight_1);
+    FILL_TENSOR(res5c_weight_2);
+
+    // init kernel
+    SC_INIT_RN50_BACKBONE();
+
+    // warmup
+    for (int i = 0; i < 3; ++i) {
+        run_with_single_instance(0, 0);
+    }
+
+    auto elapsed = run_with_multiple_instances(times);
+    printf("Done rn50 backbone_bs256 %d iters with multiple instances in %.3f "
+           "ms\n",
+            times, elapsed);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs4.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs4.cpp
new file mode 100644
index 000000000..1da4009fb
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs4.cpp
@@ -0,0 +1,176 @@
+#include "utils.hpp"
+
+#define BACKBONE_SHAPE backbone_4_shape
+#define SC_INIT_RN50_BACKBONE sc_init_rn50_backbone_bs4
+#define RN50_BACKBONE rn50_backbone_bs4
+
+int main() {
+#define I8TENSOR(NAME)                                                         \
+  aligned_vector<int8_t> NAME(product(BACKBONE_SHAPE::NAME()), 0)
+#define U8TENSOR(NAME)                                                         \
+  aligned_vector<uint8_t> NAME(product(BACKBONE_SHAPE::NAME()), 0)
+#define TENSOR(NAME)                                                           \
+  aligned_vector<float> NAME(product(BACKBONE_SHAPE::NAME()), 0.f)
+  // cat ../src/kernel_rn50/shape.hpp | grep "inline const" | awk -F"&" '{print
+  // $2}' | awk -F"(" '{print "TENSOR("$1 ");"}'
+  // plain inputs
+  I8TENSOR(backbone_input);
+  I8TENSOR(backbone_output);
+  TENSOR(res2a_bias_0);
+  TENSOR(res2a_bias_1);
+  TENSOR(res2a_bias_2);
+  TENSOR(res2a_bias_b);
+  TENSOR(res2a_weight_0);
+  TENSOR(res2a_weight_1);
+  TENSOR(res2a_weight_2);
+  TENSOR(res2a_weight_b);
+  TENSOR(res2b_bias_0);
+  TENSOR(res2b_bias_1);
+  TENSOR(res2b_bias_2);
+  TENSOR(res2b_weight_0);
+  TENSOR(res2b_weight_1);
+  TENSOR(res2b_weight_2);
+  TENSOR(res2c_bias_0);
+  TENSOR(res2c_bias_1);
+  TENSOR(res2c_bias_2);
+  TENSOR(res2c_weight_0);
+  TENSOR(res2c_weight_1);
+  TENSOR(res2c_weight_2);
+  TENSOR(res3a_bias_0);
+  TENSOR(res3a_bias_1);
+  TENSOR(res3a_bias_2);
+  TENSOR(res3a_bias_b);
+  TENSOR(res3a_weight_0);
+  TENSOR(res3a_weight_1);
+  TENSOR(res3a_weight_2);
+  TENSOR(res3a_weight_b);
+  TENSOR(res3b_bias_0);
+  TENSOR(res3b_bias_1);
+  TENSOR(res3b_bias_2);
+  TENSOR(res3b_weight_0);
+  TENSOR(res3b_weight_1);
+  TENSOR(res3b_weight_2);
+  TENSOR(res3c_bias_0);
+  TENSOR(res3c_bias_1);
+  TENSOR(res3c_bias_2);
+  TENSOR(res3c_weight_0);
+  TENSOR(res3c_weight_1);
+  TENSOR(res3c_weight_2);
+  TENSOR(res3d_bias_0);
+  TENSOR(res3d_bias_1);
+  TENSOR(res3d_bias_2);
+  TENSOR(res3d_weight_0);
+  TENSOR(res3d_weight_1);
+  TENSOR(res3d_weight_2);
+  TENSOR(res4a_bias_0);
+  TENSOR(res4a_bias_1);
+  TENSOR(res4a_bias_2);
+  TENSOR(res4a_bias_b);
+  TENSOR(res4a_weight_0);
+  TENSOR(res4a_weight_1);
+  TENSOR(res4a_weight_2);
+  TENSOR(res4a_weight_b);
+  TENSOR(res4b_bias_0);
+  TENSOR(res4b_bias_1);
+  TENSOR(res4b_bias_2);
+  TENSOR(res4b_weight_0);
+  TENSOR(res4b_weight_1);
+  TENSOR(res4b_weight_2);
+  TENSOR(res4c_bias_0);
+  TENSOR(res4c_bias_1);
+  TENSOR(res4c_bias_2);
+  TENSOR(res4c_weight_0);
+  TENSOR(res4c_weight_1);
+  TENSOR(res4c_weight_2);
+  TENSOR(res4d_bias_0);
+  TENSOR(res4d_bias_1);
+  TENSOR(res4d_bias_2);
+  TENSOR(res4d_weight_0);
+  TENSOR(res4d_weight_1);
+  TENSOR(res4d_weight_2);
+  TENSOR(res4e_bias_0);
+  TENSOR(res4e_bias_1);
+  TENSOR(res4e_bias_2);
+  TENSOR(res4e_weight_0);
+  TENSOR(res4e_weight_1);
+  TENSOR(res4e_weight_2);
+  TENSOR(res4f_bias_0);
+  TENSOR(res4f_bias_1);
+  TENSOR(res4f_bias_2);
+  TENSOR(res4f_weight_0);
+  TENSOR(res4f_weight_1);
+  TENSOR(res4f_weight_2);
+  TENSOR(res5a_bias_0);
+  TENSOR(res5a_bias_1);
+  TENSOR(res5a_bias_2);
+  TENSOR(res5a_bias_b);
+  TENSOR(res5a_weight_0);
+  TENSOR(res5a_weight_1);
+  TENSOR(res5a_weight_2);
+  TENSOR(res5a_weight_b);
+  TENSOR(res5b_bias_0);
+  TENSOR(res5b_bias_1);
+  TENSOR(res5b_bias_2);
+  TENSOR(res5b_weight_0);
+  TENSOR(res5b_weight_1);
+  TENSOR(res5b_weight_2);
+  TENSOR(res5c_bias_0);
+  TENSOR(res5c_bias_1);
+  TENSOR(res5c_bias_2);
+  TENSOR(res5c_weight_0);
+  TENSOR(res5c_weight_1);
+  TENSOR(res5c_weight_2);
+
+  // init kernel
+  SC_INIT_RN50_BACKBONE();
+
+  using namespace std::chrono;
+  auto start_time = steady_clock::now();
+  const int times = 100;
+  for (int i = 0; i < times; i++) {
+    RN50_BACKBONE(
+        backbone_output.data(), backbone_input.data(), res2a_weight_b.data(),
+        res2a_bias_b.data(), res2a_weight_0.data(), res2a_bias_0.data(),
+        res2a_weight_1.data(), res2a_bias_1.data(), res2a_weight_2.data(),
+        res2a_bias_2.data(), res2b_weight_0.data(), res2b_bias_0.data(),
+        res2b_weight_1.data(), res2b_bias_1.data(), res2b_weight_2.data(),
+        res2b_bias_2.data(), res2c_weight_0.data(), res2c_bias_0.data(),
+        res2c_weight_1.data(), res2c_bias_1.data(), res2c_weight_2.data(),
+        res2c_bias_2.data(), res3a_weight_b.data(), res3a_bias_b.data(),
+        res3a_weight_0.data(), res3a_bias_0.data(), res3a_weight_1.data(),
+        res3a_bias_1.data(), res3a_weight_2.data(), res3a_bias_2.data(),
+        res3b_weight_0.data(), res3b_bias_0.data(), res3b_weight_1.data(),
+        res3b_bias_1.data(), res3b_weight_2.data(), res3b_bias_2.data(),
+        res3c_weight_0.data(), res3c_bias_0.data(), res3c_weight_1.data(),
+        res3c_bias_1.data(), res3c_weight_2.data(), res3c_bias_2.data(),
+        res3d_weight_0.data(), res3d_bias_0.data(), res3d_weight_1.data(),
+        res3d_bias_1.data(), res3d_weight_2.data(), res3d_bias_2.data(),
+        res4a_weight_b.data(), res4a_bias_b.data(), res4a_weight_0.data(),
+        res4a_bias_0.data(), res4a_weight_1.data(), res4a_bias_1.data(),
+        res4a_weight_2.data(), res4a_bias_2.data(), res4b_weight_0.data(),
+        res4b_bias_0.data(), res4b_weight_1.data(), res4b_bias_1.data(),
+        res4b_weight_2.data(), res4b_bias_2.data(), res4c_weight_0.data(),
+        res4c_bias_0.data(), res4c_weight_1.data(), res4c_bias_1.data(),
+        res4c_weight_2.data(), res4c_bias_2.data(), res4d_weight_0.data(),
+        res4d_bias_0.data(), res4d_weight_1.data(), res4d_bias_1.data(),
+        res4d_weight_2.data(), res4d_bias_2.data(), res4e_weight_0.data(),
+        res4e_bias_0.data(), res4e_weight_1.data(), res4e_bias_1.data(),
+        res4e_weight_2.data(), res4e_bias_2.data(), res4f_weight_0.data(),
+        res4f_bias_0.data(), res4f_weight_1.data(), res4f_bias_1.data(),
+        res4f_weight_2.data(), res4f_bias_2.data(), res5a_weight_b.data(),
+        res5a_bias_b.data(), res5a_weight_0.data(), res5a_bias_0.data(),
+        res5a_weight_1.data(), res5a_bias_1.data(), res5a_weight_2.data(),
+        res5a_bias_2.data(), res5b_weight_0.data(), res5b_bias_0.data(),
+        res5b_weight_1.data(), res5b_bias_1.data(), res5b_weight_2.data(),
+        res5b_bias_2.data(), res5c_weight_0.data(), res5c_bias_0.data(),
+        res5c_weight_1.data(), res5c_bias_1.data(), res5c_weight_2.data(),
+        res5c_bias_2.data());
+  }
+  printf("Done rn50 backbone_bs4 in %.3fms\n",
+         1.f *
+             duration_cast<microseconds>(steady_clock::now() - start_time)
+                 .count() /
+             (1000 * times));
+
+  return 0;
+}
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs8.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs8.cpp
new file mode 100644
index 000000000..351057541
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs8.cpp
@@ -0,0 +1,323 @@
+#include "utils.hpp"
+
+#define NUM_THREADS 56
+
+#define BACKBONE_SHAPE backbone_8_shape
+#define SC_INIT_RN50_BACKBONE sc_init_rn50_backbone_bs8
+#define RN50_BACKBONE rn50_backbone_bs8
+
+#define TENSOR(NAME)                                                           \
+  aligned_vector<float> NAME(product(BACKBONE_SHAPE::NAME()));
+
+#define FILL_TENSOR(NAME)                                                      \
+  uniform(-1.f, 1.f, product(BACKBONE_SHAPE::NAME()),                          \
+          static_cast<float *>(NAME.data()));
+
+// cat ../src/kernel_rn50/shape.hpp | grep "inline const" | awk -F"&" '{print
+// $2}' | awk -F"(" '{print "TENSOR("$1 ");"}'
+// plain inputs
+std::vector<aligned_vector<int8_t>> backbone_input;
+std::vector<aligned_vector<int8_t>> backbone_output;
+TENSOR(res2a_bias_0);
+TENSOR(res2a_bias_1);
+TENSOR(res2a_bias_2);
+TENSOR(res2a_bias_b);
+TENSOR(res2a_weight_0);
+TENSOR(res2a_weight_1);
+TENSOR(res2a_weight_2);
+TENSOR(res2a_weight_b);
+TENSOR(res2b_bias_0);
+TENSOR(res2b_bias_1);
+TENSOR(res2b_bias_2);
+TENSOR(res2b_weight_0);
+TENSOR(res2b_weight_1);
+TENSOR(res2b_weight_2);
+TENSOR(res2c_bias_0);
+TENSOR(res2c_bias_1);
+TENSOR(res2c_bias_2);
+TENSOR(res2c_weight_0);
+TENSOR(res2c_weight_1);
+TENSOR(res2c_weight_2);
+TENSOR(res3a_bias_0);
+TENSOR(res3a_bias_1);
+TENSOR(res3a_bias_2);
+TENSOR(res3a_bias_b);
+TENSOR(res3a_weight_0);
+TENSOR(res3a_weight_1);
+TENSOR(res3a_weight_2);
+TENSOR(res3a_weight_b);
+TENSOR(res3b_bias_0);
+TENSOR(res3b_bias_1);
+TENSOR(res3b_bias_2);
+TENSOR(res3b_weight_0);
+TENSOR(res3b_weight_1);
+TENSOR(res3b_weight_2);
+TENSOR(res3c_bias_0);
+TENSOR(res3c_bias_1);
+TENSOR(res3c_bias_2);
+TENSOR(res3c_weight_0);
+TENSOR(res3c_weight_1);
+TENSOR(res3c_weight_2);
+TENSOR(res3d_bias_0);
+TENSOR(res3d_bias_1);
+TENSOR(res3d_bias_2);
+TENSOR(res3d_weight_0);
+TENSOR(res3d_weight_1);
+TENSOR(res3d_weight_2);
+TENSOR(res4a_bias_0);
+TENSOR(res4a_bias_1);
+TENSOR(res4a_bias_2);
+TENSOR(res4a_bias_b);
+TENSOR(res4a_weight_0);
+TENSOR(res4a_weight_1);
+TENSOR(res4a_weight_2);
+TENSOR(res4a_weight_b);
+TENSOR(res4b_bias_0);
+TENSOR(res4b_bias_1);
+TENSOR(res4b_bias_2);
+TENSOR(res4b_weight_0);
+TENSOR(res4b_weight_1);
+TENSOR(res4b_weight_2);
+TENSOR(res4c_bias_0);
+TENSOR(res4c_bias_1);
+TENSOR(res4c_bias_2);
+TENSOR(res4c_weight_0);
+TENSOR(res4c_weight_1);
+TENSOR(res4c_weight_2);
+TENSOR(res4d_bias_0);
+TENSOR(res4d_bias_1);
+TENSOR(res4d_bias_2);
+TENSOR(res4d_weight_0);
+TENSOR(res4d_weight_1);
+TENSOR(res4d_weight_2);
+TENSOR(res4e_bias_0);
+TENSOR(res4e_bias_1);
+TENSOR(res4e_bias_2);
+TENSOR(res4e_weight_0);
+TENSOR(res4e_weight_1);
+TENSOR(res4e_weight_2);
+TENSOR(res4f_bias_0);
+TENSOR(res4f_bias_1);
+TENSOR(res4f_bias_2);
+TENSOR(res4f_weight_0);
+TENSOR(res4f_weight_1);
+TENSOR(res4f_weight_2);
+TENSOR(res5a_bias_0);
+TENSOR(res5a_bias_1);
+TENSOR(res5a_bias_2);
+TENSOR(res5a_bias_b);
+TENSOR(res5a_weight_0);
+TENSOR(res5a_weight_1);
+TENSOR(res5a_weight_2);
+TENSOR(res5a_weight_b);
+TENSOR(res5b_bias_0);
+TENSOR(res5b_bias_1);
+TENSOR(res5b_bias_2);
+TENSOR(res5b_weight_0);
+TENSOR(res5b_weight_1);
+TENSOR(res5b_weight_2);
+TENSOR(res5c_bias_0);
+TENSOR(res5c_bias_1);
+TENSOR(res5c_bias_2);
+TENSOR(res5c_weight_0);
+TENSOR(res5c_weight_1);
+TENSOR(res5c_weight_2);
+
+static inline void run_with_single_instance(const int dst_idx = 0,
+                                            const int src_idx = 0) {
+  RN50_BACKBONE(
+      backbone_output[dst_idx].data(), backbone_input[src_idx].data(),
+      res2a_weight_b.data(), res2a_bias_b.data(), res2a_weight_0.data(),
+      res2a_bias_0.data(), res2a_weight_1.data(), res2a_bias_1.data(),
+      res2a_weight_2.data(), res2a_bias_2.data(), res2b_weight_0.data(),
+      res2b_bias_0.data(), res2b_weight_1.data(), res2b_bias_1.data(),
+      res2b_weight_2.data(), res2b_bias_2.data(), res2c_weight_0.data(),
+      res2c_bias_0.data(), res2c_weight_1.data(), res2c_bias_1.data(),
+      res2c_weight_2.data(), res2c_bias_2.data(), res3a_weight_b.data(),
+      res3a_bias_b.data(), res3a_weight_0.data(), res3a_bias_0.data(),
+      res3a_weight_1.data(), res3a_bias_1.data(), res3a_weight_2.data(),
+      res3a_bias_2.data(), res3b_weight_0.data(), res3b_bias_0.data(),
+      res3b_weight_1.data(), res3b_bias_1.data(), res3b_weight_2.data(),
+      res3b_bias_2.data(), res3c_weight_0.data(), res3c_bias_0.data(),
+      res3c_weight_1.data(), res3c_bias_1.data(), res3c_weight_2.data(),
+      res3c_bias_2.data(), res3d_weight_0.data(), res3d_bias_0.data(),
+      res3d_weight_1.data(), res3d_bias_1.data(), res3d_weight_2.data(),
+      res3d_bias_2.data(), res4a_weight_b.data(), res4a_bias_b.data(),
+      res4a_weight_0.data(), res4a_bias_0.data(), res4a_weight_1.data(),
+      res4a_bias_1.data(), res4a_weight_2.data(), res4a_bias_2.data(),
+      res4b_weight_0.data(), res4b_bias_0.data(), res4b_weight_1.data(),
+      res4b_bias_1.data(), res4b_weight_2.data(), res4b_bias_2.data(),
+      res4c_weight_0.data(), res4c_bias_0.data(), res4c_weight_1.data(),
+      res4c_bias_1.data(), res4c_weight_2.data(), res4c_bias_2.data(),
+      res4d_weight_0.data(), res4d_bias_0.data(), res4d_weight_1.data(),
+      res4d_bias_1.data(), res4d_weight_2.data(), res4d_bias_2.data(),
+      res4e_weight_0.data(), res4e_bias_0.data(), res4e_weight_1.data(),
+      res4e_bias_1.data(), res4e_weight_2.data(), res4e_bias_2.data(),
+      res4f_weight_0.data(), res4f_bias_0.data(), res4f_weight_1.data(),
+      res4f_bias_1.data(), res4f_weight_2.data(), res4f_bias_2.data(),
+      res5a_weight_b.data(), res5a_bias_b.data(), res5a_weight_0.data(),
+      res5a_bias_0.data(), res5a_weight_1.data(), res5a_bias_1.data(),
+      res5a_weight_2.data(), res5a_bias_2.data(), res5b_weight_0.data(),
+      res5b_bias_0.data(), res5b_weight_1.data(), res5b_bias_1.data(),
+      res5b_weight_2.data(), res5b_bias_2.data(), res5c_weight_0.data(),
+      res5c_bias_0.data(), res5c_weight_1.data(), res5c_bias_1.data(),
+      res5c_weight_2.data(), res5c_bias_2.data());
+}
+
+static float run_with_multiple_instances(const int times) {
+  using namespace std::chrono;
+  std::vector<float> elapsed(NUM_THREADS);
+#pragma omp parallel for num_threads(NUM_THREADS)
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    auto start_time = steady_clock::now();
+    for (int i = 0; i < times; i++) {
+      run_with_single_instance(tid, tid * times + i);
+    }
+    elapsed[tid] =
+        1.f *
+        duration_cast<microseconds>(steady_clock::now() - start_time).count() /
+        (1000 * times);
+  }
+  float sum = 0.f;
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    sum += elapsed[tid];
+  }
+  return sum / NUM_THREADS;
+}
+
+int main(int argc, char **argv) {
+  int times = 100;
+  if (argc > 1) {
+    times = std::stoi(argv[1]);
+  }
+
+  // allocate in & out buffer for multi-instance scenario
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    for (int i = 0; i < times; ++i) {
+      backbone_input.emplace_back(aligned_vector<int8_t>(
+          product(BACKBONE_SHAPE::backbone_input()), 1.f));
+    }
+    backbone_output.emplace_back(
+        aligned_vector<int8_t>(product(BACKBONE_SHAPE::backbone_output())));
+  }
+
+  // fill weights
+  FILL_TENSOR(res2a_bias_0);
+  FILL_TENSOR(res2a_bias_1);
+  FILL_TENSOR(res2a_bias_2);
+  FILL_TENSOR(res2a_bias_b);
+  FILL_TENSOR(res2a_weight_0);
+  FILL_TENSOR(res2a_weight_1);
+  FILL_TENSOR(res2a_weight_2);
+  FILL_TENSOR(res2a_weight_b);
+  FILL_TENSOR(res2b_bias_0);
+  FILL_TENSOR(res2b_bias_1);
+  FILL_TENSOR(res2b_bias_2);
+  FILL_TENSOR(res2b_weight_0);
+  FILL_TENSOR(res2b_weight_1);
+  FILL_TENSOR(res2b_weight_2);
+  FILL_TENSOR(res2c_bias_0);
+  FILL_TENSOR(res2c_bias_1);
+  FILL_TENSOR(res2c_bias_2);
+  FILL_TENSOR(res2c_weight_0);
+  FILL_TENSOR(res2c_weight_1);
+  FILL_TENSOR(res2c_weight_2);
+  FILL_TENSOR(res3a_bias_0);
+  FILL_TENSOR(res3a_bias_1);
+  FILL_TENSOR(res3a_bias_2);
+  FILL_TENSOR(res3a_bias_b);
+  FILL_TENSOR(res3a_weight_0);
+  FILL_TENSOR(res3a_weight_1);
+  FILL_TENSOR(res3a_weight_2);
+  FILL_TENSOR(res3a_weight_b);
+  FILL_TENSOR(res3b_bias_0);
+  FILL_TENSOR(res3b_bias_1);
+  FILL_TENSOR(res3b_bias_2);
+  FILL_TENSOR(res3b_weight_0);
+  FILL_TENSOR(res3b_weight_1);
+  FILL_TENSOR(res3b_weight_2);
+  FILL_TENSOR(res3c_bias_0);
+  FILL_TENSOR(res3c_bias_1);
+  FILL_TENSOR(res3c_bias_2);
+  FILL_TENSOR(res3c_weight_0);
+  FILL_TENSOR(res3c_weight_1);
+  FILL_TENSOR(res3c_weight_2);
+  FILL_TENSOR(res3d_bias_0);
+  FILL_TENSOR(res3d_bias_1);
+  FILL_TENSOR(res3d_bias_2);
+  FILL_TENSOR(res3d_weight_0);
+  FILL_TENSOR(res3d_weight_1);
+  FILL_TENSOR(res3d_weight_2);
+  FILL_TENSOR(res4a_bias_0);
+  FILL_TENSOR(res4a_bias_1);
+  FILL_TENSOR(res4a_bias_2);
+  FILL_TENSOR(res4a_bias_b);
+  FILL_TENSOR(res4a_weight_0);
+  FILL_TENSOR(res4a_weight_1);
+  FILL_TENSOR(res4a_weight_2);
+  FILL_TENSOR(res4a_weight_b);
+  FILL_TENSOR(res4b_bias_0);
+  FILL_TENSOR(res4b_bias_1);
+  FILL_TENSOR(res4b_bias_2);
+  FILL_TENSOR(res4b_weight_0);
+  FILL_TENSOR(res4b_weight_1);
+  FILL_TENSOR(res4b_weight_2);
+  FILL_TENSOR(res4c_bias_0);
+  FILL_TENSOR(res4c_bias_1);
+  FILL_TENSOR(res4c_bias_2);
+  FILL_TENSOR(res4c_weight_0);
+  FILL_TENSOR(res4c_weight_1);
+  FILL_TENSOR(res4c_weight_2);
+  FILL_TENSOR(res4d_bias_0);
+  FILL_TENSOR(res4d_bias_1);
+  FILL_TENSOR(res4d_bias_2);
+  FILL_TENSOR(res4d_weight_0);
+  FILL_TENSOR(res4d_weight_1);
+  FILL_TENSOR(res4d_weight_2);
+  FILL_TENSOR(res4e_bias_0);
+  FILL_TENSOR(res4e_bias_1);
+  FILL_TENSOR(res4e_bias_2);
+  FILL_TENSOR(res4e_weight_0);
+  FILL_TENSOR(res4e_weight_1);
+  FILL_TENSOR(res4e_weight_2);
+  FILL_TENSOR(res4f_bias_0);
+  FILL_TENSOR(res4f_bias_1);
+  FILL_TENSOR(res4f_bias_2);
+  FILL_TENSOR(res4f_weight_0);
+  FILL_TENSOR(res4f_weight_1);
+  FILL_TENSOR(res4f_weight_2);
+  FILL_TENSOR(res5a_bias_0);
+  FILL_TENSOR(res5a_bias_1);
+  FILL_TENSOR(res5a_bias_2);
+  FILL_TENSOR(res5a_bias_b);
+  FILL_TENSOR(res5a_weight_0);
+  FILL_TENSOR(res5a_weight_1);
+  FILL_TENSOR(res5a_weight_2);
+  FILL_TENSOR(res5a_weight_b);
+  FILL_TENSOR(res5b_bias_0);
+  FILL_TENSOR(res5b_bias_1);
+  FILL_TENSOR(res5b_bias_2);
+  FILL_TENSOR(res5b_weight_0);
+  FILL_TENSOR(res5b_weight_1);
+  FILL_TENSOR(res5b_weight_2);
+  FILL_TENSOR(res5c_bias_0);
+  FILL_TENSOR(res5c_bias_1);
+  FILL_TENSOR(res5c_bias_2);
+  FILL_TENSOR(res5c_weight_0);
+  FILL_TENSOR(res5c_weight_1);
+  FILL_TENSOR(res5c_weight_2);
+
+  // init kernel
+  SC_INIT_RN50_BACKBONE();
+
+  // warmup
+  for (int i = 0; i < 3; ++i) {
+    run_with_single_instance(0, 0);
+  }
+
+  auto elapsed = run_with_multiple_instances(times);
+  printf("Done rn50 backbone_bs8 %d iters with multiple instances in %.3f ms\n",
+         times, elapsed);
+
+  return 0;
+}
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs9.cpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs9.cpp
new file mode 100644
index 000000000..f3d7eab11
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/test_rn50_backbone_bs9.cpp
@@ -0,0 +1,208 @@
+#include "utils.hpp"
+
+#define NUM_THREADS 56
+
+#define BACKBONE_SHAPE backbone_9_shape
+#define SC_INIT_RN50_BACKBONE sc_init_rn50_backbone_bs9
+#define RN50_BACKBONE rn50_backbone_bs9
+
+#define TENSOR(NAME)                                                           \
+  aligned_vector<float> NAME(product(BACKBONE_SHAPE::NAME()), 0.f)
+// cat ../src/kernel_rn50/shape.hpp | grep "inline const" | awk -F"&" '{print
+// $2}' | awk -F"(" '{print "TENSOR("$1 ");"}'
+// plain inputs
+
+std::vector<aligned_vector<int8_t>> backbone_input;
+std::vector<aligned_vector<int8_t>> backbone_output;
+TENSOR(res2a_bias_0);
+TENSOR(res2a_bias_1);
+TENSOR(res2a_bias_2);
+TENSOR(res2a_bias_b);
+TENSOR(res2a_weight_0);
+TENSOR(res2a_weight_1);
+TENSOR(res2a_weight_2);
+TENSOR(res2a_weight_b);
+TENSOR(res2b_bias_0);
+TENSOR(res2b_bias_1);
+TENSOR(res2b_bias_2);
+TENSOR(res2b_weight_0);
+TENSOR(res2b_weight_1);
+TENSOR(res2b_weight_2);
+TENSOR(res2c_bias_0);
+TENSOR(res2c_bias_1);
+TENSOR(res2c_bias_2);
+TENSOR(res2c_weight_0);
+TENSOR(res2c_weight_1);
+TENSOR(res2c_weight_2);
+TENSOR(res3a_bias_0);
+TENSOR(res3a_bias_1);
+TENSOR(res3a_bias_2);
+TENSOR(res3a_bias_b);
+TENSOR(res3a_weight_0);
+TENSOR(res3a_weight_1);
+TENSOR(res3a_weight_2);
+TENSOR(res3a_weight_b);
+TENSOR(res3b_bias_0);
+TENSOR(res3b_bias_1);
+TENSOR(res3b_bias_2);
+TENSOR(res3b_weight_0);
+TENSOR(res3b_weight_1);
+TENSOR(res3b_weight_2);
+TENSOR(res3c_bias_0);
+TENSOR(res3c_bias_1);
+TENSOR(res3c_bias_2);
+TENSOR(res3c_weight_0);
+TENSOR(res3c_weight_1);
+TENSOR(res3c_weight_2);
+TENSOR(res3d_bias_0);
+TENSOR(res3d_bias_1);
+TENSOR(res3d_bias_2);
+TENSOR(res3d_weight_0);
+TENSOR(res3d_weight_1);
+TENSOR(res3d_weight_2);
+TENSOR(res4a_bias_0);
+TENSOR(res4a_bias_1);
+TENSOR(res4a_bias_2);
+TENSOR(res4a_bias_b);
+TENSOR(res4a_weight_0);
+TENSOR(res4a_weight_1);
+TENSOR(res4a_weight_2);
+TENSOR(res4a_weight_b);
+TENSOR(res4b_bias_0);
+TENSOR(res4b_bias_1);
+TENSOR(res4b_bias_2);
+TENSOR(res4b_weight_0);
+TENSOR(res4b_weight_1);
+TENSOR(res4b_weight_2);
+TENSOR(res4c_bias_0);
+TENSOR(res4c_bias_1);
+TENSOR(res4c_bias_2);
+TENSOR(res4c_weight_0);
+TENSOR(res4c_weight_1);
+TENSOR(res4c_weight_2);
+TENSOR(res4d_bias_0);
+TENSOR(res4d_bias_1);
+TENSOR(res4d_bias_2);
+TENSOR(res4d_weight_0);
+TENSOR(res4d_weight_1);
+TENSOR(res4d_weight_2);
+TENSOR(res4e_bias_0);
+TENSOR(res4e_bias_1);
+TENSOR(res4e_bias_2);
+TENSOR(res4e_weight_0);
+TENSOR(res4e_weight_1);
+TENSOR(res4e_weight_2);
+TENSOR(res4f_bias_0);
+TENSOR(res4f_bias_1);
+TENSOR(res4f_bias_2);
+TENSOR(res4f_weight_0);
+TENSOR(res4f_weight_1);
+TENSOR(res4f_weight_2);
+TENSOR(res5a_bias_0);
+TENSOR(res5a_bias_1);
+TENSOR(res5a_bias_2);
+TENSOR(res5a_bias_b);
+TENSOR(res5a_weight_0);
+TENSOR(res5a_weight_1);
+TENSOR(res5a_weight_2);
+TENSOR(res5a_weight_b);
+TENSOR(res5b_bias_0);
+TENSOR(res5b_bias_1);
+TENSOR(res5b_bias_2);
+TENSOR(res5b_weight_0);
+TENSOR(res5b_weight_1);
+TENSOR(res5b_weight_2);
+TENSOR(res5c_bias_0);
+TENSOR(res5c_bias_1);
+TENSOR(res5c_bias_2);
+TENSOR(res5c_weight_0);
+TENSOR(res5c_weight_1);
+TENSOR(res5c_weight_2);
+
+static inline void run_with_single_instance(const int dst_idx = 0,
+                                            const int src_idx = 0) {
+  RN50_BACKBONE(
+      backbone_output[dst_idx].data(), backbone_input[src_idx].data(),
+      res2a_weight_b.data(), res2a_bias_b.data(), res2a_weight_0.data(),
+      res2a_bias_0.data(), res2a_weight_1.data(), res2a_bias_1.data(),
+      res2a_weight_2.data(), res2a_bias_2.data(), res2b_weight_0.data(),
+      res2b_bias_0.data(), res2b_weight_1.data(), res2b_bias_1.data(),
+      res2b_weight_2.data(), res2b_bias_2.data(), res2c_weight_0.data(),
+      res2c_bias_0.data(), res2c_weight_1.data(), res2c_bias_1.data(),
+      res2c_weight_2.data(), res2c_bias_2.data(), res3a_weight_b.data(),
+      res3a_bias_b.data(), res3a_weight_0.data(), res3a_bias_0.data(),
+      res3a_weight_1.data(), res3a_bias_1.data(), res3a_weight_2.data(),
+      res3a_bias_2.data(), res3b_weight_0.data(), res3b_bias_0.data(),
+      res3b_weight_1.data(), res3b_bias_1.data(), res3b_weight_2.data(),
+      res3b_bias_2.data(), res3c_weight_0.data(), res3c_bias_0.data(),
+      res3c_weight_1.data(), res3c_bias_1.data(), res3c_weight_2.data(),
+      res3c_bias_2.data(), res3d_weight_0.data(), res3d_bias_0.data(),
+      res3d_weight_1.data(), res3d_bias_1.data(), res3d_weight_2.data(),
+      res3d_bias_2.data(), res4a_weight_b.data(), res4a_bias_b.data(),
+      res4a_weight_0.data(), res4a_bias_0.data(), res4a_weight_1.data(),
+      res4a_bias_1.data(), res4a_weight_2.data(), res4a_bias_2.data(),
+      res4b_weight_0.data(), res4b_bias_0.data(), res4b_weight_1.data(),
+      res4b_bias_1.data(), res4b_weight_2.data(), res4b_bias_2.data(),
+      res4c_weight_0.data(), res4c_bias_0.data(), res4c_weight_1.data(),
+      res4c_bias_1.data(), res4c_weight_2.data(), res4c_bias_2.data(),
+      res4d_weight_0.data(), res4d_bias_0.data(), res4d_weight_1.data(),
+      res4d_bias_1.data(), res4d_weight_2.data(), res4d_bias_2.data(),
+      res4e_weight_0.data(), res4e_bias_0.data(), res4e_weight_1.data(),
+      res4e_bias_1.data(), res4e_weight_2.data(), res4e_bias_2.data(),
+      res4f_weight_0.data(), res4f_bias_0.data(), res4f_weight_1.data(),
+      res4f_bias_1.data(), res4f_weight_2.data(), res4f_bias_2.data(),
+      res5a_weight_b.data(), res5a_bias_b.data(), res5a_weight_0.data(),
+      res5a_bias_0.data(), res5a_weight_1.data(), res5a_bias_1.data(),
+      res5a_weight_2.data(), res5a_bias_2.data(), res5b_weight_0.data(),
+      res5b_bias_0.data(), res5b_weight_1.data(), res5b_bias_1.data(),
+      res5b_weight_2.data(), res5b_bias_2.data(), res5c_weight_0.data(),
+      res5c_bias_0.data(), res5c_weight_1.data(), res5c_bias_1.data(),
+      res5c_weight_2.data(), res5c_bias_2.data());
+}
+
+static float run_with_multiple_instances(int times) {
+  using namespace std::chrono;
+  std::vector<float> elapsed(NUM_THREADS);
+#pragma omp parallel for num_threads(NUM_THREADS)
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    auto start_time = steady_clock::now();
+    for (int i = 0; i < times; i++) {
+      run_with_single_instance(tid, tid * times + i);
+    }
+    elapsed[tid] =
+        1.f *
+        duration_cast<microseconds>(steady_clock::now() - start_time).count() /
+        (1000 * times);
+  }
+  float sum = 0.f;
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    sum += elapsed[tid];
+  }
+  return sum / NUM_THREADS;
+}
+
+int main() {
+  const int times = 100;
+  // allocate in & out buffer for multi-instance scenario
+  for (int tid = 0; tid < NUM_THREADS; ++tid) {
+    for (int i = 0; i < times; ++i) {
+      backbone_input.emplace_back(
+          aligned_vector<int8_t>(product(BACKBONE_SHAPE::backbone_input()), 0));
+    }
+    backbone_output.emplace_back(
+        aligned_vector<int8_t>(product(BACKBONE_SHAPE::backbone_output())));
+  }
+  // init kernel
+  SC_INIT_RN50_BACKBONE();
+
+  // warmup
+  for (int i = 0; i < 3; ++i) {
+    run_with_single_instance(0, 0);
+  }
+
+  auto elapsed = run_with_multiple_instances(times);
+  printf("Done rn50 backbone_bs9 with multiple instances in %.3f ms\n",
+         elapsed);
+
+  return 0;
+}
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/utils.hpp b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/utils.hpp
new file mode 100644
index 000000000..2f2513f46
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/src/ckernels/tests/utils.hpp
@@ -0,0 +1,71 @@
+#ifndef __UTILS_HPP__
+#define __UTILS_HPP__
+#include <chrono>
+#include <kernel_rn50/rn50_backbone.hpp>
+#include <kernel_rn50/shape.hpp>
+#include <omp.h>
+#include <random>
+#include <stdint.h>
+#include <stdio.h>
+#include <vector>
+
+template <typename T, size_t N> size_t product(const std::array<T, N> &v) {
+  size_t ret = 1;
+  for (auto a : v) {
+    ret *= a;
+  }
+  return ret;
+}
+
+template <typename T> struct distribution {};
+
+template <> struct distribution<int8_t> {
+  typedef std::uniform_int_distribution<int8_t> type;
+};
+
+template <> struct distribution<float> {
+  typedef std::uniform_real_distribution<float> type;
+};
+
+template <typename T>
+void uniform(const T min, const T max, size_t size, T *buf) {
+  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
+  std::default_random_engine generator(seed);
+  typename distribution<T>::type distr(min, max);
+
+#pragma omp parallel for
+  for (size_t i = 0; i < size; ++i) {
+    buf[i] = distr(generator);
+  }
+}
+
+template <typename T, size_t alignment = 64> class aligned_vector {
+public:
+  aligned_vector(size_t size) {
+    ptr_ = aligned_alloc(alignment, sizeof(T) * size);
+  }
+  aligned_vector(size_t size, T val) {
+    ptr_ = aligned_alloc(alignment, sizeof(T) * size);
+    for (size_t i = 0; i < size; i++) {
+      static_cast<T *>(ptr_)[i] = val;
+    }
+  }
+  ~aligned_vector() {
+    if (ptr_)
+      free(ptr_);
+  }
+  T *data() { return static_cast<T *>(ptr_); }
+  aligned_vector(aligned_vector &&other) {
+    ptr_ = other.ptr_;
+    other.ptr_ = nullptr;
+  }
+  aligned_vector &operator=(aligned_vector &&other) {
+    ptr_ = other.ptr_;
+    other.ptr_ = nullptr;
+  }
+
+private:
+  void *ptr_ = nullptr;
+};
+
+#endif
\ No newline at end of file
diff --git a/closed/Intel/code/resnet50/pytorch-cpu/user_default.conf b/closed/Intel/code/resnet50/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..d8cd942fc
--- /dev/null
+++ b/closed/Intel/code/resnet50/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+*.Offline.target_qps = 11250
+*.Server.target_qps = 8000
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/README.md b/closed/Intel/code/retinanet/pytorch-cpu/README.md
index 7f8ea939e..814d5643b 100644
--- a/closed/Intel/code/retinanet/pytorch-cpu/README.md
+++ b/closed/Intel/code/retinanet/pytorch-cpu/README.md
@@ -1,5 +1,5 @@
 ## Setup Instructions
-+ To run with docker, first setup conda enviroment, download the dataset and generate int8 model, then navigate to **Setup with docker image** 
++ To run with docker, navigate to **Setup with docker image** (after downloading dataset and generating/calibrating int8 model)
 
 ### Setup Conda Environment and Build Dependencies
 + Download and install Anaconda3
@@ -59,6 +59,12 @@ Run Calibration
 export CALIBRATION_DATA_DIR=${WORKLOAD_DATA}/openimages-calibration/train/data
 export MODEL_CHECKPOINT=${WORKLOAD_DATA}/retinanet-model.pth
 export CALIBRATION_ANNOTATIONS=${WORKLOAD_DATA}/openimages-calibration/annotations/openimages-mlperf-calibration.json
+
+cd <path/to/this/repo>/closed/Intel/code/retinanet/pytorch-cpu/retinanet-env/vision
+git checkout 8e078971b8aebdeb1746fea58851e3754f103053
+python setup.py install && python setup.py develop
+
+cd <path/to/this/repo>/closed/Intel/code/retinanet/pytorch-cpu
 bash run_calibration.sh
 ```
 
@@ -91,13 +97,9 @@ run_server_accuracy.sh
 
 ### Setup with docker image
 
-Please make sure to finish the data and model prepations steps above.
+you can skip the steps of setup conda env and build binaries, follow the steps to use docker image. please follow the data and model prepations steps above.
 
 ```
-# build docker image
-
-bash build_retinanet_container.sh
-
 # start a docker container and login
 
 docker run --name intel_retinanet --privileged -itd --net=host --ipc=host -v ${WORKLOAD_DATA}:/opt/workdir/code/retinanet/pytorch-cpu/data mlperf_inference_datacenter_retinanet:3.0
@@ -108,6 +110,20 @@ export http_proxy=<your/proxy>
 export https_proxy=<your/proxy>
 ```
 
+Run Calibration
+```
+export CALIBRATION_DATA_DIR=${WORKLOAD_DATA}/openimages-calibration/train/data
+export MODEL_CHECKPOINT=${WORKLOAD_DATA}/retinanet-model.pth
+export CALIBRATION_ANNOTATIONS=${WORKLOAD_DATA}/openimages-calibration/annotations/openimages-mlperf-calibration.json
+
+cd /opt/workdir/code/retinanet/pytorch-cpu/retinanet-env/vision
+git checkout 8e078971b8aebdeb1746fea58851e3754f103053
+python setup.py install && python setup.py develop
+
+cd /opt/workdir/code/retinanet/pytorch-cpu
+bash run_calibration.sh
+```
+
 ### Run Benchmark
 + exports 
 ```
@@ -134,3 +150,18 @@ run_offline_accuracy.sh
 ```
 run_server_accuracy.sh
 ```
+
+### Get the results
+
+Check the ``./mlperf_log_summary.txt`` log file:
+
+* Verify you see ``results is: valid``.
+* For offline mode performance, check the field ``Samples per second:``
+* For server mode performance, check the field ``Scheduled samples per second:``
+
+Check the ``./accuracy.txt`` log file:
+
+* Check the field ``mAP``
+
+Save these output log files elsewhere when each test is completed as they will be overwritten by the next test.
+
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/retinanet/pytorch-cpu/docker/Dockerfile
index 75116b397..8a7383e8b 100644
--- a/closed/Intel/code/retinanet/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/retinanet/pytorch-cpu/docker/Dockerfile
@@ -39,11 +39,12 @@ RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Mini
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
     /opt/conda/bin/conda install -y python=${PYTHON_VERSION} && \
+    /opt/conda/bin/conda install -c conda-forge conda==23.5.0 && \
     /opt/conda/bin/conda config --add channels intel && \
     /opt/conda/bin/conda install -c cctbx202211 setuptools==65.5.1 -y && \
-    /opt/conda/bin/conda install -y cmake && \
-    /opt/conda/bin/conda install -c intel mkl=2022.0.1 mkl-include=2022.0.1 intel-openmp -y && \
-    /opt/conda/bin/conda install -c conda-forge llvm-openmp jemalloc -y && \
+    /opt/conda/bin/conda install -y cmake==3.26.4 && \
+    /opt/conda/bin/conda install -c intel mkl=2022.0.1 mkl-include=2022.0.1 intel-openmp=2022.2.1 -y && \
+    /opt/conda/bin/conda install -c conda-forge llvm-openmp=8.0.1 jemalloc=5.2.1 -y && \
     /opt/conda/bin/conda install -y numpy==1.23.5 && \
     /opt/conda/bin/conda clean -ya
 
@@ -52,7 +53,7 @@ COPY --from=conda /opt/conda /opt/conda
 ARG PYTORCH_VERSION=v1.12.0-rc7
 RUN --mount=type=cache,target=/opt/ccache \
     source /opt/rh/gcc-toolset-11/enable && \
-    pip install Pillow pycocotools==2.0.2 opencv-python absl-py fiftyone==0.16.5 wheel==0.38.1 future==0.18.3 && \
+    pip install Pillow==9.5.0 pycocotools==2.0.2 opencv-python==4.7.0.72 absl-py==1.4.0 fiftyone==0.16.5 wheel==0.38.1 future==0.18.3 && \
     git clone https://github.com/pytorch/pytorch.git pytorch && cd pytorch && \
     git checkout ${PYTORCH_VERSION} && git submodule sync && git submodule update --init --recursive && \
     git fetch origin pull/89925/head && \
@@ -64,9 +65,11 @@ COPY --from=build /opt/conda /opt/conda
 ENV CONDA_PREFIX "/opt/conda"
 WORKDIR /opt/workdir
 COPY ./code/retinanet code/retinanet
+COPY ./code/user_config.py code/user_config.py
 COPY ./calibration/retinanet calibration/retinanet
 ARG IPEX_VERSION=mlperf/retinanet
 ARG INFERENCE=master
+ARG VISION_VERSION=8e078971b8aebdeb1746fea58851e3754f103053
 RUN source /opt/rh/gcc-toolset-11/enable && \
     cd code/retinanet/pytorch-cpu && mkdir retinanet-env && cd retinanet-env && \
     git clone https://github.com/pytorch/vision && \
@@ -86,7 +89,7 @@ RUN source /opt/rh/gcc-toolset-11/enable && \
     export OPENCV_DIR=${PWD} && cd ../.. && \
     git clone https://github.com/Tencent/rapidjson.git && cd rapidjson && git checkout e4bde977 && \
     export RAPIDJSON_INCLUDE_DIR=${PWD}/include && cd .. && \
-    git clone https://github.com/gflags/gflags.git && cd gflags && mkdir build && cd build && \
+    git clone https://github.com/gflags/gflags.git && cd gflags && git checkout a738fdf93 && mkdir build && cd build && \
     cmake .. && make && export GFLAGS_DIR=${PWD} && cd ../.. && \
     export LD_LIBRARY_PATH=${OPENCV_DIR}/lib:${CONDA_PREFIX}/lib:${LD_LIBRARY_PATH} && \
     export LIBRARY_PATH=${CONDA_PREFIX}/lib:${LIBRARY_PATH} && \
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/docker/build_retinanet_container.sh b/closed/Intel/code/retinanet/pytorch-cpu/docker/build_retinanet_container.sh
index 4447739fe..22389cf7f 100644
--- a/closed/Intel/code/retinanet/pytorch-cpu/docker/build_retinanet_container.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/docker/build_retinanet_container.sh
@@ -12,7 +12,7 @@ export IMAGE_NAME=mlperf_inference_datacenter_retinanet:${VERSION}
 
 echo "Building retinanet workflow container"
 
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../../../
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../../../
 
 #docker run --rm -it ${IMAGE_NAME} python -c "import torch; import intel_pytorch_extension as ipex; print('torch:', torch.__version__,' ipex:',ipex.__version__)"
 
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/prepare_env.sh b/closed/Intel/code/retinanet/pytorch-cpu/prepare_env.sh
index 7304a2745..bf3ea2c3b 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/prepare_env.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/prepare_env.sh
@@ -81,10 +81,7 @@ CFLAGS="-std=c++14" python setup.py install
 cd ${WORKDIR}
 
 # Build torchvision
-echo "Installiing torch vision"
-git clone https://github.com/pytorch/vision
-cd vision
-python setup.py install
+python -m pip install torchvision==0.13.0 --no-deps
 cd ${WORKDIR}
 
 # Build OpenCV
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/run_calibration.sh b/closed/Intel/code/retinanet/pytorch-cpu/run_calibration.sh
index 76f99365d..21436c073 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/run_calibration.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/run_calibration.sh
@@ -21,4 +21,4 @@ NUM_CLASSES=264
 
 export ARGS="--calibrate --cal-iters 500 --precision int8 --num-classes ${NUM_CLASSES} --batch-size 1 --quantized-weights int8-scales-${NUM_CLASSES}.json --data-path ${CALIBRATION_DATA_DIR} --annotation-file ${CALIBRATION_ANNOTATIONS} --num-iters 500 --checkpoint-path ${MODEL_CHECKPOINT} --save-trace-model --save-trace-model-path $( dirname ${MODEL_CHECKPOINT} )/retinanet-int8-model.pth"
 
-numactl -C 0-55 -m 0 python -u helpers/main.py ${ARGS}
+python -u helpers/main.py ${ARGS}
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/run_offline.sh b/closed/Intel/code/retinanet/pytorch-cpu/run_offline.sh
index 0b5147c07..b7dce836d 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/run_offline.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/run_offline.sh
@@ -1,5 +1,14 @@
 #!/bin/bash
 
+CPUS_PER_INSTANCE=4
+BATCH_SIZE=2
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+number_instance=$((number_cores/CPUS_PER_INSTANCE))
+
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
     echo "export DATA_DIR=</path/to/openimages>"
@@ -23,27 +32,33 @@ KMP_SETTING="KMP_AFFINITY=granularity=fine,compact,1,0"
 export KMP_BLOCKTIME=1
 export $KMP_SETTING
 
-CUR_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
+CUR_DIR=$PWD
 APP=${CUR_DIR}/build/bin/mlperf_runner
 
 if [ -e "mlperf_log_summary.txt" ]; then
     rm mlperf_log_summary.txt
 fi
 
+
+python ../../user_config.py
+USER_CONF=user.conf
+
+ 
+
 ${APP} --scenario Offline \
 	--mode Performance \
 	--mlperf_conf mlperf.conf \
-	--user_conf user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name retinanet \
     --model_path ${MODEL_PATH} \
 	--data_path ${DATA_DIR} \
-	--num_instance 28 \
+	--num_instance $number_instance \
 	--warmup_iters 100 \
-	--cpus_per_instance 4 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 24781 \
-    --batch_size 2
+	--batch_size $BATCH_SIZE
+
 	
 if [ -e "mlperf_log_summary.txt" ]; then
     cat mlperf_log_summary.txt
 fi
-
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/run_offline_accuracy.sh b/closed/Intel/code/retinanet/pytorch-cpu/run_offline_accuracy.sh
index a333f96e9..6b50fc479 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/run_offline_accuracy.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/run_offline_accuracy.sh
@@ -1,5 +1,15 @@
 #!/bin/bash
 
+CPUS_PER_INSTANCE=4
+BATCH_SIZE=2
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+number_instance=$((number_cores/CPUS_PER_INSTANCE))
+
+
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
     echo "export DATA_DIR=</path/to/openimages>"
@@ -23,7 +33,7 @@ KMP_SETTING="KMP_AFFINITY=granularity=fine,compact,1,0"
 export KMP_BLOCKTIME=1
 export $KMP_SETTING
 
-CUR_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
+CUR_DIR=${PWD}
 APP=${CUR_DIR}/build/bin/mlperf_runner
 
 if [ -e mlperf_log_accuracy.json ]; then
@@ -34,19 +44,23 @@ if [ -e accuracy.txt ]; then
     rm accuracy.txt
 fi
 
+python ../../user_config.py
+USER_CONF=user.conf
+
 ${APP} --scenario Offline \
 	--mode Accuracy \
 	--mlperf_conf mlperf.conf \
-	--user_conf user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name retinanet \
     --model_path ${MODEL_PATH} \
 	--data_path ${DATA_DIR} \
-	--num_instance 28 \
+	--num_instance $number_instance \
 	--warmup_iters 10 \
-	--cpus_per_instance 4 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 24781 \
-    --batch_size 2
-	
+	--batch_size $BATCH_SIZE
+
+
 echo " ==================================="
 echo "         Evaluating Accuracy        "
 echo " ==================================="
@@ -56,4 +70,3 @@ if [ -e mlperf_log_accuracy.json ]; then
         --mlperf-accuracy-file mlperf_log_accuracy.json \
         --openimages-dir ${DATA_DIR} 2>&1 | tee "accuracy.txt"
 fi
-
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/run_server.sh b/closed/Intel/code/retinanet/pytorch-cpu/run_server.sh
index 0e248554d..6e854f944 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/run_server.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/run_server.sh
@@ -1,5 +1,14 @@
 #!/bin/bash
 
+CPUS_PER_INSTANCE=8
+BATCH_SIZE=1
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+number_instance=$((number_cores/CPUS_PER_INSTANCE))
+
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
     echo "export DATA_DIR=</path/to/openimages>"
@@ -23,26 +32,30 @@ KMP_SETTING="KMP_AFFINITY=granularity=fine,compact,1,0"
 export KMP_BLOCKTIME=1
 export $KMP_SETTING
 
-CUR_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
+CUR_DIR=${PWD}
 APP=${CUR_DIR}/build/bin/mlperf_runner
 
 if [ -e "mlperf_log_summary.txt" ]; then
     rm mlperf_log_summary.txt
 fi
 
+python ../../user_config.py
+USER_CONF=user.conf
+
 ${APP} --scenario Server \
 	--mode Performance \
 	--mlperf_conf mlperf.conf \
-	--user_conf user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name retinanet \
     --model_path ${MODEL_PATH} \
 	--data_path ${DATA_DIR} \
-	--num_instance 14 \
+	--num_instance $number_instance \
 	--warmup_iters 100 \
-	--cpus_per_instance 8 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 24781 \
-    --batch_size 1
-	
+    --batch_size $BATCH_SIZE
+
+
 if [ -e "mlperf_log_summary.txt" ]; then
     cat mlperf_log_summary.txt
 fi
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/run_server_accuracy.sh b/closed/Intel/code/retinanet/pytorch-cpu/run_server_accuracy.sh
index cabb389c2..0a2930402 100755
--- a/closed/Intel/code/retinanet/pytorch-cpu/run_server_accuracy.sh
+++ b/closed/Intel/code/retinanet/pytorch-cpu/run_server_accuracy.sh
@@ -1,4 +1,12 @@
-#!/bin/bash
+
+CPUS_PER_INSTANCE=8
+BATCH_SIZE=1
+
+number_threads=`nproc --all`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+cpu_per_socket=$((number_cores/number_sockets))
+number_instance=$((number_cores/CPUS_PER_INSTANCE))
 
 if [ -z "${DATA_DIR}" ]; then
     echo "Path to dataset not set. Please set it:"
@@ -23,7 +31,7 @@ KMP_SETTING="KMP_AFFINITY=granularity=fine,compact,1,0"
 export KMP_BLOCKTIME=1
 export $KMP_SETTING
 
-CUR_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
+CUR_DIR=${PWD}
 APP=${CUR_DIR}/build/bin/mlperf_runner
 
 if [ -e mlperf_log_accuracy.json ]; then
@@ -34,18 +42,22 @@ if [ -e accuracy.txt ]; then
     rm accuracy.txt
 fi
 
-${APP} --scenario Server \
+python ../../user_config.py
+USER_CONF=user.conf
+
+$${APP} --scenario Server \
 	--mode Accuracy \
 	--mlperf_conf mlperf.conf \
-	--user_conf user.conf \
+	--user_conf ${USER_CONF} \
 	--model_name retinanet \
     --model_path ${MODEL_PATH} \
 	--data_path ${DATA_DIR} \
-	--num_instance 14 \
+	--num_instance $number_instance \
 	--warmup_iters 100 \
-	--cpus_per_instance 8 \
+	--cpus_per_instance $CPUS_PER_INSTANCE \
 	--total_sample_count 24781 \
-    --batch_size 1
+    --batch_size $BATCH_SIZE
+
 
 echo " ==================================="
 echo "         Evaluating Accuracy        "
@@ -56,4 +68,3 @@ if [ -e mlperf_log_accuracy.json ]; then
         --mlperf-accuracy-file mlperf_log_accuracy.json \
         --openimages-dir ${DATA_DIR} 2>&1 | tee "accuracy.txt"
 fi
-
diff --git a/closed/Intel/code/retinanet/pytorch-cpu/user_default.conf b/closed/Intel/code/retinanet/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..1f2eb0de6
--- /dev/null
+++ b/closed/Intel/code/retinanet/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+*.Offline.target_qps = 150
+*.Server.target_qps = 100
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/README.md b/closed/Intel/code/rnnt/pytorch-cpu/README.md
index 319ddf1f8..e6a8692c1 100644
--- a/closed/Intel/code/rnnt/pytorch-cpu/README.md
+++ b/closed/Intel/code/rnnt/pytorch-cpu/README.md
@@ -46,3 +46,30 @@ You can also use the following command to start with your custom conda-env/work-
   cd /opt/workdir/code/rnnt/pytorch-cpu
   SKIP_BUILD=1 STAGE=0 bash run.sh
 ```
+
+### Option 3: Pull docker image
+```
+  <TBD: command to pull docker>
+  docker run --name intel_rnnt --privileged -itd -v /data/mlperf_data:/data/mlperf_data --net=host --ipc=host mlperf_inference_rnnt:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/rnnt/pytorch-cpu
+  SKIP_BUILD=1 STAGE=0 bash run.sh
+```
+
+### Get the Results
+
+Check the appropriate offline or server performance log files, either
+``./logs/Server/performance/.../mlperf_log_summary.txt`` or
+``./logs/Offline/performance/.../mlperf_log_summary.txt``:
+
+* Verify you see ``results is: valid``.
+* For offline mode performance, check the field ``Samples per second:``
+* For server mode performance, check the field ``Scheduled samples per second:``
+
+Check the appropriate offline or server accuracy log file, either
+``./logs/Server/accuracy/.../mlperf_log_summary.txt`` or
+``./logs/Offline/accuracy/.../mlperf_log_summary.txt``:
+
+Save these output log files elsewhere when each test is completed as they will be overwritten by the next test.
+
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/docker/Dockerfile b/closed/Intel/code/rnnt/pytorch-cpu/docker/Dockerfile
index 24e174f28..2d74e81d1 100644
--- a/closed/Intel/code/rnnt/pytorch-cpu/docker/Dockerfile
+++ b/closed/Intel/code/rnnt/pytorch-cpu/docker/Dockerfile
@@ -40,9 +40,9 @@ RUN curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Mini
     chmod +x ~/miniconda.sh && \
     ~/miniconda.sh -b -p /opt/conda && \
     rm ~/miniconda.sh && \
-    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} ninja cmake jemalloc inflect libffi pandas requests toml tqdm unidecode scipy==1.9.3 && \
-    /opt/conda/bin/conda install -c conda-forge llvm-openmp librosa wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
-    /opt/conda/bin/conda install -c intel mkl mkl-include intel-openmp && \
+    /opt/conda/bin/conda install -y python=${PYTHON_VERSION} ninja==1.10.2 cmake==3.22.1 jemalloc==5.2.1 inflect==5.3.0 libffi ==3.4.4 pandas==1.5.3 requests==2.29.0 toml==0.10.2 tqdm==4.65.0 unidecode==1.2.0 scipy==1.9.3 && \
+    /opt/conda/bin/conda install -c conda-forge llvm-openmp==12.0.1 librosa==0.9.2 wheel==0.38.1 setuptools==65.5.1 future==0.18.3 && \
+    /opt/conda/bin/conda install -c intel mkl==2023.1.0 mkl-include==2023.1.0 intel-openmp==2023.1.0 && \
     /opt/conda/bin/conda clean -ya && \
     pip install sox
 
@@ -79,6 +79,7 @@ WORKDIR /opt/workdir
 #COPY ./intel_inference_datacenter_v2-1 intel_inference_datacenter_v2-1
 COPY ./code/rnnt /opt/workdir/code/rnnt
 COPY ./code/run_clean.sh /opt/workdir/code/run_clean.sh
+COPY ./code/user_config.py code/user_config.py
 RUN if [ -d ${third_party_dir} ];then rm -rf ${third_party_dir}; fi && \
     mkdir ${third_party_dir} && cd ${third_party_dir}
 RUN wget --no-check-certificate https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.2.tar.xz -O flac-1.3.2.tar.xz && \
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/docker/build_rnnt-99_container.sh b/closed/Intel/code/rnnt/pytorch-cpu/docker/build_rnnt-99_container.sh
index b71c34b72..d11dac99c 100644
--- a/closed/Intel/code/rnnt/pytorch-cpu/docker/build_rnnt-99_container.sh
+++ b/closed/Intel/code/rnnt/pytorch-cpu/docker/build_rnnt-99_container.sh
@@ -12,7 +12,7 @@ export IMAGE_NAME=mlperf_inference_rnnt:${VERSION}
 
 
 echo "Building RNNT-99 workflow container"
-DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile -t ${IMAGE_NAME} ../../../../
+DOCKER_BUILDKIT=1 docker build ${DOCKER_BUILD_ARGS} -f Dockerfile --no-cache -t ${IMAGE_NAME} ../../../../
 
 
 #docker run --rm -it ${IMAGE_NAME} python -c "import torch; print('torch:', torch.__version__)"
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/launch_sut.sh b/closed/Intel/code/rnnt/pytorch-cpu/launch_sut.sh
index 013cbe976..e16862fba 100755
--- a/closed/Intel/code/rnnt/pytorch-cpu/launch_sut.sh
+++ b/closed/Intel/code/rnnt/pytorch-cpu/launch_sut.sh
@@ -40,10 +40,17 @@ else
 fi
 mkdir -p ${OUT_DIR}
 
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+export number_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+
 SCRIPT_ARGS=" --test_scenario=${SCENARIO}"
 SCRIPT_ARGS+=" --model_file=${WORK_DIR}/rnnt_${MODE}_jit.pt"
 SCRIPT_ARGS+=" --mlperf_config=${SUT_DIR}/inference/mlperf.conf"
-SCRIPT_ARGS+=" --user_config=${SUT_DIR}/configs/user.conf"
+
+python ../../user_config.py
+USER_CONF=user.conf
+SCRIPT_ARGS+=" --user_config=${USER_CONF}"
+
 SCRIPT_ARGS+=" --output_dir=${OUT_DIR}"
 SCRIPT_ARGS+=" --inter_parallel=${INTER}"
 SCRIPT_ARGS+=" --intra_parallel=${INTRA}"
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/run.sh b/closed/Intel/code/rnnt/pytorch-cpu/run.sh
index f84bc8065..874ae2ba7 100755
--- a/closed/Intel/code/rnnt/pytorch-cpu/run.sh
+++ b/closed/Intel/code/rnnt/pytorch-cpu/run.sh
@@ -2,12 +2,17 @@
 
 set -ex
 
+INTRA_Offline=4
+INTRA_Server=8
+PRO_intra=1
+PRO_intra_per_socket=8
+BATCH_SIZE=128
+
 : ${CONDA_ENV=${1:-'rnnt-infer'}}
 : ${WORK_DIR=${2:-${PWD}/mlperf-rnnt-librispeech}}
 : ${LOCAL_DATA_DIR=${WORK_DIR}/local_data}
 : ${STAGE=${3:-2}}
 : ${SKIP_BUILD=${4:-0}}
-: ${SETUP_ONLY=${5:-'no'}} 
 
 mkdir -p ${WORK_DIR}
 
@@ -62,21 +67,30 @@ fi
 if [[ ${STAGE} -le 4 ]]; then
   echo '==> Building model'
   JIT=true WAV=true ./save_model.sh
-  if [ "${SETUP_ONLY}" == "yes" ];then return 0 ;fi
 fi
 
+
+number_threads=`nproc --all`
+number_physical_cores=`lscpu -b -p=Core,Socket | grep -v '^#' | sort -u | wc -l`
+number_sockets=`grep physical.id /proc/cpuinfo | sort -u | wc -l`
+number_instance=$((number_threads/INTRA_Offline))
+
+PRO_inter=$((number_sockets*PRO_intra_per_socket))
+INTER_Offline=$((number_threads/INTRA_Offline))
+INTER_Server=$[(number_physical_cores-PRO_inter*PRO_intra)/INTRA_Server]
+
 if [[ ${STAGE} -le 5 ]]; then
   echo '==> Run RNN-T Offline accuracy'
-  SCENARIO=Offline BS=256 INTER=28 INTRA=4 ACCURACY=true LEN=2 ./launch_sut.sh
+  SCENARIO=Offline BS=256 INTER=$INTER_Offline INTRA=$INTRA_Offline ACCURACY=true LEN=2 ./launch_sut.sh
   sleep 5
   echo '==> Run RNN-T Offline benchmark'
-  SCENARIO=Offline BS=256 INTER=28 INTRA=4 LEN=2 WARMUP=3 ./launch_sut.sh
+  SCENARIO=Offline BS=256 INTER=$INTER_Offline INTRA=$INTRA_Offline LEN=2 WARMUP=3 ./launch_sut.sh
   sleep 5
   echo '==> Run RNN-T Server accuracy'
-  SCENARIO=Server PRO_BS=4 PRO_INTER=16 PRO_INTRA=1 BS=128 INTER=12 INTRA=8 LEN=8 RESPONSE=9 QOS=233500 ACCURACY=true ./launch_sut.sh
+  SCENARIO=Server PRO_BS=4 PRO_INTER=$PRO_inter PRO_INTRA=$PRO_intra BS=$BATCH_SIZE INTER=$INTER_Server INTRA=$INTRA_Server LEN=8 RESPONSE=9 QOS=233500 ACCURACY=true ./launch_sut.sh
   sleep 5
   echo '==> Run RNN-T Server benchmark'
-  SCENARIO=Server PRO_BS=4 PRO_INTER=16 PRO_INTRA=1 BS=128 INTER=12 INTRA=8 LEN=8 RESPONSE=9 QOS=233500 WARMUP=3 ./launch_sut.sh
+  SCENARIO=Server PRO_BS=4 PRO_INTER=$PRO_inter PRO_INTRA=$PRO_intra BS=$BATCH_SIZE INTER=$INTER_Server INTRA=$INTRA_Server LEN=8 RESPONSE=9 QOS=233500 WARMUP=3 ./launch_sut.sh
   wait
 fi
 
diff --git a/closed/Intel/code/rnnt/pytorch-cpu/user_default.conf b/closed/Intel/code/rnnt/pytorch-cpu/user_default.conf
new file mode 100644
index 000000000..2d850711f
--- /dev/null
+++ b/closed/Intel/code/rnnt/pytorch-cpu/user_default.conf
@@ -0,0 +1,4 @@
+[default]
+number_cores = 56
+*.Server.target_qps = 2100.0
+*.Offline.target_qps = 3000.0
diff --git a/closed/Intel/code/user_config.py b/closed/Intel/code/user_config.py
new file mode 100644
index 000000000..5be44aebd
--- /dev/null
+++ b/closed/Intel/code/user_config.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+import configparser
+import os
+config_custom = configparser.ConfigParser()
+config_custom.optionxform = str
+config_custom['custom'] = {}
+
+config = configparser.ConfigParser()
+config.optionxform = str
+
+config.read('user_default.conf')
+
+number_cores = int(os.getenv('number_cores'))
+default_number_cores = int(config.get('default','number_cores'))
+
+for section in config.sections():
+    if config.has_section(section):
+        for name, value in config.items(section):
+            if name == "number_cores":
+                continue
+            print('default  %s = %s' % (name, value))
+
+            custom_value= str(round(float(value) * (number_cores / default_number_cores), 4))
+            config_custom['custom'][name] = custom_value
+            print('custom  %s = %s' % (name, custom_value))
+
+
+with open('user.conf', 'w') as f:
+    config_custom.write(f)
+
+with open('user.conf', 'r') as fin:
+    data = fin.read().splitlines(True)
+with open('user.conf', 'w') as fout:
+    fout.writelines(data[1:])
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99.9/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99.9/Offline/README.md
index 36c4c4508..4573f435e 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99.9/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99.9/Offline/README.md
@@ -54,6 +54,16 @@
   bash process_data_model.sh
   
 ``` 
+#### 3.b Option 3: pull docker  
+```
+  <TBD: command to pull docker>
+  docker run --name intel_3dunet --privileged -itd -v ~/mlperf_data:/root/mlperf_data --net=host --ipc=host mlperf_inference_3dunet:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/3d-unet-99.9/pytorch-cpu
+  bash process_data_model.sh
+  
+```
 ### 4. Run command for accuracy and performance
 ```
   bash run_SPR56C_2S.sh acc
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99/Offline/README.md
index 36c4c4508..4573f435e 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/3d-unet-99/Offline/README.md
@@ -54,6 +54,16 @@
   bash process_data_model.sh
   
 ``` 
+#### 3.b Option 3: pull docker  
+```
+  <TBD: command to pull docker>
+  docker run --name intel_3dunet --privileged -itd -v ~/mlperf_data:/root/mlperf_data --net=host --ipc=host mlperf_inference_3dunet:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/3d-unet-99.9/pytorch-cpu
+  bash process_data_model.sh
+  
+```
 ### 4. Run command for accuracy and performance
 ```
   bash run_SPR56C_2S.sh acc
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Offline/README.md
index 6167b60a8..b26d37705 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Offline/README.md
@@ -85,15 +85,20 @@ For ICX above, subsitute: -mavx512cd -mavx512dq -mavx512bw -mavx512vl to -march=
 ```
   cd docker
   bash build_bert-99_container.sh
-
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert intel/intel-optimized-pytorch:mlperf-submission-inference-2.1-bert99
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
 ```
-cd /opt/workdir/code/bert-99/pytorch-cpu
+cd bert-99/pytorch-cpu/
 export DATA_PATH=/data/mlperf_date/bert
 bash convert.sh
 ```
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Server/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Server/README.md
index 6167b60a8..b26d37705 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Server/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/Server/README.md
@@ -85,15 +85,20 @@ For ICX above, subsitute: -mavx512cd -mavx512dq -mavx512bw -mavx512vl to -march=
 ```
   cd docker
   bash build_bert-99_container.sh
-
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert intel/intel-optimized-pytorch:mlperf-submission-inference-2.1-bert99
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
 ```
-cd /opt/workdir/code/bert-99/pytorch-cpu
+cd bert-99/pytorch-cpu/
 export DATA_PATH=/data/mlperf_date/bert
 bash convert.sh
 ```
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Offline/README.md
index 6167b60a8..d1e2c94db 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Offline/README.md
@@ -85,10 +85,15 @@ For ICX above, subsitute: -mavx512cd -mavx512dq -mavx512bw -mavx512vl to -march=
 ```
   cd docker
   bash build_bert-99_container.sh
-
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Server/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Server/README.md
index 6167b60a8..d1e2c94db 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Server/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/bert-99/bert-99/Server/README.md
@@ -85,10 +85,15 @@ For ICX above, subsitute: -mavx512cd -mavx512dq -mavx512bw -mavx512vl to -march=
 ```
   cd docker
   bash build_bert-99_container.sh
-
-  docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
-  docker ps -a #get container "id"
-  docker exec -it <id> bash
+```
+### option 2: pull docker
+```
+  <TBD: command to pull docker>
+```
+```
+docker run --privileged --name intel_bert -itd --net=host --ipc=host -v </path/to/datatset/and/model>:/data/mlperf_date/bert mlperf_inference_bert:3.0
+docker ps -a #get container "id"
+docker exec -it <id> bash
 ```
 
 ## convert dataset and model
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Offline/README.md
index 21aab62b4..d36901fdf 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Offline/README.md
@@ -66,17 +66,30 @@ Please follow the [instructions](#run-benchmark-common-for-docker--baremetal) in
 
 The docker container can be created either by building it using the Dockerfile or pulling the image from Dockerhub (if available). Please download the Imagenet dataset on the host system before starting the container.
 
-### Build & Run Docker container from Dockerfile
+### (a) Build & Run Docker container from Dockerfile
 ```
 cd docker/
 
 bash build_resnet50_contanier.sh
 
-docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -it --privileged <docker image ID> /bin/bash
+docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -itd --privileged <docker image ID> /bin/bash
 
 cd code/resnet50/pytorch-cpu
 ```
 
+### (b) Pull Docker Image from Dockerhub & Run container
+```
+[TBD]
+docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50
+
+docker run --name intel_resnet50 -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val --privileged -itd --net=host \
+  --ipc=host intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50:3.0
+  
+docker exec -it intel_resnet50 bash
+
+cd code/resnet50/pytorch-cpu
+
+```
 ### Prepare Calibration Dataset & Download Model ( Inside Container )
 
 If you need a proxy to access the internet, replace your host proxy with the proxy server for your environment. If no proxy is needed, you can skip this step:
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Server/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Server/README.md
index 21aab62b4..d36901fdf 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Server/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-INT8/resnet50/Server/README.md
@@ -66,17 +66,30 @@ Please follow the [instructions](#run-benchmark-common-for-docker--baremetal) in
 
 The docker container can be created either by building it using the Dockerfile or pulling the image from Dockerhub (if available). Please download the Imagenet dataset on the host system before starting the container.
 
-### Build & Run Docker container from Dockerfile
+### (a) Build & Run Docker container from Dockerfile
 ```
 cd docker/
 
 bash build_resnet50_contanier.sh
 
-docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -it --privileged <docker image ID> /bin/bash
+docker run -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val -itd --privileged <docker image ID> /bin/bash
 
 cd code/resnet50/pytorch-cpu
 ```
 
+### (b) Pull Docker Image from Dockerhub & Run container
+```
+[TBD]
+docker pull intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50
+
+docker run --name intel_resnet50 -v </path/to/ILSVRC2012_img_val>:/opt/workdir/code/resnet50/pytorch-cpu/ILSVRC2012_img_val --privileged -itd --net=host \
+  --ipc=host intel/intel-optimized-pytorch:mlperf-inference-3.0-resnet50:3.0
+  
+docker exec -it intel_resnet50 bash
+
+cd code/resnet50/pytorch-cpu
+
+```
 ### Prepare Calibration Dataset & Download Model ( Inside Container )
 
 If you need a proxy to access the internet, replace your host proxy with the proxy server for your environment. If no proxy is needed, you can skip this step:
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Offline/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Offline/README.md
index 319ddf1f8..f9e674ca6 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Offline/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Offline/README.md
@@ -46,3 +46,13 @@ You can also use the following command to start with your custom conda-env/work-
   cd /opt/workdir/code/rnnt/pytorch-cpu
   SKIP_BUILD=1 STAGE=0 bash run.sh
 ```
+
+### Option 3: Pull docker image
+```
+  <TBD: command to pull docker>
+  docker run --name intel_rnnt --privileged -itd -v /data/mlperf_data:/data/mlperf_data --net=host --ipc=host mlperf_inference_rnnt:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/rnnt/pytorch-cpu
+  SKIP_BUILD=1 STAGE=0 bash run.sh
+```
diff --git a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Server/README.md b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Server/README.md
index 319ddf1f8..f9e674ca6 100644
--- a/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Server/README.md
+++ b/closed/Intel/measurements/1-node-2S-SPR-PyTorch-MIX/rnnt/Server/README.md
@@ -46,3 +46,13 @@ You can also use the following command to start with your custom conda-env/work-
   cd /opt/workdir/code/rnnt/pytorch-cpu
   SKIP_BUILD=1 STAGE=0 bash run.sh
 ```
+
+### Option 3: Pull docker image
+```
+  <TBD: command to pull docker>
+  docker run --name intel_rnnt --privileged -itd -v /data/mlperf_data:/data/mlperf_data --net=host --ipc=host mlperf_inference_rnnt:3.0
+  docker ps -a #get container "id"
+  docker exec -it <id> bash
+  cd /opt/workdir/code/rnnt/pytorch-cpu
+  SKIP_BUILD=1 STAGE=0 bash run.sh
+```
-- 
2.34.1

